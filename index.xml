<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>outrunJ笔记</title>
    <link>http://shenwenqing.com/</link>
    <description>Recent content on outrunJ笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Copyright 2017 outrunJ</copyright>
    <lastBuildDate>Wed, 10 Oct 2018 20:56:27 +0800</lastBuildDate>
    
	<atom:link href="http://shenwenqing.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Infomation</title>
      <link>http://shenwenqing.com/series/infomation/infomation/</link>
      <pubDate>Wed, 10 Oct 2018 20:56:27 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/infomation/infomation/</guid>
      <description>网站 漂亮 http://graphicnovel-hybrid4.peugeot.com/start.html http://wildflower.resn.co.nz/ http://acko.net/blog/making-love-to-webkit/ http://journey.lifeofpimovie.com/#!/ http://thecarpandtheseagull.thecreatorsproject.com/video.html 示例 https://www.chromeexperiments.com/webgl?page=1&amp;amp;sort=newest https://developer.mozilla.org/en-US/docs/Web/Demos_of_open_web_technologies www.webgl.com https://www.reddit.com/r/threejs/ http://learningthreejs.com/ http://operasoftware.github.io/Odin/demo.html http://madebyevan.com/webgl-water/ http://www.spielzeugz.de/html5/sticky-thing/ http://www.ro.me/ http://threejs.org/examples/#webgl_animation_cloth http://threejs.org/examples/#css3d_periodictable http://d3.artzub.com/wbca/ http://www.findtheconversation.com/concept-map http://acme-experience.com/wood-and-metalworking http://suissemania.ch/ http://thunderdome.riotgames.com/teamwork http://galeriekostek.cz/cs http://centralkladno.cz/ http://www.deutser.com/ http://www.nespresso.com/kitchenaid/en_CA/colors http://www.webgl.com/ # 官网很多示例 http://aleksandarrodic.com/ # 交互网页 http://aleksandarrodic.com/p/jellyfish/ # 乌贼 http://www.chromeexperiments.com/detail/webgl-water-simulation/ # 水球 http://nouvellevague.ultranoir.com/ # 雕像 http://1985wanggang.blog.163.com/blog/static/776383320103755629174/ # flash web 3d 地球 http://stemkoski.github.io/Three.js # 很多three.js学习示例 http://gyu.que.jp/jscloth/ # js cloth http://alteredqualia.com/canvasmol/ # 3d 化学元素 http://demo.itivy.com/html5-earth/index.html # 3d 旋转地球 http://www.fxysw.com/forum.php # 分形艺术网 http://demo.itivy.com/html5-3d-google-search/index.html # 伪3d google box http://demo.</description>
    </item>
    
    <item>
      <title>English</title>
      <link>http://shenwenqing.com/series/english/english/</link>
      <pubDate>Wed, 10 Oct 2018 20:53:25 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/english/english/</guid>
      <description>发音 spelling and numbers Acronym ibM, miT, ph.D mbA lA iQ revP ciA fbI coD soS xyZ Spelling boX cooK wiLsoN sentence stress with descriptive phrases It&#39;s SHORT. It&#39;s a short NAIL It&#39;s CHOCOLATE. It&#39;s a chocolate CAKE. contrasting description and a set phrase It&#39;s a short NAIL. It&#39;s a FINGERnail It&#39;s a chocolate CAKE. It&#39;s a PANcake T,D,S or Z + Y T + Y = CH what&#39;s your name can&#39;t you do it?</description>
    </item>
    
    <item>
      <title>管理</title>
      <link>http://shenwenqing.com/series/management/management/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/management/management/</guid>
      <description> 事 知原理 是什么，为什么，怎么样，拆解  事与团队 事造就团队，好团队不一定出好成果  团队 负责态度 提高团队效率，而非自己效率 存在合理性 有目标，成员能力认可，成员感性认可 成果评价 产出判断 分配利益和荣耀 团队提升 培训无意义，自觉成长 分配事 因特质分配，如稳定，峰值，沟通  人 行动 感性，理性，惯性 成分 技能，素质，精神 优点，缺点 # 并非此长彼短，是两个维度 态度 找潜质的眼光 特性抑制 创造力，纪律 勤奋，聪明 稳定，峰值 深度，速度 细节，大局 发展 上限 下限 成本 低成本召回  招聘 能力 真诚 主动 写代码 分析/解决问题 时间/流程意识 设计 表达 快 重点 沟通 双方 逻辑  上级 是客户 购买能力和时间 靠谱 事事有交代 只交“产品” 背景清晰 扼要 完整 引入独有经验 设计沟通 及时、主动、规律 update进度 紧迫感 重要性 问题和需求 变化 需要的决断 给意见做选择题 下一个工作重点 下一个沟通节点 计划外沟通 简要内容 告知用时 态度 顺 一致的作风 把握分寸、赞美 领导利益着想 顾全局，负责 分忧 超出预期 提问题与建设性意见  架构师 介绍 架构就是各种权衡，人，资源，需求，时间，弄一个大伙都能接受的方案 拆分 分界 正交 工程 找瓶颈 人 只hire owner 自我驱动，持续改进 告警及时响应 出问题，写相关文档 砸需求，看弹性 小精英团队，智能解决问题 任务 任务列表: 难度, 优先级, 排期, 地平线目标, 现状, wishlist nice to have给新人 素养 思考全面 方法 划分项目边界 想清楚再行动，行动也会顺畅 技术 kiss # 有生命力，简单却不容易 设计清晰 选型简单 代码精炼 抽象优雅 沟通 文档 &amp;gt; 邮件 &amp;gt; im &amp;gt; 电话 # 即时性相反  战略 未来 ai 云 优势 轻，方便 全 可计算 本质 批发转零售 帮助别人成功而成功 产品型转服务型 现象 外包被淘汰 行业 OS of business 功能 产品功能，样板 开发体验，文档 组件收费，容量收费，节省的成本收费 数据直接做决策 分类 service # 基础服务 plugins # 基础服务组合 app # plugins组合 产品 开箱即用，做瑞士军刀不做零件 矛盾 强大，易用 小客户无付费能力，大客户要求多 行业分类 垂直，水平  </description>
    </item>
    
    <item>
      <title>标记语言</title>
      <link>http://shenwenqing.com/series/pl/markup_language/ml/</link>
      <pubDate>Wed, 10 Oct 2018 17:59:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/ml/</guid>
      <description>org-mode markdown restructedText LaTex plantUML  </description>
    </item>
    
    <item>
      <title>PlantUML</title>
      <link>http://shenwenqing.com/series/pl/markup_language/plantuml/</link>
      <pubDate>Wed, 10 Oct 2018 17:59:00 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/plantuml/</guid>
      <description> 分类 salt wireframe uml activity class component sequence state use case  </description>
    </item>
    
    <item>
      <title>Schema</title>
      <link>http://shenwenqing.com/series/pl/markup_language/schema/</link>
      <pubDate>Wed, 10 Oct 2018 17:55:28 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/schema/</guid>
      <description> Schema约束 tld文件是Schema约束的  引入  根元素添加 文件books.xsd &amp;lt;xs:schema xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; // ns 是 namespace targetNamespace=&amp;quot;http://www.jnb.com&amp;quot; // 给当前约束文件起一个名字 elementFormDefault=&amp;quot;qualified&amp;quot;&amp;gt; // 添加属性，qualified指所有都来自xs空间 可选attributeFormDefault=&amp;quot;unqualified&amp;quot; // unqualified 默认来自的空间 文件books.xml 从根元素开始约束 &amp;lt;jnb:书架 xmlns:jnb=&amp;quot;http://www.jnb.com&amp;quot; // 在被约束文件根元素添加属性，约束命名空间 xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; // 找到xsi xsi:schemaLocation=&amp;quot;http://www.jnb.com books.xsd&amp;quot;&amp;gt; // 指定对应约束文件的物理地址 &amp;lt;jnb:书&amp;gt; &amp;lt;/jnb:书&amp;gt; &amp;lt;/jnb:书架&amp;gt; // 在被约束所有元素添加指定空间前缀 // 保存并检验  语法  元素约束 &amp;lt;xs:element name=&amp;quot;xxx&amp;quot; type=&amp;quot;yy&amp;quot; defaule=&amp;quot;&amp;quot; /&amp;gt; // name 元素名 type 类型 元素类型 xs:string // 字符串 xs:decimal // big decimal 数字类型 xs:integer // xs:boolean xs:date // 日期 xs:time // 时间 属性约束，在元素标签体里 &amp;lt;xs:attribute name=&amp;quot;&amp;quot; type=&amp;quot;&amp;quot; /&amp;gt; // name 属性名 type 类型 属性类型和元素类型一样 属性说明 &amp;lt;xs:attribute use=&amp;quot;required&amp;quot; /&amp;gt; 限定约束 对值的限定 枚举限定 正则限定 选择限定 长度限定 混合内容 &amp;lt;xs:complexType mixed=&amp;quot;true&amp;quot;&amp;gt; // 只有文本和子元素，mixed可以不使用 &amp;lt;/xs:complexType&amp;gt; 指示器 All Choice // 选择出现 Sequence // 按声明顺序出现 maxOccurs minOccurs Group name attributeGroup name &amp;lt;xs:all&amp;gt; // 指定以下元素随意出现 &amp;lt;/xs:all&amp;gt;  </description>
    </item>
    
    <item>
      <title>Dtd</title>
      <link>http://shenwenqing.com/series/pl/markup_language/dtd/</link>
      <pubDate>Wed, 10 Oct 2018 17:54:44 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/dtd/</guid>
      <description>注意  同名元素只能用命名空间来区分定义  例子  &amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt; &amp;lt;!DOCTYPE poem[ &amp;lt;!ELEMENT poem (author, title, content)&amp;gt; &amp;lt;!ELEMENT author (#PCDATA)&amp;gt; &amp;lt;!ELEMENT title (#PCDATA)&amp;gt; &amp;lt;!ELEMENT content (#PCDATA)&amp;gt; ]&amp;gt; &amp;lt;poem&amp;gt; &amp;lt;author&amp;gt;王维&amp;lt;/author&amp;gt; &amp;lt;title&amp;gt;鹿柴&amp;lt;/title&amp;gt; &amp;lt;content&amp;gt;空山不见人， 但闻人语声， 返景入深林，复照青苔上。&amp;lt;/content&amp;gt; &amp;lt;/poem&amp;gt; 外部引用 &amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt; &amp;lt;!DOCTYPE poem SYSTEM &amp;quot;outer.dtd&amp;quot;&amp;gt; // outer.dtd &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;!ELEMENT poem (author, title, content)&amp;gt; &amp;lt;!ELEMENT author (#PCDATA)&amp;gt; &amp;lt;!ELEMENT title (#PCDATA)&amp;gt; &amp;lt;!ELEMENT content (#PCDATA)&amp;gt;  语法  &amp;lt;!ELEMENT author (#PCDATA)&amp;gt; 之中的两个空格必须要有  元素类型  EMPTY # 可以有属性 ANY # 根元素设为ANY类型后，元素出现的次数和顺序不受限制 #PCDATA 纯元素类型 混合类型 # 可以是元素与内容的混合 例子 &amp;lt;!</description>
    </item>
    
    <item>
      <title>设计-格式语言</title>
      <link>http://shenwenqing.com/series/design/language/</link>
      <pubDate>Wed, 10 Oct 2018 17:47:53 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/language/</guid>
      <description> org-mode markdown restructedText LaTex plantUML # xml  </description>
    </item>
    
    <item>
      <title>设计-规定</title>
      <link>http://shenwenqing.com/series/design/standard/</link>
      <pubDate>Wed, 10 Oct 2018 17:46:58 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/standard/</guid>
      <description> 巴科斯范式的内容 在双引号中的字(&amp;quot;word&amp;quot;)代表着这些字符本身。而double_quote用来代表双引号。 在双引号外的字（有可能有下划线）代表着语法部分。 尖括号( &amp;lt; &amp;gt; )内包含的为必选项。 方括号( [ ] )内包含的为可选项。 大括号( { } )内包含的为可重复0至无数次的项。 竖线( | )表示在其左右两边任选一项，相当于&amp;quot;OR&amp;quot;的意思。 ::= 是“被定义为”的意思。  </description>
    </item>
    
    <item>
      <title>设计-媒体</title>
      <link>http://shenwenqing.com/series/design/media/</link>
      <pubDate>Wed, 10 Oct 2018 17:45:17 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/media/</guid>
      <description> 场景控制  3CAD character camera control art direction  特效 会场散射光束（博物馆） 雾中焦点的竖光（saber的剑） 画线的光点（最终幻想） 密集的星星，远近缩放，光圈(tree.js官网） 水滴带动整个屏幕的亮度(fate stay night) 蓝色光影交错（fate stay night） 秒针声强调时间(fate stay night) 单帧卡动画渲染气氛(fsn) 黑白画面到彩色画面(madlife 集锦[dream on]) 黑白画面彩色涟漪(冰果) 地面的雾影(fsn) 音乐重节拍时出现隐形单位/人(fsn) 转动的星空光点线加云(fsn结尾) 沙的立体塑型(秦时明月) 红辣椒的分镜  网站效果 图片向下拉，上面模糊小，下面清晰大，有一种震撼感  </description>
    </item>
    
    <item>
      <title>设计-代码</title>
      <link>http://shenwenqing.com/series/design/code/</link>
      <pubDate>Wed, 10 Oct 2018 17:40:53 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/code/</guid>
      <description>思想 todo: 待统一 原则 替换 子类继承超类的所有 单一职则 一个类负责一个功能 开闭 对扩展开放，对修改关闭，如接口 最小功能隔离 顺序依赖 低层依赖高层，具体依赖抽象 non-intrusion 将功能推入代码，而非代码拿到功能 代码实现接口，而非继承类 创建 factory, abstract factory builder prototype # 原型复制来产生对象 singleton 结构 adapter bridge # 抽象与实现分离 composite # 抽取公共行为 decorator facade # 外观描述 flyweight # 享元 proxy 行为 interpreter template method 责任链 command iterator mediator # 消息传递中介 memento # 保存，恢复状态 observer state # 不同状态下不同行为 strategy # 同行为的不同算法，替换算法 visitor # 抽象行为本身，不同对象不同行为  单例 单例模式 单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。 如 # 大多有资源管理器的功能 线程池 缓存 日志对象 对话框 打印机 显卡驱动程序 java反射机制会使所有单例失效：私有构造方法可以被访问 例子 public class Singleton{ private static Singleton uniqueInstance = null; private Singleton(){} public static Singleton getInstance(){ if(uniqueInstance == null){ uniqueInstance = new Singleton(); } return uniqueInstance; } } 三种单例 // 饿汉式单例类.</description>
    </item>
    
    <item>
      <title>设计-工程</title>
      <link>http://shenwenqing.com/series/design/project/</link>
      <pubDate>Wed, 10 Oct 2018 17:39:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/project/</guid>
      <description> 评价 必要分析 tracing log, 监控, 告警 极限性能，当前负载情况 降级方案 下游依赖 数据修复脚本 集成性 integration, 整体各部分间有机协调工作，发挥集体效益 信息系统的集成性 系统之间相互通信和相互协作的能力 扩展性以集成性为前提 可复用性 可提高可扩展性 扩展性 评估 方便添加新功能 扩展后，新旧功能集成性 扩展后，满足性能: 及时性、可靠性 安全 低成本 方式 应用分离 正确管理依赖项 类型 自动代码生成 动态编译 元模型 自描述文件 语言互用性 自定义属性(元数据) 基于元模型的反射 可扩展标记语言(xml) 插件 # 设计得当的一个软件几乎全部可以利用插件来完成 组件开发 功能固定 考虑兼容性、可重用性 难点 接口设计 可成长性 组成成分可不断增加 可扩展性是可成长性的基础 可代谢性 组成部分可以更新  工程 软件发展的阶段 程序设计阶段1946-1955 节省空间 软件设计阶段1956-1970 硬件发展，软件危机 软件工程阶段1970-今 组件化 迭代开发 迭代周期 一个迭代周期中不新添加需求 一个迭代周期中包含多次迭代 一个阶段的结束称之为里程碑 初始化阶段增量 项目启动 建立业务模型 定义业务问题域 找出主要风险因素 定义项目需求的外延 创建业务问题域的相关说明文档 细代阶段增量 高层的分析与设计 建立项目的基础框架 监督主要的风险因素 制订达成项目目标的创建计划 构建阶段增量 代码及功能的实现 移交阶段增量 向用户发布产品 beta测试(alpha测试是内部测试， beta测试是用户测试) 执行性能调优，用户培训和接收测试 瀑布模型 #每一次执行工作流的深度不同 # 80/20原则 可行性分析 实现会不会复杂，尽量简单 需求分析 分类 生存点 痒点 兴奋点 # 不会按时交付（只完成主要，然后延期，用户测试） 客户沟通，同类产品比较，行业标准 功能 正确, 可行, 必要, 有序, 明确, 一致 性能 完善, 简短 分析 设计 先出成果再优化 任务分配(进度条) 命名标准 文档 可移植、可维护易扩展 排期 实现 测试 运维 螺旋模型（模块化） # 边分析边开发边交付（一环一环向目标实现） 团队 运维 设计 开发 测试人员 分析师 技术总监 架构师（软件 数据库） 项目经理（技术、人员【人员离职问题】、软件） 公司问题 人员流动 代码维护  uml Unified Modeling Languag 静态模型 用例图(需求分析):客户看 # 项级图(突出重点)，一级图，二级图，三级图 参与者(泛化) (关联) 用例(包含，扩展【继承】) # 是动词，表示功能模块 注释 类图：类结构、类关系（可以自动生成java类） 继承 实现 关联（全局变量）【导航性：一对多关系等】【聚合(所有引用)，组合（生命周期相同，如int类型属性）】 # spring 中的依赖注入是关联 依赖（局部变量） 实体关系图ER 动态模型 时序图：可以根据时序图写代码 #　rose工具中时序图中加入参与者：用例图中创建参与者，拖入时序图中  </description>
    </item>
    
    <item>
      <title>运维</title>
      <link>http://shenwenqing.com/series/ops/ops/</link>
      <pubDate>Wed, 10 Oct 2018 17:33:07 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/ops/</guid>
      <description>目标 安全性 账号管理 漏洞修复 安全审计 可用性 服务监控 架构优化 冗余备份 预案演练 故障响应 运维成本 成本核算 服务选型 成本优化 运维效率 研发工作流支持 服务支持平台建设 运维自动化平台建设 操作系统 windows linux chrome os mac os fushsia # goolge os  套件 jira # IBM Rational提供的缺陷及变更管理工具。它对软件缺陷或功能特性等任务记录提供跟踪管理。提供了查询定制和多种图表报表。 teambition redmine # ror开发的项目管理web，支持git, svn, cvs等，把成员、任务、文档、讨论等资源整合在一起 gerrit # code review 工具 jenkins # java实现的持续集成工具 ansible # python实现的自动化部署工具 gradle # 自动化构建 jumpserver saltstack # 自动化运维工具 zabbix # 分布式监控 nagios # 监控 puppet # 自动化运维 selenium # 自动化运维 tty.</description>
    </item>
    
    <item>
      <title>架构-性能</title>
      <link>http://shenwenqing.com/series/architecture/performance/</link>
      <pubDate>Wed, 10 Oct 2018 17:20:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/performance/</guid>
      <description>qps latency through put io 磁盘 iops: 2k 网络 带宽 iops: 3w bottle-nect  </description>
    </item>
    
    <item>
      <title>架构-工具</title>
      <link>http://shenwenqing.com/series/architecture/tool/</link>
      <pubDate>Wed, 10 Oct 2018 17:19:52 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/tool/</guid>
      <description>datastudio # ibm数据库连接工具 plsql oracle sql developer navicat # ios的数据库操作gui cmder # windows命令行工具 wireshark charlet</description>
    </item>
    
    <item>
      <title>存储</title>
      <link>http://shenwenqing.com/series/architecture/store/</link>
      <pubDate>Wed, 10 Oct 2018 17:17:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/store/</guid>
      <description>fastdfs # 开源分布式文件系统 squid varnish # 反向代理，web缓存  </description>
    </item>
    
    <item>
      <title>服务器</title>
      <link>http://shenwenqing.com/series/architecture/server/</link>
      <pubDate>Wed, 10 Oct 2018 17:16:29 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/server/</guid>
      <description>nginx netty tomcat jetty tengine # 淘宝基于nginx修改，添加了功能 监控 /upstream_status openresty # 基于nginx, luaJit 的web平台 meteor # 包装node ringojs # jvm上commonJs规范的服务器 mina apache提供， 由Trustin Lee开发，比netty更早 tomcat native # 基于apr(apache portable runtime)技术，让tomcat在操作系统级别的交互上做的更好 tinyHttpd resin # 收费, 类似tomcat的java容器，性能提升 uwsgi # 一个web服务器，实现了wsgi, uwsgi, http等协议 weblogic # oracle was # ibm服务器 gunicon # python wsgi http server  </description>
    </item>
    
    <item>
      <title>架构-高可用</title>
      <link>http://shenwenqing.com/series/architecture/ha/</link>
      <pubDate>Wed, 10 Oct 2018 17:15:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/ha/</guid>
      <description>high-availability linux 目标  reliability: 可靠性 availability: 可用性 serviceability: 可服务性 ras: remote access service(远程服务访问)  术语  节点(node): 唯一主节点，多个备用节点 资源(resource): 是节点可控制的实体，主节点发生故障时，可以被其它节点接管 例如: 磁盘分区 文件系统 ip地址 应用程序服务 nfs文件系统 事件(event): 集群中可能发生的事件 例如: 系统故障 网络连通故障 网卡故障 应用程序故障 动作(action): 事件发生时ha的响应方式 例如: 用shell 脚本对资源进行转移  心跳 heartbeat keepalived vrrp # virtual router redundancy protocol 虚拟路由器冗余协议 # 解决静态路由出现的闪单点故障问题，它能够保证网络的不间断．稳定运行  负载 方法 dns轮循 java nio erlang语言 linux epoll bsd kqueue 消息队列、事件通知 c/c++下ace, boost.asio, libev(libevent) 服务器mina, jetty, node.</description>
    </item>
    
    <item>
      <title>架构-通信</title>
      <link>http://shenwenqing.com/series/architecture/communication/</link>
      <pubDate>Wed, 10 Oct 2018 17:13:22 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/communication/</guid>
      <description> 系统 elk # elasticsearch, logstash, kibana log.io  mq rabbitMQ kafaka jafka nsq memcacheQ zeroMQ activeMQ beanstalkd mqtt # 最早由ibm提供的，二进制消息的mq  任务 quartz # java celery # python rundeck # java  </description>
    </item>
    
    <item>
      <title>架构-治理</title>
      <link>http://shenwenqing.com/series/architecture/governance/</link>
      <pubDate>Wed, 10 Oct 2018 17:10:32 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/governance/</guid>
      <description>功能  服务 注册 发现 性能/ha 区域感知load balance 故障切换 故障注入 熔断 健康检查 流量拆分和推出 策略 quota 网络数据 api调用 服务准入条件 路由规则 容错 访问策略 安全 服务间认证(auth) tls 细粒度权限控制 配置 啮合层 # 服务与网络间加入透明层，用来功能配置 查看 服务网可视化 monitor log tracing 迭代 部署 版本控制 平台支持 # 如aws, k8s, mesos 通讯能力 # http/1.1 http/2 grpc tcp  rmi # java远程调用功能 hessian
soa eai # Enterprise Application Integration 建立底层结构将异构应用集成 esb # Enterprise Service Bus 企业服务总线， 是连接中枢  rpc hsf # 高速服务框架 (socket直连) protobuf thrift Dubbo spring cloud  paas cloudStack # 托管在apache的开源、高可用、高扩展性的云计算平台 # 支持主流hypervisors # 一个开源云计算解决方案，可以加速iaaS的部署、管理、配置 kubernetes # google开源的，在docker技术上，为容器化应用提供: 作用 资源调度 部署运行 服务发现 扩容缩容 cloudfoundry # 根据应用模板，动态生成很多tomcat, mysql, nosql, 动态控制这些实例的启停。 openstack # 云操作系统，管理虚拟资源 hsf # high-speed service framework 特点 不增加中间点(稳定，高度可伸缩) 结构 注册服务信息，推送服务地址 基于osgi  mesh lstio #google IBM, lyft开源，基于envoy 组成 数据面板 控制面板 linkerd # buoyant出品 fingle # twitter出品 envoy # lyft出品 nginmesh # nginx推出  粘合层 zookeeper # 服务发现 exhibitor # supervisor for zk gearman # 把工作委派给其他机器 etcd # k8s中用到的服务发现仓库 mesos # apache开源的分布式资源管理框架  monitor spy.</description>
    </item>
    
    <item>
      <title>架构-数据</title>
      <link>http://shenwenqing.com/series/architecture/data/</link>
      <pubDate>Wed, 10 Oct 2018 16:52:12 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/data/</guid>
      <description>流量 小米论坛 pv 2000w 热门并发300 20k/页面 300k/图片(未压缩) 70k/无图帖子 500k-3M/有图帖子 动态服务器最小带宽: 48Mbps 静态服务器最小带宽: 1440Mbps 实际购买带宽: 800M 带宽费用: 8.7w/month 糗事百科 pv 1000w 热门并发150 10k/页面 70k/图 4图/页 90k-400k/综合页 动态服务器带宽: 12Mbps 静态服务器带宽: 336Mbps  带宽 建议 热门并发1.5倍到2倍购买 价格 静态IP企业宽带 5M 10M 50M 100M 200M 盛大云 华东双线 216/月 396 1836 3636 7236 盛大云 华北BGP 318 618 3018 6018 12018 阿里云 BGP 100/兆/月 5k 1w 2w Amazon EC2 流量计费 $3313 idcexpert.cn 1.5w 10w linkcloud.cn 双线 也可流量计费 168 480 3300 6600  cdn 介绍 流量不大时带宽比cdn便宜, 流量大时cdn便宜。 界限为250Mbps左右，价格在9k/month 价格 50TB/月 100TB/月 阿里云 3.</description>
    </item>
    
    <item>
      <title>构架-方案</title>
      <link>http://shenwenqing.com/series/architecture/solution/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/solution/</guid>
      <description> 数据迁移 去掉约束 排序（中断继续）  数据存储 缓存 queue + map # queue存储、限量, map查询，指向queue中元素  直播 《关于直播，所有的技术细节都在这里了》  并发 异步事件 tornado + celery + rabbitmq + 优先级  缓存 queue + map # queue存储、限量, map查询，指向queue中元素  前端模板 layout layout service # 缓存layout到redis crud layout功能 layout对象 index # 缩略信息 plugins components table layout # 组合方式 水平，垂直，tab  游戏 进程 gateway进程组 # 对外api function进程组 # 注册玩家全局信息 session进程组 # 玩家状态 dbserver进程组 # 数据 多word进程组 # 不同地图的信息、逻辑  </description>
    </item>
    
    <item>
      <title>架构-原理</title>
      <link>http://shenwenqing.com/series/architecture/principle/</link>
      <pubDate>Wed, 10 Oct 2018 15:25:12 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/principle/</guid>
      <description>微机 并行架构 位级(bit-level): 32位, 64位计算机 指令级(instruction-level) # 处理器内部并行度很高 流水线 乱序执行 猜测执行 数据级, 单指令多数据(SIMD)架构 # 图像处理 任务级(task-level) # 多处理器 # 超线程, 虽只有4个核，但可用核返回8 共享内存模型 分布式内存模型 分类 指令流的重数分类 SI(single instruction stream)单指令流 MI(multiple instruction stream)多指令流 操作数流的重数分类 SD(single data stream)单数据流 MD(multiple data stream)多数据流 SISD 串行计算机 SIMD 阵列机(多处理单元) MISD 很少 MIMD 多处理机 多计算机 并发: 一个时间段有多个程序在运行，在同一个处理机上。 # 伪并发是单核处理器并发，真并发是多核处理器并发 # 可处理时间点i/o的数目来衡量 互斥: 程序(进程)间不使用临界资源 同步: 程序间依赖，有等待关系 同步的其它意思: 1. os开发中指进程协作 2. 数据异步复制(如同步歌曲) 并行: 多处理器才并行，单处理器叫交替执行 多线程 异步: 与同步相对。多线程是实现异步的一种手段 进程 线程 一个进程下的轻量进程 协程 单线程下事件并行(就是仿cpu时间调度) 事件(非阻塞) 介绍 就是回调 事件模型 原理 队列存事件, 单进程检测事件是否回调 工具 epoll(select, poll) libev(libevent) dma direct memory access 不依赖cpu的内存存取 长连接 socket连接  cpu 介绍 单cpu串行工作，前任务完成，后任务才开始 # 串行不适合图形处理(多点，线，面要同时乘投影矩阵) cpu把大量空间和电量分配给控制器和缓存，不能集成太多计算单元 cpu内存通过cpu总线连接, cpu总线与pci总线通过主桥(北桥)连接 # 显卡在pci总线上 ## 控制逻辑在cpu中运行, 生成渲染数据, 到内存, 再到显存显卡计算。 ### 内存到显存数据传输最花费时间。  进程调度 等级 高级调度(High-Level Scheduling) 作业调度, 后备作业调入内存运行 低级调度(Low-Level Scheduling) 进程调度, 就绪队列中某进程获得cpu 中级调度(Intermediate-Level Scheduling) 虚拟存储器引入, 内外存对换区进行进程对换 方式 非剥夺方式 处理机分配给某进程后一直运行下去,直到阻塞时,才分配处理机到另一个进程 剥夺方式 进程运行时,系统基于某种原则,剥夺分配给它的处理机.</description>
    </item>
    
    <item>
      <title>架构-术语</title>
      <link>http://shenwenqing.com/series/architecture/term/</link>
      <pubDate>Wed, 10 Oct 2018 15:22:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/term/</guid>
      <description>Alb automaticLoopBack 自动回环，虚拟接口 sdn software defined network 软件定义网络  </description>
    </item>
    
    <item>
      <title>媒体</title>
      <link>http://shenwenqing.com/series/media/media/</link>
      <pubDate>Wed, 10 Oct 2018 15:13:01 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/media/media/</guid>
      <description>原理 硬件 CRT cathode ray tube 阴极射线管显示器 随机扫描方式 光栅扫描方式 DPU distributed processing unit 分散处理单元  标准 Core Graphics System CGI(computer graphics interface) # 与设备无关的方法，方便的直接控制图形设备 CGM(computer graphics metafile) # 设备无关的主义定义图形文件格式 GKS(graphics kernal system) # 应用程序与图形输入输出设备之间的功能接口 PHIGS(programmer&#39;s hierarchical interactive graphics system) # 为3d设计的工具库 GL(graphics library) # 广泛应用的标准图形程序库  算法 基元的显示 直线扫描转换 DDA 中点画线法 Bresenham画线 圆的扫描转换 中点画圆 Bresenham 区域填充 种子填充 多边形扫描转换 图形变换 二维图形变换 二维视见变换 三维图形变换 投影 平行正交 平行斜交 透视投影 裁剪 直线段裁剪算法 Cohen-Sutherland算法 中点分割算法 梁友栋-Barsky算法 多边形裁剪Sutherland-Hodgman算法 三维图形裁剪 梁友栋-Barsky算法 曲线和曲面 概念 插值 逼近 参数连续性 几何连续性 光顺(smoothness) Hermite插值曲线多项式 Coons曲面 Bezier曲线和曲面 B样条曲线和曲面 图形运算 交点计算 多边形表面交线计算 平面中的凸壳算法 Graham扫描 Jarvis行进 包含与重叠 凸多边形 多边形的三角剖分 形体的表示 概念 图形信息 几何信息 拓扑信息 非图形信息 颜色 亮度 质量 体积 二维 边界 拆线逼近曲线 选点 共线性 三点转角阈值 带树法 图形的四叉树表示法 三维 几何元素 点 边 环(有序有向边) 面 体 体素 一组单元实体: 长方体、圆柱体、圆锥体、球体 扫描体 代数半空间定义的形体 线框图 顶点表、边表、面表 边界表示法 实体 CSG(constructive solid geometry), 指任意复杂形体都可用的体素组合 特征表示 Brep表示 八叉树(四叉树的推广) 分形 规则分形 # 严格自相似性的分形 Von Koch算法 Julia集和Mandelbrot集 消除隐藏线和隐藏面 线面比较法消除隐藏线 浮动水平线消除曲面隐藏线 深度排序算法(优先级算法) 画家算法(深度优先级表法) z一缓冲算法(深度缓冲算法) 扫描线算法消除隐藏面 区域分割算法消除隐藏面 BSP(binary space partitioning)树算法判别物体可见性 八叉树算法消除隐藏面 光线投射算法找到可见面 # 对包含曲面(特别球面的场景效率高) 真实感 漫反射及光源照明 照明效应 漫射照明 具体光源照明的照射效应、透射效应 漫反射、镜面反射 环境光 漫反射 镜面反射与Phong模型 光的衰减 多边形网的明暗处理 常数明暗法 亮度插值明暗法(Gouraund着色) 法向量插值明暗法(Phong着色) 阴影 纹理(texture) 整体光 透射光亮度模拟 Whitted光照模型(以Phong为基础) 光线跟踪 # 适用光滑表面 包围盒 空间分割成网格单元 辐射度方法 # 描述封闭环境中的能量交换 # 可模拟彩色渗透现象 色彩模型 颜色 色彩(Hue) 色饱和度(Saturation) 明度(Brightness) CIE(国际照明委员会)色度图(红绿蓝) 混合系统 面向硬件 RGB 红绿蓝加色系统 CMY 青、品红、黄着色系统 彩色印刷、胶卷等非发光显示体中采用 面向用户 HSV(Hue, saturation, value) # 六棱锥模型 # 可与RGB空间互相转化 HLS(Hue, lightness, saturation)双六棱锥模型  2d 分形 介绍 Fractal 具有自相似性质的多个形状 大的部分由小的部分组成，小的部分像大的部分 用递归算法模拟 Mandelbrot Set 介绍 分形领域最著名的科学家 本华.</description>
    </item>
    
    <item>
      <title>开发工具</title>
      <link>http://shenwenqing.com/series/dev/tool/</link>
      <pubDate>Wed, 10 Oct 2018 15:02:50 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/dev/tool/</guid>
      <description>source insight gerrit # 查看代码 hsandbox # repl paraview # 数据可视化 finreport # 数据可视化  </description>
    </item>
    
    <item>
      <title>硬件</title>
      <link>http://shenwenqing.com/series/dev/hardware/</link>
      <pubDate>Wed, 10 Oct 2018 14:59:59 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/dev/hardware/</guid>
      <description> 树莓派 arduino </description>
    </item>
    
    <item>
      <title>前端</title>
      <link>http://shenwenqing.com/series/dev/frontend/</link>
      <pubDate>Wed, 10 Oct 2018 14:51:24 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/dev/frontend/</guid>
      <description>套餐 web bootstrap extjs jquery ui dojo # 语法较难用 easy ui dwz # 国产较难用，卖文档 wijmo # 收费 vaadin # apache webkit foundation # 响应式，移动优先 boilerplate # h5模板 meteor # 融合前后端, 后端node knockout # mvvm, 利于单页应用  mobile jingle vux # vue手机组件 ionic # angular手机框架 framework7 # ios(兼容android)组件 mui zui # 类bootstrap 移动端 frozenui  组件 写法 介绍 框架的作用就是统一编程风格 react jquery angular prototype mootools # 浏览器原生对象扩展 underscore # 函数式 underscore-contrib # 扩展underscore ramda # 函数式，较正确 lodash # 函数式 functional javascript bilby # 函数式库，包含dispatch, 蹦床, monadic, validator等 allong.</description>
    </item>
    
    <item>
      <title>后端</title>
      <link>http://shenwenqing.com/series/dev/backend/</link>
      <pubDate>Wed, 10 Oct 2018 14:36:50 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/dev/backend/</guid>
      <description>领域 erp jbpm activiti # 工作流 YAML # 工作流 bossa # 工作流引擎 azkaban # 开源oa grav # 开源cms nopCommerce # .net开源电商  游戏 pomelo # 网易开源的实时性好的游戏类服务器  展示 cleaver # 基于node幻灯片 hexo # 生成博客 jekyll # 博客 hugo # 静态网站  gis ide skylive arcGIS mapInfo mapGIS superMap 库 webglobe arcpy  搜索 分类 垂直搜索引擎 针对某一个行业的专业搜索引擎，是搜索引擎的细分和延伸，是对网页库中的某类专门的信息进行一次整合，定向分字段抽取出需要的数据进行处理后再以某种形式返回给用户。 通用搜索引擎 通过关键字的方式实现的，是语义上的搜索，返回的结果倾向于知识成果，比如文章，论文，新闻等 通用搜索引擎的信息量大、查询不准确、深度不够 通用搜索引擎的海量信息无序化 部分 １.索引 ２.分词 ３.搜索 lucene solr compass # 基于lucene nutch # 基于lucene sunspot # 基于Rsolr，以dsl结构用ruby调solr elasticsearch sphinx # 基于sql的全文检索引擎  数据 爬虫 cheerio # node解析html，如jquery scrapy-redis # python 分布式爬虫框架 phantomjs # js浏览器模拟框架 分析 pandas # python数据分析 计算 hadoop 日志 scribe facebook出品 特点 支持nfs存储 结构 scribe agent 向scribe发送数据 scribe 接收数据，不同topic 的数据发送给不同的store中 存储系统(store) file, buffer, network, bucket, null, thriftfile, multi chukwa # apache出品，hadoop系列产品 flume cloudera出品 特点 可靠性(节点故障时，日志传送到其他节点) 三种级别 end-to-end 发送前写磁盘，成功时删除 store on failure 失败返回时写磁盘 best effort 不确认数据是否成功 可扩展性 agent collector storage三层架构，每层可扩展。 agent: 将数据源数据发送给collector collector: 将多个agent数据汇总后, 加载到storage中 storge: 存储系统, 可以是file, hdfs, hive, hbase等 agent collector 由master统一 logstash # 分布式日志收集，需结合kafka  ai tensorflow # 神经网络计算 convnet.</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>http://shenwenqing.com/series/dev/test/</link>
      <pubDate>Wed, 10 Oct 2018 14:15:04 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/dev/test/</guid>
      <description>分类 功能测试 黑盒 灰盒 白盒 性能测试 压力测试 负载测试 基准测试 # 统计多少时间内执行了多少次某个方法 回归测试 # 改旧代码后，保证旧代码可用 冒烟测试 # 功能验证，不一定是改旧代码  cpu性能测试 graph-frames subsecond offset  接口测试 工具 loadrunner phoenix # web自动化测试 wireshark siege siege -c 200 -r 100 http://www.google.com # 200并发，发送100次请求 tcpcopy # 基于tcp packets的请求复制工具, 在线流量导入到测试系统中 ab 内网测试, apache自带的压力测试工具, 安装apache后在bin目录中找到 ab -n1000 -c100 http://www.google.com/a.html # 100并发, 发送1000次请求 locust # 外网性能测试　http_load # 压测 http_load -rate 5 -seconds 10 http://www.baidu.com # -p 并发 # -f 总计访问数 # -r 每秒访问频率 # -s 总计访问时间 yslow # firefox插件，网页性能测试工具 jmeter # apache性能测试 gatling # dsl脚本, 生成报表 wrk # 压测 wrk -R5000 -d10s &amp;quot;http://internal-rope-api-1875734411.</description>
    </item>
    
    <item>
      <title>编程术语</title>
      <link>http://shenwenqing.com/series/dev/term/</link>
      <pubDate>Tue, 09 Oct 2018 17:00:21 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/dev/term/</guid>
      <description>dom 文档对象模型 dao 数据访问对象 ucs unicode character set utf ucs Transformation Format bmp Basic Multilingual plane bom Byte Order Mark asp Active Server Pages iis Internet Information services validate code 验证码 tld tag library description jsp java server page xsd XML Schemas Definition suffix 后缀 ide Integrated Development Environment RIA Rich internet Applications 富互联网应用（富客户端）C/S架构是胖客户端，B/S架构是瘦客户端。比如 flash就是ria(其它如js, SilverLight，unity3d，flash3d,adobe air,HTML5/css3，adobe Flex等) JPA Java Persistence API java持久层api JDBC Java DataBase Connectivity DHTML DynamicHTML cvs Concurrent Version System svn subversion uml UnifiedModelingLanguage AJAX Asynchronous JavaScript and XML bnf 命令书写格式规范: 巴科斯范式 desc description capacity 容量 component 组件 association 联合 aggregation 聚合 composition 组合 alpha 开端 inherit 继承 dhtml dynamic html 是 html css 客户端script 不是规范，是现有技术、标准的整合运用 css Cascading Style Sheet 级联样式表 associated 交互的 perspective 视图 adapter 适配器 jit just in time (compilation) webdav Web-based Distributed Authoring and Versioning Web 分布式创作和版本管理 (WebDAV) 扩展了 HTTP/1.</description>
    </item>
    
    <item>
      <title>Prolog</title>
      <link>http://shenwenqing.com/series/pl/prolog/</link>
      <pubDate>Tue, 09 Oct 2018 16:58:38 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/prolog/</guid>
      <description> 介绍 programming in logic缩写， 是一种逻辑编程语言。广泛应用于人工智能 不是真正意义上的程序，运行步骤由计算机决定。没有if, when, case, for这样的控制流程语句 很难分清哪些是程序，哪些是数据，程序就是数据，是一个智能数据库 有强大的递归功能。  </description>
    </item>
    
    <item>
      <title>Haskell</title>
      <link>http://shenwenqing.com/series/pl/haskell/</link>
      <pubDate>Tue, 09 Oct 2018 16:54:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/haskell/</guid>
      <description>介绍 源于ML 标准化的、纯函数式编程语言 非限定性语义和强静态类型 作为其他语言设计新功能时的样板，如Python的lambda标记语句  工具 检索函数用http://www.Haskell.org/hoogle  单词 polymorphism # 多态 monomorphic # 单态  风格 point free style sum&#39; xs = foldl (+) 0 xs sum&#39; = foldl (+) 0  注意 使用缩进代替括号，但也可用括号  文件扩展名 # 文件中不用let定义变量, # 变量赋值两次会报错, 这意味着代码顺序不重要 hs  内置变量 pi  模块 :m Data.Char Data.Map # 加载模块 chr # chr :: Int -&amp;gt; Char ord # ord :: Char -&amp;gt; Int toUpper toLower import Data.</description>
    </item>
    
    <item>
      <title>Lisp</title>
      <link>http://shenwenqing.com/series/pl/lisp/</link>
      <pubDate>Tue, 09 Oct 2018 16:53:40 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/lisp/</guid>
      <description> 介绍 为人工智能开发的函数语言 目前最主要两大方言为scheme和commonLisp。Emacs扩展语言为Lisp，有一种Emacs Lisp语言 拥有理论上最高的运算能力  编译器 sbcl # steel bank common lisp  </description>
    </item>
    
    <item>
      <title>Rust</title>
      <link>http://shenwenqing.com/series/pl/rust/</link>
      <pubDate>Tue, 09 Oct 2018 16:53:03 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/rust/</guid>
      <description>介绍 mozilla开发的,注重安全, 性能, 并发的系统编程语言 js之父Brendan Eich设计</description>
    </item>
    
    <item>
      <title>Scala</title>
      <link>http://shenwenqing.com/series/pl/scala/</link>
      <pubDate>Tue, 09 Oct 2018 16:52:22 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/scala/</guid>
      <description> 介绍 haskell衍生语言 集成了面向对象和函数语言的特性 可以很简单地与已有的java代码交互，只需要反java相关类导入就可以了 面向对象语言同时结合命令式和函数式编程风格  工具 sbt simple build tool  </description>
    </item>
    
    <item>
      <title>Perl</title>
      <link>http://shenwenqing.com/series/pl/perl/</link>
      <pubDate>Tue, 09 Oct 2018 16:51:58 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/perl/</guid>
      <description> 标准 pcre: Perl Compatible Regular Expressions  </description>
    </item>
    
    <item>
      <title>Xml</title>
      <link>http://shenwenqing.com/series/pl/markup_language/xml/</link>
      <pubDate>Tue, 09 Oct 2018 16:51:29 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/xml/</guid>
      <description>标签头  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;  命名空间  &amp;lt;xsl:stylesheet version=&amp;quot;1.0&amp;quot; xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&amp;gt; # xmlns:beans=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; # 引用其它uri空间 ## jar 包中的dtd/xsd文件直接用相对路径引用即可（相当于src/目录下的文件） &amp;lt;h:table xmlns:h=&amp;quot;http://www.w3.org/TR/html4/&amp;quot;&amp;gt; &amp;lt;h:tr&amp;gt; &amp;lt;h:td&amp;gt;Apples&amp;lt;/h:td&amp;gt; &amp;lt;h:td&amp;gt;Bananas&amp;lt;/h:td&amp;gt; &amp;lt;/h:tr&amp;gt; &amp;lt;/h:table&amp;gt; # 命名空间约束文件的查找 1.联网 2.myeclipse中的xml 3.同目录下 4.jar包中 # xmlns:只能有一个没有别名 注意 命名空间不可以分层使用，如 &amp;lt;r:g:element&amp;gt; 是不允许的 例子 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;GB2312&amp;quot; ?&amp;gt; &amp;lt;c:customer xmlns:c=&amp;quot;http://www.customer.com/&amp;quot;&amp;gt; &amp;lt;c:name&amp;gt;ZhangSan&amp;lt;/c:name&amp;gt; &amp;lt;c:phone&amp;gt;09098768&amp;lt;/c:phone&amp;gt; &amp;lt;c:host xmlns:e=&amp;quot;http://www.employee.com/&amp;quot;&amp;gt; &amp;lt;e:name&amp;gt;LiSi&amp;lt;/e:name&amp;gt; &amp;lt;e:phone&amp;gt;89675412&amp;lt;/e:phone&amp;gt; &amp;lt;/c:host&amp;gt; &amp;lt;/c:customer&amp;gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;GB2312&amp;quot;?&amp;gt; &amp;lt;book xmlns=&amp;quot;http://www.library.com/&amp;quot;&amp;gt; &amp;lt;title&amp;gt;The C++ Standard Library&amp;lt;/title&amp;gt; &amp;lt;author&amp;gt;Nicolai M.Josutis&amp;lt;/author&amp;gt; &amp;lt;/book&amp;gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;GB2312&amp;quot;?&amp;gt; &amp;lt;customer xmlns=&amp;quot;http://www.customer.com/&amp;quot; xmlns:e=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>Erlang</title>
      <link>http://shenwenqing.com/series/pl/erlang/</link>
      <pubDate>Tue, 09 Oct 2018 16:50:59 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/erlang/</guid>
      <description> 特点 由爱立信所辖CS-Lab开发，目的是创造一种可以应对大规模并发活动的编程语言。易于编写分布式应用。 面向并发(concurrent-oriented) 在语言中定义了erlang进程的概念和行为，使它特别经量级(309字节)，创建和结束一个进程时间为1-3ms 该进程(绿进程)在rlang虚拟机内管理和高度，是用户态进程 进程堆栈占用233字节 erlang虚拟机支持几十万甚至更多进程 结构化，动态，函数式  </description>
    </item>
    
    <item>
      <title>R</title>
      <link>http://shenwenqing.com/series/pl/r/</link>
      <pubDate>Tue, 09 Oct 2018 16:50:34 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/r/</guid>
      <description> 介绍 本身是GNU的一个开源软件 用于统计分析、绘图 是S语言的一个分支(实现)  特点 数据存储和处理 数组运算(向量、矩阵运算强大)  </description>
    </item>
    
    <item>
      <title>Ruby</title>
      <link>http://shenwenqing.com/series/pl/ruby/</link>
      <pubDate>Tue, 09 Oct 2018 16:50:06 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/ruby/</guid>
      <description> 工具 gems gem update --system  </description>
    </item>
    
    <item>
      <title>C</title>
      <link>http://shenwenqing.com/series/pl/c/</link>
      <pubDate>Tue, 09 Oct 2018 16:49:26 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/c/</guid>
      <description> 库 libvirt  </description>
    </item>
    
    <item>
      <title>Cpp</title>
      <link>http://shenwenqing.com/series/pl/cpp/</link>
      <pubDate>Tue, 09 Oct 2018 16:48:39 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/cpp/</guid>
      <description> 问题 野指针、迷途指针 Double Free问题 智能指针 RAII资源获取就是初始化 二级指针  库 opencv iplimage # 图像处理  </description>
    </item>
    
    <item>
      <title>Html</title>
      <link>http://shenwenqing.com/series/pl/markup_language/html/</link>
      <pubDate>Tue, 09 Oct 2018 16:42:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/html/</guid>
      <description>事件 blur change click dblclick focus keydown keypress keyup load mousedown mousemove mouseout mouseover mouseup reset select submit unload Abort # 中断图片下载时激发 AfterPrint # 打印文档后激发 AfterUpdate # 传送完数据 BeforeCopy # 复制到剪贴板前 BeforeCut # 剪切到剪贴板前 BeforeEditFocus BeforePaste BeforePrint BeforeUnload BeforeUpdate Bounce CellChange CtextMenu Copy Cut DataAvailable DatasetChanged DatasetComplete Drag DragDrop DragEnd DragEnter DragLeave DragOver DragStart Drop Error ErrorUpdate FilterChange Finish Help LoseCapture Move Paste PropertyChange ReadyStateChange Resize RowEnter RowExit RowsDelete RowsInserted Scroll SelectStart Start Stop  标签 &amp;lt;var&amp;gt; # 标识常量 &amp;lt;samp&amp;gt; # 标识输出内容的样式 &amp;lt;pre&amp;gt; # 代码块 &amp;lt;code&amp;gt; # 一段代码  属性 全局属性 # 配置所有元素共有行为 accesskey # 快捷键 ## 需要按alt + 指定的键 class contenteditable # 内容是否可修改, 如p标签 contextmenu # 定义右键菜单，未实现 dir # 文字对齐方式 draggable dropzone hidden id lang spellcheck style tabindex # tab键切换元素的顺序 title  浏览器特性 视频播放 支持vaapi, chrome 加上--enable-vaapi参数可以开启硬件加速解码  方案 &amp;lt;=================================标签========================================&amp;gt; &amp;lt;input&amp;gt;表单 单选框 &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;name&amp;quot; checked value=&amp;quot;1&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt; 下拉框 &amp;lt;select id=&amp;quot;mySelect&amp;quot; size=10 multiple&amp;gt; # 长度等于10 ，多选 &amp;lt;option selected=&amp;quot;selected&amp;quot;&amp;gt;Apple&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;Orange&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; 勾选框 &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;&amp;quot; /&amp;gt; 按钮 &amp;lt;input type=&amp;quot;button&amp;quot;/&amp;gt; &amp;lt;button&amp;gt; # &amp;lt;button&amp;gt;&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;搜索&amp;lt;/button&amp;gt; button之间可以加图片 &amp;lt;table&amp;gt;表格 &amp;lt;caption&amp;gt; # 标题 &amp;lt;thead&amp;gt; &amp;lt;th&amp;gt; &amp;lt;td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;/th&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tfoot&amp;gt; 属性 &amp;lt;tr style=&amp;quot;display: none;&amp;quot;&amp;gt; # 设置属性为隐藏 &amp;lt;form&amp;gt;表单 enctype属性 application/x-www-form-urlencoded(默认) # 在发送编码所有字符（空格转换为 &amp;quot;+&amp;quot; 加号，特殊符号转换为 ASCII HEX 值） multipart/form-data # 不对字符进行编码，在上传文件时使用 text/plain # 空格转换为+，但是不对特殊字符进行编码 &amp;lt;hr&amp;gt;分割线 字体 &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; .</description>
    </item>
    
    <item>
      <title>Css</title>
      <link>http://shenwenqing.com/series/pl/css/</link>
      <pubDate>Tue, 09 Oct 2018 16:27:24 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/css/</guid>
      <description>介绍 cascading style sheet  层叠 # 浏览器对每个元素定义了默认的样式表 不同级 1. style属性 2. style标签 3. link标签 4. 浏览器中用户自定义样式表 5. 浏览器默认样式 !important color: black !important 同级 # 评估得出最特殊的样式 ## a-b-c值依次排序，a如id个数, b如其他属性个数, c如元素名个数 # 评分相同时，使用最后的 id值的数目 其它属性和伪类的数目 元素名和伪元素的数目  继承 部分元素继承父元素样式 元素外观继承 布局不继承 inherit # 指明使用父元素样式 border: inherit  css样式一共三种用法: 内联式 &amp;lt;div style=&amp;quot;color:#000;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 嵌入式 &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt; div {color:#000;} &amp;lt;/style&amp;gt; 引用式 &amp;lt;link href=&amp;quot;css.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;  @ @charset &amp;ldquo;UTF-8&amp;rdquo; # 默认UTF-8, 在import前 @import &amp;ldquo;styles.</description>
    </item>
    
    <item>
      <title>Php</title>
      <link>http://shenwenqing.com/series/pl/php/</link>
      <pubDate>Tue, 09 Oct 2018 16:24:33 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/php/</guid>
      <description>安装  php, php-cgi 编译安装 yum install libxml2-devel openssl-devel bzip2-devel libmcrypt-devel -y ./configure --prefix=/opt/zly/php --with-mysql=mysqlnd --with-openssl --with-mysqli=mysqlnd --enable-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --enable-sockets --enable-fpm --with-mcrypt --with-config-file-path=/etc --with-config-file-scan-dir=/etc/php.d --with-bz2 make make install cp php.ini-production /etc/php.ini cp sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm chmod +x /etc/rc.d/init.d/php-fpm cp /opt/zly/php/etc/php-fpm.conf.default /opt/zly/php/etc/php-fpm.conf chkconfig --add php-fpm chkconfig php-fpm on /etc/init.d/php-fpm start  命令  php -S localhost:8000 -t dir/  配置  /etc/php/php.ini date.timezone = Europe/Berlin # 时区设置 display_errors = On  框架 zend opcache # php5.</description>
    </item>
    
    <item>
      <title>Elixir</title>
      <link>http://shenwenqing.com/series/pl/elixir/</link>
      <pubDate>Tue, 09 Oct 2018 16:24:04 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/elixir/</guid>
      <description>介绍  跑在erlang虚拟机上 与erlang相同，actor称作进程, 是比线程更轻量的概念  使用 o-&amp;gt; 元组 {:foo, &amp;quot;this&amp;quot;, 42} # 三元组 o-&amp;gt; actor defmodule Talker do def loop do receive do {:greet, name, age} -&amp;gt; IO.puts(&amp;quot;Hello #{name}&amp;quot;) {:shutdown} -&amp;gt; exit(:normal) end loop end end pid = spawn(&amp;amp;Talker.loop/0) send(pid, {:greet, &amp;quot;Huey&amp;quot;, 16}) sleep(1000) Process.flag(:trap_exit, true) pid = spawn_link(&amp;amp;Takler.loop/0) send(pid, {:shutdown}) receive do {:EXIT, ^pid, reason} -&amp;gt; IO.puts(&amp;quot;Talker has exited (#{reason})&amp;quot;) end o-&amp;gt; 有状态的actor # 递归 defmodule Counter do def start(count) do spawn(__MODULE__, :loop, [count]) # 伪变量__MODULE__, 是当前模块的名字 end def next(counter) do send(counter, {:next}) end def loop(count) do receive do {:next} -&amp;gt; IO.</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://shenwenqing.com/series/pl/go/</link>
      <pubDate>Tue, 09 Oct 2018 16:10:44 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/go/</guid>
      <description>特点  原生支持并发，编译执行的类脚本语言 不支持动态库，不支持重载，不支持泛型，有怪异的正则  命令 godoc -http=:6060 # 运行本地帮助网站 go build # 编译代码包 install # 编译安装 get # 下载依赖 # 默认目录是GOPATH下的pkg -u # update -v clean # 清理build产生的文件 -c # 清理.test文件 -i # 清理生成的可执行文件 -r # 包括依赖包的结果文件 run # 编译并运行 list # 列出指定代码包的信息 fix # 升级旧代码成新版本代码 vet # 检查静态错误 test # go test -cover -args -config config_it.toml -test.run &amp;quot;TestA&amp;quot; # 执行当前目录下所有_test.go结尾的文件 -file # 可省略，测试单个文件, 如go test test_a.go a.go a.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>http://shenwenqing.com/series/pl/python/</link>
      <pubDate>Tue, 09 Oct 2018 16:05:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/python/</guid>
      <description>介绍  虚拟机语言 虽然是脚本语言，可以预编译成pyc文件来执行  shell  #! /usr/bin/python # -*- coding: utf8 -*-  语法 规范 pep8  内置函数 o-&amp;gt; input(&amp;quot;&amp;quot;) # x = int(input(&amp;quot;Please enter an integer:&amp;quot;)) print(&amp;quot;%s&amp;quot;, % s1) ## %.3s % (&amp;quot;abcdef&amp;quot;)取3字符 ## %.* s % (2, &amp;quot;abcd&amp;quot;)取2字符) # %r repr()显示字符串 # %c 单个字符 # %b 二进制整数 # %x 十六进制整数 # %d 十进制整数 # %i 十进制整数 # %o 八进制整数 # %e %E 指数(基底分别为e E) # %-10.</description>
    </item>
    
    <item>
      <title>Scheme</title>
      <link>http://shenwenqing.com/series/pl/scheme/</link>
      <pubDate>Tue, 09 Oct 2018 16:03:20 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/scheme/</guid>
      <description>特点  词法定界(Lexical Scoping) 动态类型(Dynamic Typing) 良好的可扩展性 尾递归(Tail Recursive) 函数作为值返回 计算连续 传值调用(passing-by-value) 算术运算相对独立  标准  R5RS (Revised5 Report on the Algorithmic Language Scheme) Guile (GNU&#39;s extension language)  guile脚本中(.scm)  #! /usr/local/bin/guile -s !#  语法 注释 ; # 注释到行尾 #! ... !# # 标准中没有，实现中有的多行注释 类型 1 &#39;symbol &amp;quot;str&amp;quot; true, false struct empty # 表示一个空表 块(form) (define x 123) (set! x &amp;quot;abc&amp;quot;) (+ 1 2) (* (+ 2 (* 3 4)) (+ 5 6 7)) (display &amp;quot;hello world&amp;quot;) (not #f) # #t (not #t) # #f # not 后不是逻辑型，都返回#f 非精确数 (- #i1.</description>
    </item>
    
    <item>
      <title>Clojure</title>
      <link>http://shenwenqing.com/series/pl/clojure/</link>
      <pubDate>Tue, 09 Oct 2018 16:00:21 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/clojure/</guid>
      <description>介绍  是jvm上的一个lisp语言变种，比lisp更强调纯函数式编程 操作符知道自己的特征值(identity value), 如+是0, *是1 数组是懒惰的，需要时求值。适用于任意层的嵌套。头元素在使用后舍弃 集合(vector, map, set)都是持久的，使用共享结构，与ruby, java中非持久结构有相似的性能 # 持久的数据结构中，其它线程对数据的修改对该线程是不可见的 没有尾递归优化，不常用递归，要用loop.recur  语法  s-expressions (max 3 5) (+ 1 (* 2 3)) (def meaning-of-life 42) (if (&amp;lt; meaning-of-life 0) &amp;quot;negative&amp;quot; &amp;quot;non-negative&amp;quot;) (def droids [&amp;quot;Huey&amp;quot; &amp;quot;Dewey&amp;quot; &amp;quot;Louie&amp;quot;]) (count droids) (droids 0) (def me {:name &amp;quot;Paul&amp;quot; :age 45 :sex :male}) (:age me) (defn percentage [x p] (* x (/ p 100.0))) (percentage 200 10)  并发 o-&amp;gt; 原子变量 # 对一个值进行同步更新 (def my-atom (atom 42)) (deref my-atom) @my-atom (swap!</description>
    </item>
    
    <item>
      <title>JS</title>
      <link>http://shenwenqing.com/series/pl/js/</link>
      <pubDate>Tue, 09 Oct 2018 10:31:30 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/js/</guid>
      <description>commonJs规范下的javascript node.js mongoDB ringojs  特性 面向对象 动态语言(已超出脚本语言的范畴) 语法源自java first-class function的思想来自Scheme语言 prototype-based的思想来自Self语言  机制 弱类型，变量都是var 解释器有自己的内存管理机制(garbage collection) 自由数据类型转换 # 产生了==, ===的判断相等的不同定义  历史 Netscape(现Mozilla)创建JavaScript, 但JavaScript是Sun(现Oracle)的注册商标 作为标准提交给ECMA(欧洲计算机制造协会), 改名为ECMAScript # ECMAScript 3(ES3) 作为标准广泛使用 ## ECMAScript 5(ES5) 定义了新的语言标准 # JavaScript1.5是Mozilla的版本号, 相当于ES3,包含一些非标准语言扩展 ## JavaScript1.8 # JavaScript解释器或引擎(engine)也有版本号, Google的叫做V8(现在是4.0) 微软改动并取名Jscript  v8引擎 直接生成机器码 分代式GC java jvm工程师参数了优化  语法 api不包括输入输出功能 # 输入输出由宿主环境提供, 如web浏览器或node.js调用工具的控制台 html中js执行顺序 当页面载入时，会执行位于 body 部分的 JavaScript。 当被调用时，位于 head 部分的 JavaScript 才会被执行。 对象参数 arguments # 当前函数的所有参数数组 arguments.</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>http://shenwenqing.com/series/pl/java/</link>
      <pubDate>Tue, 09 Oct 2018 08:48:07 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/java/</guid>
      <description>打包  建立一个文件夹叫jnb 将编译好的标签处理类连同包一起拷贝到jnb中 在jnb目录下创建META-INF目录 在META-INF中存储tld文件，修改tld文件添加http:# www.xxx.com jar cvf jnb.jar *   bin目录命令 javac # 编译器 java # 解释器 appletviewer # 小程序浏览器，执行HTML文件上java小程序类 javadoc # 生成HTML格式的帮助文档 jdb # java调试器 javah # 反编译成c头文件 javap # 反编译成java文件 jar # 打包工具 htmlconverter # 不明 native2ascii # 转换为unicode编码 serialver # 返回指定类的序列化号serialverUID  java类型占字节数 byte 1个字节 short 2个字节 char 2个字节 int 4个字节 long 8个字节 float 4个字节 double 8个字节 boolean 1-4字节  命令 javac # 编译器 java # 解释器 appletviewer # 小程序浏览器，执行HTML文件上java小程序类 javadoc # 生成HTML格式的帮助文档 jdb # java调试器 javah # 反编译成c头文件 javap # 反编译成java文件 jar # 打包工具 htmlconverter # 不明 native2ascii # 转换为unicode编码 serialver # 返回指定类的序列化号serialverUID jar cvfm ul.</description>
    </item>
    
    <item>
      <title>JavaWeb</title>
      <link>http://shenwenqing.com/series/pl/javaweb/</link>
      <pubDate>Tue, 09 Oct 2018 08:48:07 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/javaweb/</guid>
      <description>分层 示意 层 |视图层 --&amp;gt; | 控制层（） --&amp;gt; |业务层 --&amp;gt; |dao数据访问层对象 --&amp;gt; |数据库 技术 |jsp(c:forEach) |servlet获取list域 |service过滤数据 |封装对象List | 对象 |bean销毁 | | |创建bean | 业务 |web服务器tomcat | | | |存储过程（银行） java web 13种技术 JDBC Java Database Connectivty JNDI Java Name and Directory Interface EJB Enterprise JavaBean RMI Remote Method Invoke Java IDL/CORBA JSP Java Server Pages Java Servlet XML Extensible Markup Language JMS Java Message Service JTS Java Transaction Service JTA Java Transaction Architecture JavaMail JAF JavaBeans Activation Framework  框架 spring site # 整合框架 tapestry # 基于servlet的mvc框架 titles # apache的标签库 jersey # restful服务 guice # google的ioc轻量框架 ehcache # 缓存 httpclient httpComponents ejb # 会话bean, 实体bean, 消息驱动bean proguard # 混淆 i18n  监听器 启动顺序 先启动监听器，再启动过滤器 ServletContextListener ServletContextAttributeListener HttpSessionListener HttpSessionAttributeListener HttpSessionActivationListener web.</description>
    </item>
    
    <item>
      <title>pl语言</title>
      <link>http://shenwenqing.com/series/pl/language/</link>
      <pubDate>Mon, 08 Oct 2018 22:49:33 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/language/</guid>
      <description>elixir .net lua objective-c swift erlang R groovy # 基于jvm，结合python, ruby, smalltalk的特性
dart # 谷歌发布的基于javascript的编程语言 hack # facebook开发的基于HHVM，可与PHP无缝对接 特点 结合了PHP开发高效性同时，有了静态语言的报错特性 支持lambda表达式和强制返回等流行特性 roy # 可编译到js elm # 可编译到js jujia # 动态语言，用于科学和数值计算
Fortran # 最早出现的高级语言，用于工程计算领域 ML # meta language, 非纯函数式编程,允许副作用和指令式编程 lisp haskell prolog OCaml # 在caml上加上oo, 源于ML simula # 专注于仿真的语言，由类创建的对象会在协调的多线程模式下，像erlang的进程一样并行处理</description>
    </item>
    
    <item>
      <title>编译</title>
      <link>http://shenwenqing.com/series/pl/parser/</link>
      <pubDate>Mon, 08 Oct 2018 22:47:30 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/parser/</guid>
      <description> 流程  词法分析，语法分析，语义分析，中间代码生成，中间代码优化，目标代码生成，表格管理，错误处理 语义分析 -&amp;gt; 类型检查/推导 -&amp;gt; 代码优化 -&amp;gt; 机器码生成 # 中间数据结构, 比如AST 预处理，连接程序，装入程序，调试程序  文法  G = (Vn, Vt, S, P) # 终极符号, 非终级符号, 一个特殊非终级符号，产生式 类型 短语(0), 对应图灵机(TM) 上下文相关(1), 对应线性有界自动机(LBA) 上下文无关(2), 对应下推自动机(PDA) 线性文法、正则文法、正规文法，对应有限自动机(FA) # 无法控制自返数  状态机(FA)  确定状态机(DFA) 非确定状态机(NFA) # 同状态可多种转移 DFA与NFA互相转换  词法分析  状态转换矩阵法  语法分析  自顶向下 # 最左推导建立语法树 # first集，follow集，predict集 不回溯方法 递归下降 LL(1) # 从左输入符号、产生左推导、每次读一个字符。LL(k)特例 自底向上 # 从左读, 从右向前归约 简单优先关系 # 运算符优先关系矩阵 LR(k) # 从左输入，最右推导 LR(0) # 只看栈顶状态，有分析动作冲突 SLR(1) # LR(0)加向前看展望符，不能分析所有文法 LR(1) # LR(0)的每个推导加一个向前搜索符，状态太多 LALR(1) # LR(1)中同向前搜索符的状态合并  语义分析  抽象语法树 符号表 # 动态规划记录变量的综合信息 局部化处理 # 压栈变量作用域  中间代码生成  后缀式(逆波兰式) 三地址 # 操作符两变量地址，结果地址 四元式操作符 # 地址加，赋值，过程调用，类型转换，算术、逻辑、关系运算的存储 语法制导 # 中间代码产生式后拼上语义程序，在语法分析中遇到动作马上处理 类型检查 下标变量 # 如数组下标，同上全用四元式表示  中间代码优化  常量表达式 a = 1, b = 2, c = a + b, 则只记c = 3 公共表达式 a = b * c, d = b * c, 则只记a 循环不变式外提 while k &amp;lt; 0 do b * c, 则b * c外提只计算一次 基本块 # 一块语句要么全执行，要么全不执行 消减运算强度 如加法代替乘法 复写传播 a = b, 后a, b不再变值，用a替代b 无用代码消除 数学优化（恒等变换） 如a + 0 = a, a * 1 = a, a ^ 2 = a * a, a / 1 = a, 0 / a = 0 窥孔优化 对目标代码中短指令序列局部改进，如删除重复，控制流优化，代数化简，使用特殊指令等 全局优化 对整个程序控制流和数据分析再优化，如常量表达式全局优化  运行时时空管理  内存划分 存储 引用的库的代码 目标代码 静态变量 栈区 # 函数调用，中断现场 堆区 存储策略 静态分配 #编译时分配固定存储单元 动态分配 栈 堆 活动记录 保存局部变量，中间结果，临时变量，过程调用，控制信息等 专用寄存器 调用链 # 保存下一个调用的起始地址 动态链 # 保存前一个调用的起始地址 访问环境 # 记录闭包起始地址 display表 # 过程需要的所有非局部数据所在的过程活动记录的起始地址 全局display表 静态链 # 指向外层过程的活动记录的地址地址  目标代码生成  生成的语言 机器语言 可重定位的机器语言 # 由连接器装配后生成机器语言 # 多数用这种，如c语言 汇编语言 指令选择 虚拟机 寄存器分配 四元式翻译  </description>
    </item>
    
    <item>
      <title>pl原理</title>
      <link>http://shenwenqing.com/series/pl/principle/</link>
      <pubDate>Mon, 08 Oct 2018 22:46:50 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/principle/</guid>
      <description> gc 分类 mark-and-sweep reference-counting arc # automatic reference counting  </description>
    </item>
    
    <item>
      <title>算法分类</title>
      <link>http://shenwenqing.com/series/algorithm/algorithm/</link>
      <pubDate>Mon, 08 Oct 2018 22:40:12 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/algorithm/</guid>
      <description>加密 签名 公钥 dsa ecdsa rsa  资源 token bucket # 令牌桶 通过多少流量，删除多少令牌 突发流量 丢弃 排队 特殊标记发送，网络过载时丢弃加标记的包 过程 产生令牌 消耗令牌 判断数据包是否通过 作用 限制平均传输速率，允许突发传输 leaky bucket # 漏桶 作用 强行限制数据传输速率 max-min fairness # 加权分配资源 dominant resource fairness (DRF) # 一种 max-min fairness实现，可以多资源分配  NP问题 介绍 polynomial problem(p问题), 可以在多项式时间内解决的问题 non-deterministic polynomial problem(np, 非确定性多项式问题)，指可以在多项式时间内得到一个解的问题 non-deterministic polynomial hard problem(np-hard, np-hard问题)很难找到多项式时间算法的问题 non-deterministic polynomial complete problem(npc，np完全问题)很难找到多项式时间算法的np问题, 包含np-hard  hash 介绍 将任意长度二进制值映射到较短固定长度二进制值。改一个值会生成不同的哈希 同一个哈希(散列)的二进制值是不存在的 常见的有: md5, sha, sha1, sha256, sha512, RSA-SHA  排序 插入排序 冒泡排序 选择排序  希尔排序 概念 shellsort diminishing increment sort(缩减增量排序) increment sequence(增量序列)  桶排序 介绍 bucket sort 将数据分到有限数量的桶子里，每个桶分别排序(可能再使用别的排序办法) 当数据均匀分配时，时间复杂度是O(n), 不受O(nlogn)下限的影响 适用于小范围、独立均匀分布的整数数据。可以计算数据量大，符合线性期望时间的排序 步骤 # 排序7, 36, 65, 56, 33, 60, 110, 42, 42, 94, 59, 22, 83, 84, 63, 77, 67, 101 1.</description>
    </item>
    
    <item>
      <title>算法分析</title>
      <link>http://shenwenqing.com/series/algorithm/analysis/</link>
      <pubDate>Mon, 08 Oct 2018 22:28:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/analysis/</guid>
      <description>时间复杂度 概念 time complexity O()表示上界(&amp;lt;=), Ω() [omega]表示下界(&amp;gt;=), Θ() [Theta] 表示上下界相同, o()表示非Θ()的O() N &amp;gt;= n0时, T(N) &amp;lt;= cf(N), 记为T(N) = O(f(N)) N &amp;gt;= n0时, T(N) &amp;gt;= cg(N), 记为T(N) = Ω(g(N)) T(N) = Θ(h(N)) 当且仅当T(N) = O(h(N)) 和 T(N) = Ω(h(N)) 上界(upper bound) 下界(lower bound) 法则 # 约定, 不存在特定的时间单位 # 约定, 机器模型中, 1. 所有指令顺序执行。2. 任一简单的工作都恰好花费一个时间单位 ## 假设不存在如矩阵求逆或排序这样的单位操作 1. 如果T1(N) = O(f(N)), T2(N) = O(g(N)), 那么 T1(N) + T2(N) = O(f(N) + g(N)), 或写成 max(O(f(N)), O(g(N))) T1(N) * T2(N) = O(f(N) * g(N)) 2.</description>
    </item>
    
    <item>
      <title>算法思想</title>
      <link>http://shenwenqing.com/series/algorithm/thought/</link>
      <pubDate>Mon, 08 Oct 2018 22:21:21 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/thought/</guid>
      <description>口诀 难题首选动归 受阻贪心暴力 考虑分治思想 配合排序哈希  递归 介绍 recursion 利用递归，把状态的管理责任推给运行时 递归转迭代 可加上memory做优化  分治 介绍 divide and conquer 广义分治法 例子 二分检索 找最大/最小元素 归并分类 快速分类 选择问题 斯特拉森矩阵乘法  贪心 介绍 greedy 案例 Dijkstra最短路径 最小生成树Prim, Kruskal 背包问题 作业排序 最优归并模式  动态规划 介绍 dynamic planning 方法 常用滚动数组降低空间复杂度 案例 多段图 结点间最短路径 最优二叉检索树 0/1背包问题 可靠性设计 货郎担问题(旅行商问题) 流水线调度问题  检索与周游 介绍 retrieval/travel 案例 深度优先检索 广度优先检索 与/或图 对策树  回溯 介绍 backtracking 案例 8皇后问题 图的着色 哈密顿环 背包问题  暴力 介绍 分支限界条件加快效率 例子 DFS, BFS   分支-限界</description>
    </item>
    
    <item>
      <title>Archlinux安装</title>
      <link>http://shenwenqing.com/series/ops/archlinux/</link>
      <pubDate>Mon, 08 Oct 2018 20:31:09 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/archlinux/</guid>
      <description>设置  ahci, secure boot, post behavious thorough  源  vim /etc/pacman.d/mirrorlist pacman -Syy  依赖  base-devel  分区  # mount -t efivarfs efivarfs /sys/firmware/efi/efivars # 判断efi cfdisk mkfs.vfat -F32 /dev/nvme0n1p1 # 或直接使用windows的uefi分区 mkfs.ext4 /dev/nvme0n1p2 mkswap /dev/nvme0n1p3 swapon /dev/nvme0n1p3 mount /dev/nvme0n1p2 /mnt mkdir -p /mnt/boot/EFI mount /dev/nvme0n1p1 /mnt/boot/EFI  配置  pacstrap -i /mnt base genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab arch-chroot /mnt /bin/bash pacman -S dialog wpa_supplicant vim vim /etc/locale.</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>http://shenwenqing.com/series/pl/markup_language/markdown/</link>
      <pubDate>Sun, 07 Oct 2018 17:10:37 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/markdown/</guid>
      <description> 标题 # 到 ######开头 # 分别表示一号 到 六号 标题  字体 **a**或__a__ # 加粗 *a*或_a_ # 斜体 ***a***或___a___ # 加粗斜体 ~~a~~ # 删除线  引用 &amp;gt;a &amp;gt;&amp;gt;b # 不断增加&amp;gt;来多层引用  分割线 --- # 三个及以上 *** # 三个及以上，与---显示无分别  图片 ![alt内容](url &amp;quot;title内容&amp;quot;) # alt显示在图片下，title在鼠标悬停时显示  超链接 [文本](url) &amp;lt;a href=&amp;quot;url&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;文本&amp;lt;/a&amp;gt; # 可以用a标签指定target，在新页面显示  列表 -或+或*开头 # 无序列表- 数字加点开头 # 有序列表，行数自动 多空格（至少两个）加列表开头 # 嵌套列表  表格 标题1|标题2|标题3 # 默认居中对齐 -|-|- # -可以多个，:-控制标题和内容左对齐，:-:居中，-:右对齐 1|2|3 ＃ 默认左对齐  代码 `a + b;` # 单选代码 ``` function a(){ } ``` # 多行代码 # tab开头  流程图 略  </description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://shenwenqing.com/series/algorithm/data_structure/</link>
      <pubDate>Sun, 07 Oct 2018 13:46:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/data_structure/</guid>
      <description>树 概念 tree free tree(自由树)，连通无回路的图 full tree(满树)，所有节点要么是树叶，要么是两个儿子 forest(森林)，无回路但不一定连通的图 root rooted tree(有根树)，确定根的树，常简称为树 node ancestor(祖先)，顶点本身也作为自己的祖先 proper ancestor(真祖先)，除了自己的祖先 parent(父母) child(子女) sibling(兄弟) leaf(叶节点), 没有子女的顶点 parental(父节点)，至少有一个子女的顶点 descendant(子孙)，以v为祖先的所有节点，包含v proper descendant(真子孙)，不包含本身 subtree(子树) depth(深度)，从根到v简单路径的长度 height depth 树中结点的最大级数 rank(秩) # 子女数 height(高度)，从根到叶节点最长简单路径的长度 # 按树的层的数量定义时，高度增加1 degree(度，一个节点子树的数目) level(root为1级, 结点为p级时，儿子在p+1级) state-space tree(状态空间树)，可用于分析回溯和分支界限 ordered tree(有序树)，有根树的每个顶点，所有子女有序 first child-next sibling representation(先子女后兄弟表示法) # 子女数不定，父节点只存第一个子女，该子女存兄弟链表 ## 以一种高效方式将有序树改造成关联二叉树 ## 关联二叉树中，左指针表示下层，右指针表示兄弟节点 binary tree(二叉树)，属于有序树 left child(左子女) right child(右子女) 左(右)子树 # 二叉树可以递归定义，所有可以用递归算法 binary search tree(二叉查找树)，父母顶点比左子树中所有数字大，右子树中小 效率，多取决于高度 logn &amp;lt;= h &amp;lt;= n - 1 # h 为高度, n为顶点数 multiway search tree(多路查找树) B树, B+树, B-树 边 树向边 回边 前向边 # 顶点到非子孙 交叉边 # 非前三都是交叉边 性质 |E| = |V| - 1 # 树的边数总比顶点数小1 # 图变树的必要不充分条件，连通图变树的必要充分条件 任意两个顶点间总存在简单路径，任选顶点可作根  二叉树 介绍 binary tree 常用顺序表或链表存储 概念 full binary tree(满二叉树) # 满子节点，且子节点在同一层上 heap(堆) # 根向下从大到小排序 binary search tree(二分检索树) # 左子节点小于父节点小于右子节点 left child(左子女) right child(右子女) 左(右)子树 # 二叉树可以递归定义，所有可以用递归算法 complete binary tree(完全二叉树) # 只有最大层节点不满且连续集中在左边 高是logN 可以用数组实现(从index = 1开始存储) 左儿子在2i, 右儿子在2i + 1, 父亲在i / 2 perfect binary tree(理想二叉树) # 满节点二叉树 full binary tree(满二叉树) # 同理想二叉树 skewed tree(斜树) # 一个节点不断左斜是左斜树，相反为右斜树 binary search tree(二叉查找树) # 父母顶点比左子树中所有数字大，右子树中小 AVL tree(Adelson-Velskii-Landis tree) # 带有平衡条件(balance condition)的二叉查找树 平衡条件: 左右子树最多差1 # 节点中存储高度信息 splay tree(伸展树) # 分析树的一种 效率，多取决于高度 logn &amp;lt;= h &amp;lt;= n - 1 # h 为高度, n为顶点数 树转换二叉树  堆 概念 binary heap(二叉堆、堆) # 一棵完全二叉树 结构性 heap-order property(堆序性) heap-order tree(堆序树) 已证明，平均一次插入需要2.</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>http://shenwenqing.com/post/blog/</link>
      <pubDate>Sun, 07 Oct 2018 12:46:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/post/blog/</guid>
      <description> 为什么写blog  为别人分享。 激励学习、完善、总结、反思。 写了才是自己的。听说读写，写是落实，写才能管理和进取。 同道交流。 展示自己。  写blog的原则  写大不写小，写实不虚构。 骨架清晰，言简意赅。 事事写为什么。 对内容负责。  分层还是标签 分层严格，适合wiki。 标签易管理和搜索，适合blog。 分层适合笔记，但管理很痛苦，所以用标签代替。严谨的笔记还是要分层。 为了统一，我把笔记逐步搬上blog，严谨的部分将用专题来分层写。  其它工具  myBase。擅长做内容分层管理，最终会被在线，开放，功能定制的blog赶超 有道云笔记。现在功能比较完善了，是个不错的选择。  </description>
    </item>
    
    <item>
      <title>算法常用数学</title>
      <link>http://shenwenqing.com/series/algorithm/math/</link>
      <pubDate>Sun, 07 Oct 2018 12:46:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/math/</guid>
      <description>指数 X^A * X^B = X^(A + B) X^A / X^B = X^(A - B) (X^A)^B = X^(A * B) X^N + X^N = 2X^N &amp;lt;&amp;gt; X^(2N) 2^N + 2^N = 2^(N + 1)  对数 约定 计算机科学中, log默认为log(2) X^A = B, log(X)(B) = A log(A)(B) = log(C)(B)/log(C)(A) logAB = logA + logB  级数 ∑(i=0)(N)2^i = 2^(N + 1) - 1 ∑(i=0)(N)A^i = (A^(N + 1) - 1) / (A - 1) 如果0 &amp;lt; A &amp;lt; 1, 则 &amp;lt;= 1 / (1 - A) ∑(i=1)(∞)i/2^i = 2 ∑(i=1)(N)i = N(N + 1) / 2 ≈ N^2 / 2 ∑(i=1)(N)i^2 = N(N + 1)(2N + 1) / 6 ≈ N^3 / 3 ∑(i=1)(N)i^k ≈ N^(k + 1) / |k + 1| k &amp;lt;&amp;gt; -1 k = -1时, Hn = ∑(i=1)(N)1 / i ≈ log(e)(N), Hn是调和级数 该近似式误差趋向于 λ ≈ 0.</description>
    </item>
    
    <item>
      <title>算法常用术语</title>
      <link>http://shenwenqing.com/series/algorithm/term/</link>
      <pubDate>Sun, 07 Oct 2018 11:47:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/term/</guid>
      <description>graph 图 TSP traveling salesman problem 旅行商问题 graph-coloring-problem 图填色问题 combinatorial problems 组合问题 geometric algorithm 几何问题 closest-pair problem 最近对时间 convex-hull problem 凸包问题 numerical problem 数值问题 lexicographic order 字典序 on-line algorithm 联机算法 ADT abstract data type 抽象数据类型 activation record 活动记录 # 递归栈所存的信息 stack frame 栈桢 # 同 activation record circular array 循环数组 amoritzed 摊还 biased deletion 偏删除 # 二叉树删除节点引起平衡不足问题的删除 symbol table 符号表 # 编译器用 tranposition table 变换表 # 游戏用 tick 滴答 # 模拟的一份时间 external sorting 外部排序 comparison-based sorting 基于比较的排序 transposition table # 置换表  </description>
    </item>
    
    <item>
      <title>Hugo简易</title>
      <link>http://shenwenqing.com/post/hugo/</link>
      <pubDate>Sun, 07 Oct 2018 09:24:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/post/hugo/</guid>
      <description>简介 hugo由go编写，开源，特点为编译快 本文基于hugo0.49  help hugo help hugo help server # server代表任何子命令  生成站点 hugo new site blog1 # 站点命令在blog1中执行  生成文章 hugo new about.md hugo new post/first.md  主题 git clone https://github.com/spf13/hyde.git themes/hyde # 更多主题在https://themes.gohugo.io  本地服务器 hugo server --theme=hyde --buildDrafts # 默认端口1313, 自带watch  发布 hugo --theme=hyde --baseUrl=&amp;quot;https://outrunJ.github.io&amp;quot;  文章内容  开头
--- 用YAML写内容 --- # +++标记可写TOML Description = &amp;quot;&amp;quot; Categories = [&amp;quot;a1&amp;quot;, &amp;quot;a2&amp;quot;] Tags = [&amp;quot;b1&amp;quot;,&amp;quot;b2&amp;quot;] draft = true # 文章隐藏 menu = &amp;quot;&amp;quot; title = &amp;quot;a&amp;quot; # 文章标题   配置 打开config.</description>
    </item>
    
  </channel>
</rss>