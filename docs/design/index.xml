<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计 on outrun的笔记</title>
    <link>https://example.com/docs/design/</link>
    <description>Recent content in 设计 on outrun的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://example.com/docs/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>方法</title>
      <link>https://example.com/docs/design/method/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      
      <guid>https://example.com/docs/design/method/</guid>
      <description> 时间管理 习惯 身体 早起, 状态 思路 第一原理 用最好的工具 行动 早起计划, 日记 简单的事重复做 一次只做一事 番茄: 工作, 休息, 全局 dump笔记 总结反思 习惯 事件记录，反思, 28法则排除 做事 处理完重要紧急, 做重要不紧急 收集(清空思想), 排程, 执行 日程表(最优先) 短期, 长期, 有截止, 无截止 无截止跟据当前情况, 分配时间和空间 必做, 可做  学习 计划 为什么 有全局, 有方向 平时活动与目标联系起来 轻重有序 磨炼意志(适应变化, 抗干扰) 养成习惯(抗干扰不费意志) 怎么样 全面(考虑娱乐和休息) 简单明确、具体、适当、突出重点 时间科学, 遵守作息时间 及时调整 预习 为什么 上课时：扫除知识障碍、针对性解决问题、笔记有针对性 提高自学能力 改变被动局面，成为良性循环 是什么 初步理解 关联旧知识 找不理解 做笔记和习题 怎么样 先粗读, 再反复细读 先读最困惑点 问为什么 请教别人 实践 笔记 重点、结构、摘要 分类 问题 查阅资料 理解思路 逐步提高 由点到面，由浅入深 学习 怎么样 集中注意 获取知识主动权 作者思路，比较思维方法 方法 分析综合法、归纳演绎法、比较分类法 规律 同一律、矛盾律、排中律 # 形式逻辑学 对立统一、量变到质变、否定之否定 # 辩证逻辑学 学科特点 理科: 逻辑性，抽象思维 文科: 知识有独立性，形象思维 教师特点 保持连续性，不中断钻牛角尖 笔记 思维方法、过程、结果 完整简洁 当堂掌握 领会、巩固、运用 重点是认知过程而非结论 复习 贵在及时 怎么样 尝试回忆 读原文 整理笔记 参考资料 系统复习 为什么 牢固、完整 系统、实用 怎么样 之前之后回忆 有重点阅读 熟记 整理笔记 练习 记忆能力 有记忆意识 理解后记忆 艾宾浩斯曲线 过度学习来记忆 分散记忆好于集中记忆 先整体理解, 后分段记忆, 最后综合复习 多感官 思维能力 积极思维状态 基本思维方法 分类、抽象概括 系统化, 使用时具体化 思维形式 整体思维 相似思维 逆向思维 创造思维  工程 历史 程序设计阶段1946-1955 节省空间 软件设计阶段1956-1970 硬件发展，软件危机 软件工程阶段1970-今 组件化 迭代 迭代周期 一个迭代周期中不新添加需求 一个迭代周期中包含多次迭代 一个阶段的结束称之为里程碑 初始化阶段增量 项目启动 建立业务模型 定义业务问题域 找出主要风险因素 定义项目需求的外延 创建业务问题域的相关说明文档 细代阶段增量 高层的分析与设计 建立项目的基础框架 监督主要的风险因素 制订达成项目目标的创建计划 构建阶段增量 代码及功能的实现 移交阶段增量 向用户发布产品 beta测试(alpha测试是内部测试， beta测试是用户测试) 执行性能调优，用户培训和接收测试 瀑布模型 #每一次执行工作流的深度不同 # 80/20原则 可行性分析 实现会不会复杂，尽量简单 需求分析 分类 生存点 痒点 兴奋点 # 不会按时交付（只完成主要，然后延期，用户测试） 客户沟通，同类产品比较，行业标准 功能 正确, 可行, 必要, 有序, 明确, 一致 性能 完善, 简短 分析 设计 先出成果再优化 任务分配(进度条) 命名标准 文档 可移植、可维护易扩展 排期 实现 测试 运维 螺旋模型（模块化） # 边分析边开发边交付（一环一环向目标实现） 敏捷开发 主要问题 人员流动 代码维护  战略 ai 优化、预测 拟合函数, 高阶微积分, 梯度下降 云 本质 批发转零售 帮助别人成功而成功 产品型转服务型 优势 轻，方便 全 可计算 现象 外包被淘汰 行业 OS of business 功能 产品功能，样板 开发体验，文档 组件收费，容量收费，节省的成本收费 数据直接做决策 分类 service # 基础服务 plugins # 基础服务组合 app # plugins组合 产品 开箱即用，做瑞士军刀不做零件 矛盾 强大，易用 小客户无付费能力，大客户要求多 行业分类 垂直，水平  问题 定义 为什么，是什么，怎么样，展望 zoom in, zoom out 提问 提原始问题，因为相对自己的看法，可能有更优解 描述问题，尝试与尝试结果 描述环境 解决 定位、权衡、落地、风控 解决数量级问题  职工 态度 把握分寸 靠谱(事事有交代) 负责(顾全局) 主动 超出预期 负责态度, 提高团队效率，而非自己效率 # 严肃判断 沟通 及早沟通、同步 文档 &amp;gt; 邮件 &amp;gt; im &amp;gt; 电话 # 即时性相反 留响应时间, 同组 -&amp;gt; 跨组 -&amp;gt; 跨部门 -&amp;gt; 跨公司 明确通知人时, 邮件, im特殊指定 文档 周报 文档简单有计划，为节省向别人解释的时间 建设性意见(提选择题) 只交“产品”: 背景清晰, 扼要, 完整, 引入独有经验  产品 设计 优秀的产品都有全局把控感(confluence, jira) 设计思想多源自: 操作系统、编译器、函数式 深入一线(面对客户) 思考全面, 全局 考虑需求本质，考虑上下游全局 想清楚再行动 解构复杂业务 问为什么 正交, 所有东西可串联  工程师 本质 解决问题 普遍问题 技能: 工具使用(写工具), 表面学习, 笨办法, 不会读文档, 只会知识迁移 设计: 不知经典设计, 不知设计哲学, 不知目的, 无法反应需求, 没有品位, 读不懂设计 知识更新: 学不动, 基础差(用二手资料), 无认知体系(认为都是新东西), 重复学习无用知识 沟通: 不专业(不用专业名词), 不主动, 不沟通对方, 不抓重点, 思路不连贯, 阅历不足(不会写文档), 不问为什么 能力 特点 知识、经验、技能、协作 # (1+天赋)x知识x工程习惯 犯错(多做多错) 方法 抽象 # 设计就是从升维中拆分和简化 沉淀 # 没有沉淀的学习不好回顾修改, 像没有测试的代码 品位 优点，缺点 # 找潜质, 并非此长彼短，是两个维度,有一定抑制作用 创造力，纪律 勤奋，聪明 稳定，峰值 深度，速度 细节，大局 思路 逻辑: 因果(演绎), 时间, 空间, 优先 方法: 5w2h(who, when, where, why, what, how, how much) 建模: 中心 # 调整抽象领域和层次(视问题决定) 自上而下 # 问题明确，展开 自下而上 # 内容分类、剪枝、归纳 分解 MECE(mutually exclusive collectively exhaustive) 正交 穷尽 开发 考虑工作的复用性 加入项目，需要可对所有代码修改 善用工具 自己的事主动跟进 owner 自我负责, 自我驱动, 持续改进 能部署, 能手工排查问题，手工修复数据, 开发调试工具, 数据修复工具 模块职责单一, 明白当前负责和极限性能 能降级, 知道下游调用和降级影响。了解上游依赖和上游降级影响 配好log、监控、告警, 告警及时响应  艺术家 人, 事, 团队 人 业内口碑 成分 技能，素质，精神 行动 感性，理性，惯性 发展 上限 下限 成本 低成本召回 事 知原理 是什么，为什么，怎么样，拆解 事与团队 事造就团队，好团队不一定出好成果 团队 存在合理性 有目标，成员能力认可，成员感性认可 小精英团队，才能解决问题 分配事 因特质分配，如稳定，峰值，沟通 成果评价 产出判断 分配利益和荣耀 时间和代码量评价不了程序员的工作, 可以匿名互评(口碑) 团队提升 培训无意义，自觉成长 成员 项目经理 设计 开发 测试人员 运维 系统工程师 设计、实现产品 数据分析师 技术总监 架构师 权衡, 出方案  招聘 双向选择 精确率&amp;amp;召回率 方面 沟通 喜欢技术，逻辑能力, 编码能力, 设计能力 基本概念, 边界考虑充足, 进阶答案, 衍生问题的解决 是否有自己思考，对自己负责  管理 提供 问题: 定义, 分解, 什么是问题, 前人如何处理 # 工程为解决问题 思考: 方向, 为了解决问题, 找到关键, 找到应学知识 # 创造性工作要思考 体系: 领域的体系, 领域体系形成原因, 为了高效思考和学习, 有体系的做事 参考: 参考书籍, 如何筛选, 如何搜索, 社区 不提供 知识点, 答案, 规定, 代码 分任务 出问题，写相关文档 砸需求，看弹性 任务列表: 难度, 优先级, 排期, 地平线目标, 现状, wishlist nice to have给新人  </description>
    </item>
    
    <item>
      <title>设计-代码</title>
      <link>https://example.com/docs/design/code/</link>
      <pubDate>Wed, 10 Oct 2018 17:40:53 +0800</pubDate>
      
      <guid>https://example.com/docs/design/code/</guid>
      <description>原则 观念 kiss(keep it simple stupid) YAGNI(You Ain’t Gonna Need It) 取好名字占设计一半 约定大于配置 并发的世界，并发的软件 分布式的世界，分布式的软件 不可预测的世界，容错性强的软件 复杂的世界，简单的软件 代码即数据 物体上绑定行为数据 传递代码数据(函数一等公民) 防御性编程 接口前validator 启动时自检断言 异常处理 不可过度 设计 solid原则 单一职则(single responsibility) 一个类负责一个功能 开闭(open/closed) 对扩展开放，对修改关闭，如接口, 如数组扩展结构体状态 里氏替换原则(liskov substitution) 子类继承超类的所有 接口分离(interface segregation) 最小功能隔离 依赖反转(dependency inversion) 低层依赖高层, 具体依赖抽象 非侵入 # non-intrusion 将功能推入代码，而非代码拿到功能 代码实现接口，而非继承类 拆分 边界 正交 unix rules 模块化(modularity) # 模块由精心设计的接口连接 清晰化(clarity) # 可读性、可维护性 组合(composition) 分离(separation) 简单(simplicity) 节俭(parsimony) # 越小越好 透明(transparency) # log, tracing 鲁棒(robustness) 可展示(representation) # 逻辑简单，数据复杂 最小惊吓(least surprise) # 少打破用户预期 安静(silence) 修复(repair) # 产生足够报错 经济(economy) # 减少开发时间 生成(generation) # 避免手写, 用高阶抽象生成代码 优化(optimization) # 优化和收益平衡 分化(diversity) # 一开始设计不限制、优雅开放灵活 扩展(extensibility) # 协议可扩展 优化 需要时再优化，设计时考虑扩展性 dry(don&#39;t repeat yourself), 不可过度 找瓶颈 产出 设计清晰 选型简单 代码精炼 抽象优雅  设计 创建 factory, abstract factory # 工厂 builder # 构建者 prototype # 原型复制来产生对象 singleton # 单例 结构 adapter # 适配器 bridge # 抽象与实现分离 composite # 抽取公共行为 decorator # 装饰 facade # 外观。提供子类的默认视图 flyweight # 享元 proxy # 代理 行为 interpreter # 解释器 template method # 模板方法、泛型 chain of responsibility # 责任链 command # 命令 iterator # 迭代器 mediator # 消息传递中介 memento # 保存、恢复状态 observer # 观察者 state # 不同状态定义不同行为 strategy # 同行为的不同算法、替换算法 visitor # 访问者。抽象行为本身，不同访问对象不同行为 元素模式 抽象各模式成元素，简化表示 actor # 消息通信 reactor # 事件轮循，注册回调，如libevent proactor # 注册事件回调，os通知触发回调 惰性求值 链式定义(配方)，后自动触发(js tick调度)终止操作 dsl测试(如jasmine.</description>
    </item>
    
    <item>
      <title>设计-工程</title>
      <link>https://example.com/docs/design/project/</link>
      <pubDate>Wed, 10 Oct 2018 17:39:31 +0800</pubDate>
      
      <guid>https://example.com/docs/design/project/</guid>
      <description>思想 设计 墨菲定律 事情不是表面看起来那么简单 事情都会比预计时间长 可能出错总会出错 如果你担心发生，它更可能发生 二八定律 系统划分与组织划分 康威定律 系统架构是公司组织架构的反映 按业务闭环进行系统拆分/组织架构划分，实现闭环/高内聚低耦合，减少沟通成本 沟通出现问题，考虑调整组织架构 在该拆分时拆分 角度决定设计 如对cache的设计 业务角度 选择简单易用的缓存框架 有人会用，学习成本别太高 关注数据模型结构设计 缓存更新真麻烦 paas角度 声明式使用，配置文件设置 缓存对比，选择强大且稳定的 存取接口设计，方便易用 数据变动监听，自动刷新缓存 平台角度 缓存服务器集群方式 存储空间监控 命中率监控 避免缓存集中失效引起雪崩 为了简单 开发和运维分离 业务和基础架构分离 无状态和有状态分离 业务间乘法(正交)而非加法 # 升维的特点, 正交叠加 多层抽象, 不断隐去底层(约定大于配置) # 升维的特点, 抽象观察 考虑因素 高并发、高可用、高可靠 容量规划(流量、容量) SLA(service level agreement)制定(吞吐量、响应时间、可用性、降级方案) 压测方案(线下、线上) 监控报警(机器负载、响应时间、可用率) tracing 应急预案(容灾、降级、限流、隔离、切流量、可回滚) 微服务 单体应用问题 复杂: 模块多, 边界模糊, 依赖关系不清晰, 代码质量不统一 技术债务: 不坏不修 部署频率低: 迭代要部署整个应用，部署时间长，风险高。修复问题慢, 易出错 可靠性差: 某bug导致整个应用崩溃 扩展性差 阻碍技术更新 特征 服务组件化 按业务组织团队 负责的态度, 不再是交付给维护者 粗粒度通信, http(二进制协议)或消息总线 去中心化治理 去中心化管理数据 基础设施自动化 容错设计 演进式设计 原则 单一职责 自洽 轻量级通信 服务粒度: 边界(DDD中的界限上下文) *aaS SaaS(software as a service) PaaS(platform as a service) aPaaS(application PaaS) # 简单配置产生任意需求的application saPaaS(specific aPaaS) # 领域定制的aPaaS GaPaaS(generator of aPaaS) # 脚手架，产生定制的aPaaS  架构模型 数据处理 lambda架构 # 实时大数据, stream使用 批处理层 实时处理层 服务层 sharing-nothing # cpu之间不共享内存和磁盘 DDD(domain driven design) 本质 维护概念完整性，避免腐化 entity 主存储(可变) 互相派生 # 如命令和事件派生状态, 事件派生状态等 状态(可变) 命令(command, 不可变) 事件(event, 不可变) entity representation # 数据表现 多representation一致性 representation表达业务的难易 entity物理介质/表现形式 # 表现形式一致性(同步), 多份存储, 数据派生合并转化 OLTP(mysql) # 点查询 OLAP(clickHouse) # 范围查询 queue(kafka) # 顺序读, 低延迟 业务服务 # 业务逻辑, 像虚拟的表 entity再派生 viewModel(不可变) 子集(不可变) 视图(不可变) BC(bounded context) # entity分组 分解复杂度: 系统、组织部门 内部一致性: 数据、概念 集成 边界entity # 授权、binlog、视图数据。本质是权限 东西、单据 event 可实现成worker托管 物理介质 queue 只读db rpc虚拟表 粒度 BC尽可能少而大 关系 时间错开 外键关系 # BC挂载到BC, 如后台系统与计费系统的定价, 运营人员与服务系统的配置, 流程节点系统对流程的依赖 rpc 数据库 数据复制 报表关系 时效性高 一般数据复制 # 所以边界entity是数据变更event 触发关系 # fire and forget 交棒关系 下游给上游command/event, 上游触发 上游实现降级 # 下游不可用时，安慰语 时间同时 accountable/responsible关系 # 像项目的负责人与开发人 最小化accountable 补偿 responsible提供自己界面 边界entity是rpc虚拟表, 插入command, 返回event 抢资源关系 锁服务 应用开发 处理entity表现  云原生应用 十二要素 一份代码，多份部署 显式声明依赖 外部保存配置 服务作为调用资源 分离构建、发布、运行 构建: 代码转化到可执行包 发布: 可执行包结合配置 运行: 选定发布版本，按计划启动 多个无状态进程运行 端口绑定服务 进程作为一等公民并发扩展 进程易处理: 快速启动、优雅终止 开发环境等价线上环境 日志作为事件流 管理进程不常驻, 一次性运行  高并发原则 无状态 # 应用无状态，配置有状态 尽可能浏览器端维护会话 分布式缓存放状态 拆分 # 加法组合，乘法功能 # 项目死于1到10，或10到100，因为解耦不够，无法重构 业务拆分 功能细分 读写 # 读缓存，写分库分表，聚合数据 AOP # 如CDN 模块 # 代码特征，如基础模块分库分表，数据库连接池 扩展 服务化发展 进程内服务 单机远程服务 集群手动注册服务(nginx负载多实例) 自动注册和发现服务(zookeeper) 服务分组/隔离/路由 服务治理(限流/黑白名单) AKF扩展立方 x轴 横向复制 # 复制服务或db, 瓶颈：内存缓存、特有数据 y轴 面向功能、服务、资源拆分 # 微服务 动词拆分 # 登录、搜索、推荐等 名词拆分 # 目录、库存、账户等 z轴 拆相近东西 # 数据分片(大小客户、地区、新旧等) 横向扩展 # 复制服务或数据分散负载，纵向扩展是升级设备 使用经济型系统 扩展数据中心 # 三实时站点备份: a(0.</description>
    </item>
    
  </channel>
</rss>