<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>运维 on Hugo Book</title>
    <link>https://example.com/docs/ops/</link>
    <description>Recent content in 运维 on Hugo Book</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://example.com/docs/ops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux</title>
      <link>https://example.com/docs/ops/linux/</link>
      <pubDate>Thu, 11 Oct 2018 18:47:57 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/linux/</guid>
      <description>历史 40年代：汇编语言 60年代：汇编语言unux 70年代初：c语言、c语言unux、unux开源（美国反垄断法制裁AT&amp;amp;T） 70年代末：AT&amp;amp;T分裂，unix闭源 80年代：minix 90年代：linux # 80、90年代之间：gun计划  文件位置 /var /log /boot.log # 启动日志 /proc /[pid] /status # 任务虚拟地址空间的大小 VmSize, 应用程序正在使用的物理内存的大小 VmRSS /etc /sudoers /group /passwd /resolv.conf # dns nameserver 223.5.5.5 nameserver 223.6.6.6 # alidns /sysconfig /network-scripts/ifcfg-eth0 # 永久修改ip DEVICE=eth0 # 设备别名 BOOTPROTO=static # 网卡获得ip地址的方式，默认dhcp HWADDR=00:00:00:00:00:00 # mac IPADDR=192.168.0.100 # ip NETMASK=255.255.255.0 # netmask ONBOOT=yes # 系统启动时是否激活此设备 /network # 修改网关 NETWORKING=yes # 系统是否使用网络 HOSTNAME=abc # 设置本机主机名, 要与/etc/hosts中设置的主机名相同 GATEWAY=192.</description>
    </item>
    
    <item>
      <title>PM2</title>
      <link>https://example.com/docs/ops/pm2/</link>
      <pubDate>Thu, 11 Oct 2018 18:31:16 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/pm2/</guid>
      <description> 介绍  带有负载均衡功能的node应用进程管理器 内建负载均衡(使用node cluster模块) 后台运行 热重载 停止不稳定进程，如无限循环  安装  npm install -g pm2  命令  pm2 start app.js pm2 stop pm2 restart pm2 status pm2 info 1 pm2 logs 1  </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://example.com/docs/ops/git/</link>
      <pubDate>Thu, 11 Oct 2018 18:26:40 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/git/</guid>
      <description>目录结构 .git branches config # 存放版本库git地址  规定 HEAD # HEAD的版本号, HEAD^^ 表示HEAD之前两个的版本, HEAD~n 表示之前n个版本 buffered stage branch head # buffered表示当前修改所在的版本，stage是buffered中文件add之后到的版本，branch是stage commit后到的分支(版本)，head是远程仓库的最新版本  命令 git [command] --help git help submodule  仓库 clone checkout # 切换到分支。检出原有文件替换 -b # 创建并切换到分支 branch # 创建并切换到分支 -r # 指定操作远程分支 -r origin/dev -a # 本地远程所有分支 dev ef71 # 从ef71创建分支dev dev -d dev # 删除 -D dev # 强制删除 remote remove origin show # 显示仓库 prune origin # 删除远程没有而本地缓存的远程分支 add origin git@bitbucket.</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://example.com/docs/ops/maven/</link>
      <pubDate>Thu, 11 Oct 2018 18:25:38 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/maven/</guid>
      <description> repository包依赖关系网站  mvnrepository.com  命令 pom.xml生成项目命令 mvn mvn compile # mvn compile exec:java eclipse插件 m2e 得到jar包 mvn dependency:copy-dependencies 生成eclipse工程 mvn eclipse:eclipse jetty-plugin下运行 mvn jetty:run 版本 mvn -version  方案 ojdbc14本地加载 ＃ oracle是收费的，所以不能直接下载到驱动 o-&amp;gt; mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=ojdbc14-10.2.0.4.0.jar o-&amp;gt; 把ojdbc14-10.2.0.4.0.jar复制到目录下: /home/outrun/.m2/repository/com/oracle/ojdbc14/10.2.0.4.0/ o-&amp;gt; /home/outrun/.m2/repository/com/oracle/ojdbc14/下会产生maven-metadata-local.xml文件存放maven引入依赖 o-&amp;gt; 项目中引入本地依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.oracle&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ojdbc14&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;10.2.0.4.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  </description>
    </item>
    
    <item>
      <title>Ant</title>
      <link>https://example.com/docs/ops/ant/</link>
      <pubDate>Thu, 11 Oct 2018 18:24:51 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/ant/</guid>
      <description> 功能 js压缩 自动发布  build.xml 示例 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project default=&amp;quot;execute&amp;quot;&amp;gt; &amp;lt;target name=&amp;quot;compile&amp;quot;&amp;gt; &amp;lt;javac destdir=&amp;quot;.&amp;quot; srcdir=&amp;quot;.&amp;quot;/&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;target name=&amp;quot;execute&amp;quot; depends=&amp;quot;compile&amp;quot;&amp;gt; &amp;lt;java classpath=&amp;quot;.&amp;quot; classname=&amp;quot;HelloWorld&amp;quot;/&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;/project&amp;gt;  </description>
    </item>
    
    <item>
      <title>Svn</title>
      <link>https://example.com/docs/ops/svn/</link>
      <pubDate>Thu, 11 Oct 2018 18:22:50 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/svn/</guid>
      <description>svn linux下移植的版本控制器 默认端口: 3690  目录结构 conf:配置文件 db:数据库 hooks:勾子（自定义功能） locks:文件锁  命令 服务器 svn --version svnadmin create c:\svn # 创建仓库 ## hooks勾子 locks锁 conf db svnserve -h svnserve -d -r c:\svn # 启动服务(-d是后台运行，windows不支持，需要创建服务) ## --listen-port 3691 指定监听端口 windows 下注册服务 sc create 服务名 binPath= &amp;quot;d:/suversion/bin/svnserve --service -r c:\svn&amp;quot; displayName= &amp;quot;显示名&amp;quot; # 注意双引号前面要有空格 sc delete 服务名 使用多个仓库 svnadmin create d:\svn2 创建仓库以后 svnserve -d -r d:\svn2 --listen-port 3691 配置用另一个服务端口启动该仓库 # svn默认启动端口是3690 svn://192.168.10.3:3691 来访问该仓库  客户端 添加项目 svn add test/ svn ci -m &amp;quot;first&amp;quot; # svn commit -m &amp;quot;fisrt&amp;quot; ## ci是checkin 检出 svn checkout svn://192.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://example.com/docs/ops/docker/</link>
      <pubDate>Thu, 11 Oct 2018 18:18:21 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/docker/</guid>
      <description>介绍  基于linux LXC，可以实现虚拟化  镜象网站  https://hub.docker.com/  命令 docker -h search mysql pull centos:7 centos:latest outrun11/test:nginx1 images centos # 本地镜象列表 ps -a # 容器列表 rmi centos:latest # 删除镜象 rm # 移除容器 docker rm docker ps -aq # 移除所有未运行的容器 rm -f 026 kill 026e restart 026e start 026 # 启动已建立的进程 cp 026e:/docker/file /local/file login build -t=&amp;quot;nginx/test&amp;quot; . # 用当前目录Dockerfile创建新镜像 tag nginx/test:test1 outrun11/test:nginx1 # 要求docker网站中创建了名为test的repository push outrun11/test:nginx1 logs beae3392 run # 从镜像建立进程 # id可以只输入前几位 # -t 伪tty, -i 交互的 # -rm=true执行完后删除 # -v /etc/:/opt/etc/ 挂载本机/etc到容器/opt/etc, /etc/:/opt/etc/:ro 只读挂载, /etc/ 对外共享/etc # -p 1234:80 端口映射本机1234端口到容器80 # --volumes-from etc_share 使用另一个容器对外共享的磁盘 # -d 后台运行 # --link redis_server:redis 连接容器的redis命令 # -w /var/node 当前工作目录 # -e NODE_ENV=&#39;&#39; 环境变量 -t -i centos /bin/bash # 启动容器, 执行bash b15 /bin/echo &#39;hello&#39; # 启动容器 --rm=true -i -t --name=ls-volume -v /etc/:/opt/etc/ centos ls /opt/etc # 创建共享 -i -t -p 1337:1337 --name=etc_share -v /etc/ centos mkdir /etc/my_share &amp;amp;&amp;amp; /bin/sh -c &amp;quot;while true; do echo hello; sleep 1; done&amp;quot; # 持续运行 --rm=true -i -t --volumes-from etc_share --name=ls_etc centos ls /etc # 使用共享  配置 /etc/sysconfig/docker # /etc/init.</description>
    </item>
    
    <item>
      <title>Kvm</title>
      <link>https://example.com/docs/ops/kvm/</link>
      <pubDate>Thu, 11 Oct 2018 18:17:40 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/kvm/</guid>
      <description> 介绍 kernel-based virtual machine, 使用linux自身的调度器进行管理,所以代码较少 # 又叫qemu-system或qemu-kvm 虚拟化需要硬件支持(如 intel VT技术或AMD V技术)，是基于硬件的完全虚拟化  原理 包含一个可加载的内核模块kvm.ko, 由于集成在linux内核中，比其他虚拟机软件高效  使用 检查系统是否支持硬件虚拟化 egrep &#39;(vmx|svm)&#39; --color=always /proc/cpuinfo  </description>
    </item>
    
    <item>
      <title>Vmware</title>
      <link>https://example.com/docs/ops/vmware/</link>
      <pubDate>Thu, 11 Oct 2018 18:17:12 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/vmware/</guid>
      <description> 安装  安装后会创建两个虚拟网卡  设置  edit -&amp;gt; preferences -&amp;gt; Hot Keys 设置退出快捷键  网络连接方式  1.vm9自带的virtual network editor中选择桥接到有线网卡 2.vm -&amp;gt; setting -&amp;gt; network adapter选项设置 bridged（桥接）:与主机平等，可以设置为同一个网段相互访问 nat:通过虚拟网卡连接主机，共享网络 host-only:单机模式  </description>
    </item>
    
    <item>
      <title>Virtualbox</title>
      <link>https://example.com/docs/ops/virtualbox/</link>
      <pubDate>Thu, 11 Oct 2018 18:15:35 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/virtualbox/</guid>
      <description> 方案 linux安装增强iso iso位置 /usr/share/virtualbox 编译环境 kernel-devel gcc 共享剪切板与拖拽文件 虚拟机启动后devices下设置 共享文件夹 linux下挂载 mount -t vboxsf 共享名 /mnt/share windows下挂载 我的电脑 右键 映射网络驱动器 clone clone 时选择更新mac,并在虚拟机中网络连接设置中重写mac与ip 配置主机间ssh免登录，远程ssh与所有主机免登录  </description>
    </item>
    
    <item>
      <title>Vsftp</title>
      <link>https://example.com/docs/ops/vsftp/</link>
      <pubDate>Thu, 11 Oct 2018 18:14:47 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/vsftp/</guid>
      <description>介绍  默认端口21 匿名用户登陆名为ftp或anonymous, 目录在/var/ftp, 只能下载不能上传 本地用户用户名和密码与本地用户相同，目录为该用户的登录目录  文件  /usr/sbin/vsftpd # VSFTPD的主程序 /etc/rc.d/init.d/vsftpd # initd启动脚本 /etc/vsftpd/vsftpd.conf # 主配置文件 /etc/pam.d/vsftpd # PAM认证文件 /etc/vsftpd.ftpusers # 禁止使用VSFTPD的用户列表文件 /etc/vsftpd.user_list # 禁止或允许使用VSFTPD的用户列表文件 /var/ftp # 匿名用户主目录 /var/ftp/pub # 匿名用户的下载目录  默认用户与组  用户 adduser -d /var/ftp -g ftp -s /sbin/nologin ftp 组 ftp  命令  systemctl start vsftpd  配置 /etc/vsftpd/vsftpd.conf文件中 anonymous_enable=YES local_enable=YES write_enable=YES chroot_local_user=YES allow_writeable_chroot=YES local_root=/ # local_root表示使用本地用户登录到ftp时的默认目录 anon_root=/ # anon_root表示匿名用户登录到ftp时的默认目录 chroot_list_file=/etc/vsftpd/chroot_list 编辑/etc/vsftpd/chroot_list 在这里面输入用户名字，一行写一个用户名。 重启vsftpd 打开tcp, udp端口21, 20 root 登录 /etc/vsftpd/vsftpd.</description>
    </item>
    
    <item>
      <title>Cron</title>
      <link>https://example.com/docs/ops/cron/</link>
      <pubDate>Thu, 11 Oct 2018 18:12:51 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/cron/</guid>
      <description>介绍  crond服务在systemd中被timer取代  使用 $ service crond start $ service crond stop $ service crond restart $ service crond reload # 重载配置 $ crontab crontest.cron # 添加定时任务。打印的文件在用户根目录下 $ crontab -l # 列出用户目前的crontab $ crontab -u # 设定某个用户的cron服务 $ crontab -r # 删除某个用户的cron服务 $ crontab -e # 编辑某个用户的cron服务 # crontab -u root -l 查看root的设置 /etc/crontab # 系统配置文件 /etc/cron.hourly /etc/cron.daily /etc/cron.weekly /etc/cron.monthly # 每小时、天、周、月执行的脚本 定时格式 M H D m d cmd M: 分钟（0-59）每分钟用*或者 */1表示 H: 小时（0-23） D: 天（1-31） m: 月（1-12） d: 一星期内的天（0~6，0为星期天） cmd: 如 ~/a.</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>https://example.com/docs/ops/ssh/</link>
      <pubDate>Thu, 11 Oct 2018 18:11:27 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/ssh/</guid>
      <description>ssh（secure shell）：特点  1.加密和压缩：http与ftp都是明文传输 2.ssh有很多子协议，实现不同功能：如sftp,scp 3.端口:22  配置  修改ip地址： 有虚拟机时：先设置虚拟机的连接方式是桥接 图形界面直接修改（或重启到root用户的图形界面修改） 命令修改 /etc/network/interfaces auto eth0 iface eth0 inet static address ip地址 netmask 子网掩码 gateway 网关 broadcast 广播地址 dns-nameservers DNS 重启网络服务：/etc/init.d/networking restart， /etc/ssh/sshd_config PasswordAuthentication no # 关闭密码登录 PermitRootLogin no # 关闭root登录  命令  ssh outrun@10.1.1.1 # -p 22 端口 # PubkeyAuthentication=no 不公钥登录  免登录 1&amp;gt; ssh-keygen -t rsa # 一直回车，生成~/.ssh/id_rsa 与 id_rsa.pub两个文件 2&amp;gt; ssh-copy-id -i 192.168.56.11 # 这样就可以免登录访问192.168.56.11了 ## ssh-copy-id -i localhost　免登录自己 或 把A机下的1中生成的id_rsa.</description>
    </item>
    
    <item>
      <title>运维</title>
      <link>https://example.com/docs/ops/ops/</link>
      <pubDate>Wed, 10 Oct 2018 17:33:07 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/ops/</guid>
      <description>目标 安全性 账号管理 漏洞修复 安全审计 可用性 服务监控 架构优化 冗余备份 预案演练 故障响应 运维成本 成本核算 服务选型 成本优化 运维效率 研发工作流支持 服务支持平台建设 运维自动化平台建设 操作系统 windows linux chrome os mac os fushsia # goolge os  套件 jira # IBM Rational提供的缺陷及变更管理工具。它对软件缺陷或功能特性等任务记录提供跟踪管理。提供了查询定制和多种图表报表。 teambition redmine # ror开发的项目管理web，支持git, svn, cvs等，把成员、任务、文档、讨论等资源整合在一起 gerrit # code review 工具 jenkins # java实现的持续集成工具 ansible # python实现的自动化部署工具 gradle # 自动化构建 jumpserver saltstack # 自动化运维工具 zabbix # 分布式监控 nagios # 监控 puppet # 自动化运维 selenium # 自动化运维 tty.</description>
    </item>
    
    <item>
      <title>Archlinux安装</title>
      <link>https://example.com/docs/ops/archlinux/</link>
      <pubDate>Mon, 08 Oct 2018 20:31:09 +0800</pubDate>
      
      <guid>https://example.com/docs/ops/archlinux/</guid>
      <description>设置  ahci, secure boot, post behavious thorough  源  vim /etc/pacman.d/mirrorlist pacman -Syy  依赖  base-devel  分区  # mount -t efivarfs efivarfs /sys/firmware/efi/efivars # 判断efi cfdisk mkfs.vfat -F32 /dev/nvme0n1p1 # 或直接使用windows的uefi分区 mkfs.ext4 /dev/nvme0n1p2 mkswap /dev/nvme0n1p3 swapon /dev/nvme0n1p3 mount /dev/nvme0n1p2 /mnt mkdir -p /mnt/boot/EFI mount /dev/nvme0n1p1 /mnt/boot/EFI  配置  pacstrap -i /mnt base genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab arch-chroot /mnt /bin/bash pacman -S dialog wpa_supplicant vim vim /etc/locale.</description>
    </item>
    
  </channel>
</rss>