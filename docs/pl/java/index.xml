<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on outrun的笔记</title>
    <link>https://example.com/docs/pl/java/</link>
    <description>Recent content in Java on outrun的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Oct 2018 08:48:07 +0800</lastBuildDate><atom:link href="https://example.com/docs/pl/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java并发</title>
      <link>https://example.com/docs/pl/java/juc/</link>
      <pubDate>Tue, 09 Oct 2018 08:48:07 +0800</pubDate>
      
      <guid>https://example.com/docs/pl/java/juc/</guid>
      <description>基础 #  并发编程三大特性 可见性(visibility) synchronized会刷新线程栈 有序性(ordering) 原子性(atomicity)  CPU #  PC寄存器(Program Counter Register, 存下一指令) 优化 乱序读 合并写 乱序执行(流水线) ALU 访问速度 Registers: &amp;lt; 1ns L1 cache(核内): 1ns WC(Writer Comblining) Buffer # 合并写, 一般4个字节 L2 cache(核内): 3ns L3 cache(CPU内): 15ns memory: 80ns 局部性原理 空间 按块读取(cache line) 一次读64Bytes # disruptor RingBuffer实现前后7个long，两个元素不同行，避免缓存一致性协议的通知 Java1.8注解@Contended # 保证不在同一行，需要JVM参数-XX:-RestrictContended 时间 批量读指令 内存屏障 # 不同CPU不一样 Intel sfence # save, 之前写操作必须完成 lfence # load, 之前读操作必须完成 mfence # mix(save + load) lock指令 # 指令执行完之前，锁内存 lock_add  CPU缓存一致性协议 #  # 是缓存锁。无法被缓存、跨越多个缓存的数据，依然总线锁 状态 MESI Cache一致性协议 # Intel CPU，实现方式为主动监听 Modified # 一行数据在CPU Modified, 其它CPU为Invalid Exclusive # 独享，其它CPU没有 Shared # 别人也在读 Invalid # 别人改过了 MSI MOSI 缓存行 # 多数64字节 伪共享 # 缓存行内无关数据也要同步  OS #  进程 # 资源分配 线程 # 调度执行 切换(Context Switch) CPU导出原线程指令和data到cache, 再导入新线程数据 线程数 N(threads) = N(CPU) * U(CPU) * (1 + W/C) # N(CPU): CPU数 # U(CPU): 期望CPU利用率, 0到1 # W/C: wait时间/compute时间, (1+W/C)即运行时间/计算时间。用profiler、arthas分析 压测决定 CPU性能压榨 单进程 批处理 多进程切换 多线程进程内切换 I/O复用 协程(纤程、绿色线程)用户空间切换  JVM #  内存屏障 #  LoadLoad StoreStore LoadStore StoreLoad  乱序执行(指令重排序) #  为什么 CPU快, 指令1阻塞时，指令2先执行 判断 代码不影响单线程最终一致性 例子，多线程  static int x = 0, y = 0; static int a = 0, b = 0; void main(){ for (long i = 0; i &amp;lt; Long.</description>
    </item>
    
    <item>
      <title>JVM</title>
      <link>https://example.com/docs/pl/java/jvm/</link>
      <pubDate>Tue, 09 Oct 2018 08:48:07 +0800</pubDate>
      
      <guid>https://example.com/docs/pl/java/jvm/</guid>
      <description>基础 #  定义 JVM规范说明书, JVMS(Java Virtual Machine Specifications) Java语言规范, JLS(Java Language Specification) 虚拟机 指令集 内存管理 过程 x.java -&amp;gt; javac -&amp;gt; x.class -&amp;gt; ClassLoader -&amp;gt; (字节码解释器、JIT) -&amp;gt; 执行引擎 JVM语言 Scala, Kotlin, Groovy, Clojure, jython, jruby等100多个 JVM实现 HotSpot # Oracle官方, 8之后收费, OpenJDK为开源版本 Jrockit # Oracle收购, 合并入HotSpot J9 # IBM Microsoft VM TaobaoVM # HotSpot深度定制 LiquidVM # 直接匹配专门硬件 azul zing # 收费，快, GC1mm, HotSpot参考写的G1 JRE, JDK JRE = jvm + core lib JDK = JRE + development kit  JVM构造 #  指标 #  吞吐量: 代码时间 / (代码时间 + GC时间) 响应时间: STW越短, 响应时间越好  指令(Instructions) #  分类 基于栈的指令类 # 简单, HotSpot 基于寄存器的指令集 # 复杂但快, HotSpot局部变量表 8大原子操作(JSR-133已放弃这个描述，但指令没变化) lock # 主内存，标识变量线程独占 unlock # 主内存，解锁独占 read # 主内存，读到工作内存 load # 工作内存，read后的值放入线程本地变量副本 use # 工作内存，传值给执行引擎 assign # 工作内存，执行引擎结果赋值给线程本地变量 store # 工作内存，存值到主内存给write备用 write # 主内存，写变量值 方法指令 # 在methods的Code中罗列 aload_0 # 变量表第0项入栈 invokespecial #1 # 调private(无多态)的方法 invokevirtual # 调有多态可能性的方法 invokestatic # 调静态方法 invokeinterface # 调interface方法 invokedynamic # 1.</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>https://example.com/docs/pl/java/spring/</link>
      <pubDate>Tue, 09 Oct 2018 08:48:07 +0800</pubDate>
      
      <guid>https://example.com/docs/pl/java/spring/</guid>
      <description>NamedContextFactory #  class Spec1 implements NamedContextFactory.Specification { @Override public String getName(){} @Override public Class&amp;lt;?&amp;gt;[] getConfiguration(){} } public class MyFactory extends NamedContextFactory&amp;lt;Specification1&amp;gt; { public MyFactory(Class&amp;lt;?&amp;gt; clazz) { super(clazz, &amp;quot;my&amp;quot;, &amp;quot;my.name&amp;quot;) } } @Configuration public class Config0 { @Bean Bean0 getBean(){ return new Bean0() } } parent = new AnnotationConfigApplicationContext() parent.register(Config0.class) parent.refresh() factory = new MyFactory(Config00.class) factory.setApplicationContext(parent) spec1 = new Spec1(&amp;quot;1&amp;quot;, new Class[]{Config1.class}) factory.setConfigurations(List.of(spec1)) factory.getInstance(&amp;quot;1&amp;quot;, Bean0.class) // 子域共享 factory.getInstance(&amp;quot;1&amp;quot;, Bean00.class) // 子域复制 factory.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/docs/pl/java/collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/pl/java/collection/</guid>
      <description>基础 #  物理容器 数组 链表 Java容器 Collection List ArrayList Vector # JDK1.0，所有方法加synchronized Stack LinkedList CopyOnWriteList # 写时复制整个list, 写加锁读无锁, 无fail-fast Set HashSet LinkedHashSet SortedSet TreeSet EnumSet CopyOnWriteArraySet ConcurrentSkipListSet Queue # 相比List添加线程友好API Deque # 双端队列 ArrayDeque BlockingDeque LinkedBlockingDeque BlockingQueue # LockSupport实现, channel, 生产者消费者 SynchronousQueue # 锁实现, 无缓冲区channel TransferQueue # CAS, 生产者带队列阻塞 LinkedTransferQueue ArrayBlockingQueue # 有缓冲区channel DelayQueue # 内部维护按时间排序队列 PriorityBlockingQueue LinkedBlockingQueue # 最大数量Integer.MAX_VALUE PriorityQueue # 堆排序实现 ConcurrentLinkedQueue # CAS Map HashMap LinkedHashMap # 双向链表，按插入或访问顺序遍历 Hashtable # JDK1.</description>
    </item>
    
  </channel>
</rss>
