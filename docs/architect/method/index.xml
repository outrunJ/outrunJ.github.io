<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>outrun的笔记</title>
    <link>https://example.com/docs/architect/method/</link>
    <description>Recent content on outrun的笔记</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/docs/architect/method/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>产品规划</title>
      <link>https://example.com/docs/architect/method/product_plan/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      
      <guid>https://example.com/docs/architect/method/product_plan/</guid>
      <description>云服务 # 本质 批发转零售 帮助别人成功而成功 产品型转服务型 优势 轻，方便 全 可计算 现象 外包被淘汰 行业 OS of business 功能 产品功能，样板 开发体验，文档 组件收费，容量收费，节省的成本收费 数据直接做决策 分类 service # 基础服务 plugins # 基础服务组合 app # plugins组合 产业互联网 # 供应链 # 为什么 大厂核心 各节点(库存)周转 是什么 资源 -&amp;gt; 渠道 -&amp;gt; 用户 反馈用户真实需求 上游关注制造业 下游关注erp 批量(精), 个性化(敏) 物流, 资金流(现金流), 信息流 库存管理 应对变化(保质期) 求零库存 供应商 评级 物流, 成本 难点 打通 怎么样 成本、利用率 可靠性, 反应力, 柔性(补错) 感知、预测 赋能 重点 按时制造 难点 协调(协议) 步骤 单品上下游延伸 人工智能 # 优化、预测 拟合函数, 高阶微积分, 梯度下降 元宇宙 # 传媒营销 # 媒体 # 场景控制 3CAD character camera control art direction 特效 会场散射光束（博物馆） 雾中焦点的竖光（saber的剑） 画线的光点（最终幻想） 密集的星星，远近缩放，光圈(tree.</description>
    </item>
    
    <item>
      <title>代码规划</title>
      <link>https://example.com/docs/architect/method/code_plan/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      
      <guid>https://example.com/docs/architect/method/code_plan/</guid>
      <description>阻塞 # 阻塞(bio)指cpu等待io 非阻塞(nio)指调用io后立即返回，但要轮询事件状态 # 非阻塞指对cpu不阻塞，但业务线程阻塞 轮询(单线程) read 定时重复调用来检查 select 前后read, 中间select轮询检查文件描述符的事件状态 采用1024长度数组存储状态，只能同时检查1024个文件描述符 poll 前后read, 中间poll 用链表代替数组, 也避免了不必要的检查 epoll # linux 前后read, 中间epoll epoll检查不到事件，休眠epoll线程直到事件将它唤醒 kqueue # freeBSD中，类似epoll aio # async io, linux, 业务线程不阻塞 通过回调(信号)传递数据，不必像epoll线程(业务线程)阻塞等待 仅linux下有, 只O_DIRECT方式读取，不能利用系统缓存 IOCP # windows aio 模拟aio(io线程池) 业务线程的io操作, 起io线程, io线程完成通信到业务线程触发回调 库 glibc(有bug) libeio node.js的libuv封装 linux下自实现 windows下IOCP 事件 # 实现 回调 队列存事件, 单进程检测事件是否回调 库 libevent libev # bug比libevent少 工具 epoll(select, poll) libev(libevent) 并发并行 # 并发 多任务共享时间段, 类比: 任务队列 为什么并发 多任务能力 非阻塞 并行 多任务同时处理, 类比: 多核处理器 为什么并行 提高执行效率 分类 任务并行化 数据并行化 cpu交替任务 # EDSAC串行任务 协作式 # 可能独占，Windows3.</description>
    </item>
    
    <item>
      <title>运维规划</title>
      <link>https://example.com/docs/architect/method/ops_plan/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      
      <guid>https://example.com/docs/architect/method/ops_plan/</guid>
      <description> 指标 # 标准 ITIL(IT Infrastructure Library) ITSM(IT System Management) 目标 安全性 账号管理 漏洞修复 安全审计 可用性 服务监控 架构优化 冗余备份 预案演练 故障响应 运维成本 成本核算 服务选型 成本优化 运维效率 研发工作流支持 服务支持平台建设 运维自动化平台建设 工作方式 邮件申请开通 LDAP, VPN, 测试, 线上 监控 # </description>
    </item>
    
    <item>
      <title>咨询规划</title>
      <link>https://example.com/docs/architect/method/advice_plan/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      
      <guid>https://example.com/docs/architect/method/advice_plan/</guid>
      <description> Presentation # 指导思想: 成于结构，臻于对话 PPT画页 画的是冰山一角 类似手持卡片 类似左右脑: 逻辑+展示 具体内容 思维导图 维度筛选，MECE不重不漏 空姐现象 共知的事情特色讲，去掉已知部分 卖钻讲孔 电梯法则 告知全局，步骤清晰，回顾小结 递进逻辑：信息，分析，方法 目录 首页效应 目录，章节页，总结页 视觉 图形代替文字: 缩小了看一看 标题附主题语: 有兴趣有信息量 讲 替画重点（提示语如: 请注意，提问） 细讲：页只写观点，串联起来讲，只有30%内容重合 心态 注意力放在观众那边 沟通合作而非防御 房间有更聪明的人 数字化转型 # 什么是数字化，有什么用 发展 信息化: 烟囱式，信息/数据孤岛，管理/运营孤岛 互联网化 互联互通: 0边际成本互联互通，云计算-&amp;gt;雾计算 大数据化 数据互联: 互联一切-&amp;gt;一切互联，跨界应用 数据资源: 核心要素/资产，第一权利 数智化 人工智能：大数据-&amp;gt;大知识, 人类设计-&amp;gt;自动学习，替代与超越 计算智能-&amp;gt;感知智能-&amp;gt;认知智能 三位一体：(互联网+大数据+人工智能)+ Any 数字孪生、元宇宙 互联网+ 信息传递边际成本趋向于0 连接机制革命 任意两个资源(人或物)0边际成本互联互通: 信息0边际成本 传播机制: 线性、金字塔式-&amp;gt;非线性、网状、几何级、病毒式 带来什么 数字科技三位一体：(互联网+大数据+人工智能)+ 边际革命：0边际成本效应，边际成本递减，边际收益递增 数智：可知、可达、可控、可预测，程度剧变、实现边际成本剧变 量变-&amp;gt;质变（工具革命-&amp;gt;革命的工具） 局部改善-&amp;gt;全面优化-&amp;gt;全面重构 技术应用-&amp;gt;业务优化-&amp;gt;全面变革 农业时代，工业时代，数字时代，造物时代 为什么数字化转型 企业处境 各行各业先后 总量短缺-&amp;gt;结构过剩，卖方市场-&amp;gt;买方市场，存量经济的争夺内卷加剧 成熟稳定期-&amp;gt;跃迁剧变期 各行各业被迫转型：不断重新分工、重新分利 产业链 重构/(替代+重构) 战略问题 不是未来做什么，是做什么有未来 提高打鱼技术但鱼没有了 不要战术勤奋战略懒惰, 战术成功战略失败 不是选择题是必答题 什么是企业/产业数字化 IBA+经济 电子商贸，流通 不是虚拟经济，是实体经济的全新形态 IBA+交易 渠道体系革命 线上渠道为主，主导线上线下一体化 终端(触点)为王 与用户空间时间距离不断缩短 一切皆终端，终端多样化-&amp;gt;场景碎片化(场景嵌入)-&amp;gt;新旧场景兴衰 泛在智能交互，泛在智能感应(不断向生产环节渗透) 交易边际成本大幅下降, 交易可能性边界急剧膨胀，资源配置能力与利用效率极大提高 产业链重构：M2B2C, M2C, P2P 野蛮营销-&amp;gt;精准营销-&amp;gt;智能匹配 产品变渠道，产品渠道一体化 智能产品-&amp;gt;触点+服务与生态体系 产品成为持续服务的载体 制造业服务业化 智能化，机器体系对人的脑力及体力的强助力、替代、超越 精细化、高度集成化 去人化、极致自动化 柔性化，按需生产、柔性制造能力 IBA+生产 业务跨界与跃迁：供应链资源，数据资源，新“物种”(产品) 低碳、低能耗、低消耗: 自然资源稀缺性下降 IBA+交易+生产 交易生产一体化 由需到供，按需生产，按需服务，按需研发，按需投资，0库存 非标-&amp;gt;标准化-&amp;gt;去标准化(个性化生产) 卖产品-&amp;gt;卖生产服务，制造业服务业化 延展到整个国民经济生态体系，有计划的市场经济 数据驱动，智能决策 平台化+极致专业化分工 企业(管理与产权)形态、雇佣形态的演变 管控型-&amp;gt;交易型/平台型 企业人员规模缩小，企业边界模糊 企业、资本与劳动者关系演变 数字化转型 数字经济质跃工业经济 数字经济系统 经济环境: 人类经济活动(分工协作)的基础条件(信息不对称性，资源稀缺性)发生剧变 经济活动: 交易和生产的边际成本大幅下降，经济活动的效率大幅上升，经济活动的可能性边界急剧膨胀 从根本上超越工业经济 数字化经济含义 交易、生产：0边际成本 边际革命：人类逐步进入0边际成本时代 边际成本递减-&amp;gt;0边际成本-&amp;gt;边际成本为负 结果变成原因，逼近转型升级 数字化转型升级 以数字科技为应用手段，持续推进业务变革、组织变革 经济的数字化转型升级: 以数字科技应用为手段，推进经济模式、经济形态持续转型升级 企业数字化转型升级：以数字科技应用为手段，推进企业营销模式、服务模式、管理模式、生产模式、决策模式、商业模式、产权模式等持续转型升级 鸿沟：科技&amp;lt;-&amp;gt;业务 可能性(无限)-&amp;gt;现实性(有限) 科技-&amp;gt;技术应用(产品/模式/制度创新变革)-&amp;gt;业务问题-&amp;gt;科技应用创新不足是制约转型升级、创新发展的关键瓶颈 问题导向，需求拉动 科技应用价值问题：经济效益是检验科技领先的唯一标准 科技应用方向问题：0到0的创新比0到1的创新更关键 科技应用的路径问题：并非都是&amp;quot;富家子&amp;quot;&amp;quot;优等生&amp;quot; 转型是什么 三个层次 新赛道(局部): 新技术、新产品、新兴产业链 新形态(普遍): 新业态、新模式、新型产业链 新经济(全面): 新生态、新格局 企业：全面转型或K型经济 可行方法 你是谁：业务现状 你想变成谁 动因与目标(短期、长期) 问题导向与需求分析 你能变成谁 基础条件与既有资源 信息化数字化的基础 你如何变成谁 (周而复始)设计-&amp;gt;建设-&amp;gt;运营(业务+系统)-&amp;gt;跟踪与评估 得客户资源者得天下 流量-&amp;gt;留量 客户资源：客户数据+客户关系+客户渠道 以更低边际成本掌控更大的客户资源 谁掌握完备的客户资源 如何掌握完备的客户资源 未来已临 划时代的技术都是试金石 与时代赛跑 企业管理 # 战略 目标：使命，愿景 分层 企业层面战略 业务单元层面战略（竞争战略） 职能层面战略 管理 战略分析阶段 战略选择阶段 战略评价阶段 战略实施阶段 战略控制阶段 优化咨询 # 问题 客户反馈 单体应用 模块耦合程度 微服务划分与边界 单节点数据库 查询崩溃 IoT控制 命令超时失败, 响应慢 出错业务处理 发现问题 现有代码逻辑梳理 通过链路追踪，找性能瓶颈 SQL平台建设，发现数据库性能问题，优化SQL 服务器节点监控，应用监控，数据库监控 解决问题 代码 纯代码优化：N+1调用，事务问题 逻辑优化：订单失败，复杂业务流程优化 发布流程优化CI/CD 中间件优化：优雅停机，灰度方案节点打标，全链路日志 性能优化：业务并行处理，业务异步处理 数据库 不合理调用治理：批量更新，大事务， 慢SQL治理 数据库备份：主从优化，定时备份 配置调优 架构 高可用：服务发现，分布式 业务缓存优化，减少数据库调用：热点数据，对象缓存，多级缓存 分布式任务平台：分片执行 任务中心：批量平台 稳定性 告警平台 异常告警(空指针，接口调用成功率) 监控告警(服务器使用率) 业务告警(下单失败) 限流熔断 网关限流，业务限流，接口限流，外部调用限流 业务平滑处理 运营工具 业务数据多维分析 </description>
    </item>
    
    <item>
      <title>服务治理</title>
      <link>https://example.com/docs/architect/method/architect/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      
      <guid>https://example.com/docs/architect/method/architect/</guid>
      <description>原则 # 高并发 高可用 高可靠 SLA(service level agreement)制定(吞吐量、响应时间、可用性、降级方案) 容量规划(流量、容量) 监控报警(机器负载、响应时间、可用率) tracing 应急预案(容灾、降级、限流、隔离、切流量、可回滚) 成本 经济学原理 比较优势 服务器类型 分工协作 组合 货币解耦 MQ 规模效益 集群 高可用 # 负载均衡 # 流量切换 # 某服务器挂了 DNS切换 httpDNS # app配置，绕过运营商localDNS lvs/haproxy # 切换故障的nginx nginx # 切换故障应用 限流 # 思路 恶意请求流量只访问cache 穿透到应用的流量用nginx limit 恶意ip nginx deny 降级 # 开关集中化管理, 推送开关配置 开关前置 # nginx层做开关 可降级读服务 # 只读本地缓存、只读分布式缓存、只读默认数据 业务降级 # 部分业务异步，处理高优先级，分配流量保障系统可用 隔离 # 线程隔离 进程隔离 集群隔离 机房隔离 读写隔离 动静隔离 爬虫隔离 热点隔离 资源隔离 回滚 # 事务 代码库 部署版本 数据版本 静态资源版本 超时与重试 # 压测与预案 # 线下、线上 高并发 # 缓存 # 客户端 浏览器缓存 # Pragma, Expires, Cache-control ajax app缓存 # 大促时更新静态资源, 地图 客户端网络 # 代理服务器缓存 广域网 代理服务器(如CDN) 推送 或 拉取(回源) 镜像服务器 P2P 源站 接入层缓存 # 如页面缓存，用redis url重写 一致性哈希 proxy_cache # 内存/SSD缓存内容 proxy_cache_lock # 一段时间的回源合并成一个 shared_dict # lua, 重启缓存不丢失 应用层缓存 # 如搜索，建议物品等 堆内缓存 堆外缓存 # local redis cache 分布式缓存(接入层后) redis集群 # 异步化写入, lua-resty-lock(非阻塞锁) 对象缓存 # db和应用间的查询结果集 静态化, 伪静态化 服务器操作系统缓存 连接池线程池 # 异步化 # 队列 # 作用 服务解耦 异步处理 流量削峰/缓冲 # 如促销期 问题 丢失/失败 # 持久化，日志，报警, 数据校对修正(worker扫库) 重复 # 业务上防重 例子 redis扣库存-&amp;gt;记录日志-&amp;gt;同步worker-&amp;gt;DB 消息总线可扩展 # x扩展不行，y扩展用专用总线(降低了灵活性), z扩展根据客户 减少拥挤 # 消息划分价值 扩容 # 无状态 # 应用无状态，配置有状态 尽可能浏览器端维护会话 分布式缓存放状态 拆分 # 加法组合，乘法功能 # 项目死于1到10，或10到100，因为解耦不够，无法重构 业务拆分 功能细分 读写 # 读缓存，写分库分表，聚合数据 AOP # 如CDN 模块 # 代码特征，如基础模块分库分表，数据库连接池 数据异构 例子 聚合数据表(一般KV存储) # 数据闭环(不依赖其它服务) 历史归档 并发化 选择工具 数据库 # rdb, nosql, hadoop 防火墙 # 墙需要的东西 日志 # 采集分析 用同品牌设备 慎用第三方 容错 隔离 # 不同步调用，限制异步调用(数量和超时)，能迅速发现故障 不单点 # 一切都出故障 不系统串联 功能支持启用禁用 # 实现wire on/wire off框架 服务方法 # 成本分析 # # autonomy.</description>
    </item>
    
    <item>
      <title>项目规划</title>
      <link>https://example.com/docs/architect/method/project_plan/</link>
      <pubDate>Wed, 10 Oct 2018 14:51:24 +0800</pubDate>
      
      <guid>https://example.com/docs/architect/method/project_plan/</guid>
      <description>平台服务 # aPaaS # # platform as a service，介于IaaS和SaaS中间 将软件研发的平台做为服务，以SaaS的模式交付 组件化支撑和驱动 # 组件的发展决定paas广度，组件的聚合决定paas深度 # 对内固守组件边界，对外暴露标准接口 分层 平台组件 基础业务 # 不可见，影响全局，通用业务逻辑，对性能很敏感 业务 组件 设计 # 自描述的，这样就在设计和开发上解耦 确定边界 定义标准接口 确定核心功能 规范异常处理 开发 # 像开发dsl一样,来评判核心逻辑和接口，抽象度高 技术评审 定义接口 # 面向接口开发，也称为BDD dubbo、grpc等 restful 接口设计 标准化 说明 服务路由 版本管理 授权管理 核心理念 # 体现在 服务、工具、模型、规范 开放 而非 封闭 合作 而非 限制 共享 而非 替代 重点关注 基础业务 组织架构和用户组 审批流 权限 通用模型 透明分布式缓存模型 分布式存储模型 分布式事务模型 效率工具 数据迁移工具 缓存配置工具 SaaS # aws线上云 微服务 + gRPC + k8s + Istio Golang + TypeScript + Python TiDB 行为分析 # 埋点 # 架构 数据采集 客户端采集 服务器采集 业务系统 第三方渠道 数据治理 ETL 实时ID mapping 元数据管理 数据质量管理: 数据校验, 实时导入监控，异常报警，debug数据查询，用户关联校验，数据质量看板 数据仓库 数据模型：Event, User, Item内容 实时导入系统 存储引擎、查询引擎 数据智能 特征工程 特征选择 模型训练: 深度学习, 自然语言处理，时序预测，GBDT/LR, AutoML 模型可视化 在线服务 工具 采集: SDK(JS, Android, iOS, 小程序，服务端，全埋点), ID Mapping, 归因链路 实施工具: 事件管理，变量管理，命名工具，埋点SLA配置, 预警配置，session管理，生命周期管理，tag管理，测试工具，ABTest工具 分析工具: 事件分析，漏斗分析，分布分析，留存分析，数据看板，热图分析，归因分析，自定义SQL查询, API管理，广告和活动效果监测 实现方式 代码埋点 全埋点、可视化全埋点（圈选） 规范 结构与命名清晰 方便历史版本对比 每个埋点数据质量负责到人（开发、测试、数据负责人） 数据统一管理 尽量用工具自动化 企业中台 # 数据 租户 用户 micro service 每个service监控 每个service不单点 单功能拆分，边界明确 service间只依赖sdk(好莱坞法则)，通过服务总线发现 servcie无状态接入 分类 内部服务 internal # 内外服务用互相转化 文件上传 图像处理 数据挖掘 报表 外部服务 external # 流控、质量监控、多链路备用、降级方案 邮件 短信 推送 cti 企业信息校验 业务服务 transaction 审批流 工作流 登录 海 核心服务 core 租户id服务 检索服务 报表服务 监控服务 k8s 服务总线 支持服务 supportive 文档 测试环境 沙盒同步 插件服务 plugin 集成服务 integration 事务服务 finance CPQ ERP saas基础 计费 用户管理 联动 导入企业数据 调用aws或aliyun，提供webhook 服务的sdk 多语言sdk 降级 ha apm 服务监控 # 用于发现问题、追查事故、评估缩容或扩容、评估降级 日志 接口 # 调用服务提供的监控接口 系统 # 容器提供 apm # 客户端采样 可达性 # 由通用监控完成 工程 打包docker镜像 服务升级 灰度发布与AB test 提供api版本接口供客户端查询 服务总线 管理服务状态、位置 本地生活 # 服务与功能</description>
    </item>
    
    <item>
      <title>测试规划</title>
      <link>https://example.com/docs/architect/method/test_plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/docs/architect/method/test_plan/</guid>
      <description>规划 # 蓝图 规范 &amp;amp; 稳定 用例规范，测试方案规范，自动化代码规范，工单处理标准，提测准人/出标准，Bug规范 线上异常监控，PPE环境监控，发布接管，线上问题对接，线上告警，自动巡检 内容 基础：功能测试，兼容性测试，性能测试，数据治理，安全测试，线上问题，环境治理，故障演练 提效：API自动化，框架&amp;amp;测试代码自动生成，自动部署&amp;amp;持续集成，数据工厂，UI自动化，Doom引流 赋能：测试用例开放，代码质量度量，story_QA，测试工具&amp;amp;平台开放，自由组装case场景，精准推荐 探索：探索性测试，契约测试，AI技术赋能测试 度量 线上：发布次数，紧急发布/回滚，工单预警数，生产冒烟数，线上工单数，复盘数 线下：代码质量数据，缺陷修复效率，Bug打回数据，自动化通过率，项目进度度量，Story owner度量 基础 # 功能测试 业务梳理：业务结构图，服务调用图，数据流，特殊逻辑时序图 用例设计：模板化，框架化 安全测试 清扫漏洞: 敏感信息，接口安全问题 工具：BurpSuite, 自研代码安全扫描工具 常态化: 下沉QA流程，研发流程加入 兼容性测试 包括：App，H5，操作系统，Web浏览器，API 线上问题治理 工具：工单系统 线上反馈线上化：钉钉机器人接入，Bug自动转移 数据沉淀及可视化 FAQ 运营自查：-&amp;gt;QA-&amp;gt;开发产品 问题解决 功能缺陷类: 开发解决-&amp;gt;QA-&amp;gt;运营 答疑问：加入自查文档 功能优化类：指派给产品 问题规约 宣导：线上群公告，线下组织文档操作和业务培训 问题分类和定级 1/5/30原则：1分钟感知，5分钟响应，30分钟解决 FAQ持续转化输出 提效 # API测试 工具: Jenkins+Newman, JMeter, 思想: 模块化，测试库，数据驱动，关键字驱动，BDD 框架 Jenkins+Python(UnitTest/Pytest, Requests, HTMLTestRunner/Allure) Jenkins+Java+Maven+JUnit/TestNG+HttpClient/RestAssured+ExtentReport/Allure 框架思想 框架分层解耦: 用例层，组件/业务层，API层，公共基础层 数据分类处理: 公共数据，隔离数据，运行时数据 多协议封装: 接口协议，接口定义及调用 多环境处理: 发布流，框架管理(切换、可维护性可扩展性) 结果自动验证 框架扩展: Pytest 对比策略 数据库设计: 自动化用例nodeid，请求URL，运行环境，用例路径，request_id，请求体，cURL，Response 对比引擎设计：JSONPath匹配对比策略 API覆盖率统计 分类 白盒覆盖率: 代码 灰盒覆盖率：接口 黑盒覆盖率：需求 实践 分子：结合日志，生成RequestID扩展py.</description>
    </item>
    
  </channel>
</rss>
