<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Series on outrunJ笔记</title>
    <link>http://shenwenqing.com/series/</link>
    <description>Recent content in Series on outrunJ笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Copyright 2017 outrunJ</copyright>
    <lastBuildDate>Thu, 11 Oct 2018 18:47:57 +0800</lastBuildDate>
    
	<atom:link href="http://shenwenqing.com/series/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux</title>
      <link>http://shenwenqing.com/series/ops/linux/</link>
      <pubDate>Thu, 11 Oct 2018 18:47:57 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/linux/</guid>
      <description>历史 40年代：汇编语言 60年代：汇编语言unux 70年代初：c语言、c语言unux、unux开源（美国反垄断法制裁AT&amp;amp;T） 70年代末：AT&amp;amp;T分裂，unix闭源 80年代：minix 90年代：linux # 80、90年代之间：gun计划  文件位置 /var /log /boot.log # 启动日志 /proc /[pid] /status # 任务虚拟地址空间的大小 VmSize, 应用程序正在使用的物理内存的大小 VmRSS /etc /sudoers /group /passwd /resolv.conf # dns nameserver 223.5.5.5 nameserver 223.6.6.6 # alidns /sysconfig /network-scripts/ifcfg-eth0 # 永久修改ip DEVICE=eth0 # 设备别名 BOOTPROTO=static # 网卡获得ip地址的方式，默认dhcp HWADDR=00:00:00:00:00:00 # mac IPADDR=192.168.0.100 # ip NETMASK=255.255.255.0 # netmask ONBOOT=yes # 系统启动时是否激活此设备 /network # 修改网关 NETWORKING=yes # 系统是否使用网络 HOSTNAME=abc # 设置本机主机名, 要与/etc/hosts中设置的主机名相同 GATEWAY=192.</description>
    </item>
    
    <item>
      <title>Book</title>
      <link>http://shenwenqing.com/series/life/book/</link>
      <pubDate>Thu, 11 Oct 2018 18:46:38 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/life/book/</guid>
      <description>sicp 计算机程序的构造和解释 paip paradigms of artificial intelligence programming taocp 计算机程序设计艺术  </description>
    </item>
    
    <item>
      <title>Windows</title>
      <link>http://shenwenqing.com/series/tool/windows/</link>
      <pubDate>Thu, 11 Oct 2018 18:44:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/windows/</guid>
      <description>方案 附件 -&amp;gt; 系统工具 -&amp;gt; 字符映射表 -&amp;gt; 新宋体 中查看汉字的unicode编码 远程协助 端口：3389 1.系统属性 远程 2.附件：远程连接 # xp:单用户，远程操作时原用户无法操作 chm 不显示内容 右键 -&amp;gt; 常规 -&amp;gt; 解锁  命令 route print route delete route add 0.0.0.0 mask 0.0.0.0 10.0.2.2 nstsc # 运程桌面  cmd CMD 属性 cmd /c dir 是执行完dir命令后关闭命令窗口。 cmd /k dir 是执行完dir命令后不关闭命令窗口。 cmd /c start dir 会打开一个新窗口后执行dir指令，原窗口会关闭。 cmd /k start dir 会打开一个新窗口后执行dir指令，原窗口不会关闭。 语法命令 | findstr asdf # 相当于grep CMD命令 1. gpedit.msc-----组策略 2.</description>
    </item>
    
    <item>
      <title>LoadRunner</title>
      <link>http://shenwenqing.com/series/tool/loadrunner/</link>
      <pubDate>Thu, 11 Oct 2018 18:42:40 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/loadrunner/</guid>
      <description> 脚本参数 get web_url(&amp;quot;login&amp;quot;, &amp;quot;URL=http://192.168.0.14:9081/ryx-login/sso/login&amp;quot;, &amp;quot;Resource=0&amp;quot;, &amp;quot;RecContentType=text/html&amp;quot;, &amp;quot;Referer=&amp;quot;, &amp;quot;Snapshot=t1.inf&amp;quot;, &amp;quot;Mode=HTML&amp;quot;, EXTRARES, &amp;quot;Url=../ycls/img/banner1.jpg&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/banner2.jpg&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/banner3.jpg&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/userinput.png&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/sawtooth.png&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/tip2.png&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/pwdinput.png&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/login_back.png&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/tip1.png&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/codeinput.png&amp;quot;, ENDITEM, &amp;quot;Url=../ycls/img/loading-small2.gif&amp;quot;, ENDITEM, &amp;quot;Url=/favicon.ico&amp;quot;, &amp;quot;Referer=&amp;quot;, ENDITEM, LAST); post参数 web_submit_data(&amp;quot;getActivityParameter&amp;quot;, &amp;quot;Action=http://192.168.0.14:9081/tobacco/retail/lottery/getActivityParameter?jsonp=jQuery19109862107675272699_1401335732777&amp;quot;, &amp;quot;Method=POST&amp;quot;, &amp;quot;RecContentType=text/html&amp;quot;, &amp;quot;Referer=http://192.168.0.14:9081/tobacco/retail/index;jsessionid=7BBAFC6DE481FBCB1CB88D738BD7EE71&amp;quot;, &amp;quot;Snapshot=t6.inf&amp;quot;, &amp;quot;Mode=HTML&amp;quot;, ITEMDATA, &amp;quot;Name=requestType&amp;quot;, &amp;quot;Value=ajax&amp;quot;, ENDITEM, LAST); post直接传数据 web_custom_request(&amp;quot;dataservice&amp;quot;, &amp;quot;URL=http://202.110.222.207:7080/rtserver/rest/resource/tobacco/dataservice&amp;quot;, &amp;quot;Method=POST&amp;quot;, &amp;quot;Resource=0&amp;quot;, &amp;quot;RecContentType=text/plain&amp;quot;, &amp;quot;Referer=&amp;quot;, &amp;quot;Snapshot=t1.inf&amp;quot;, &amp;quot;Mode=HTML&amp;quot;, &amp;quot;Body= {\&amp;quot;trans_code\&amp;quot;:\&amp;quot;1006\&amp;quot;,\&amp;quot;end_date\&amp;quot;:\&amp;quot;20140701\&amp;quot;,\&amp;quot;source\&amp;quot;:\&amp;quot;appkey\&amp;quot;,\&amp;quot;data\&amp;quot;:\&amp;quot;eyJiZWdpbl9kYXRlIjoiMjAxNDA2MDEiLCJlbmRfZGF0ZSI6IjIwMTQwNzAxIiwicG9zX2lkIjoiODg1MDAzMTAiLCJzb3VyY2UiOiJhcHBrZXkiLCJjdXN0b21lcl9pZCI6IjM3MDExMjEwNzQ2NyIsImFjY2Vzc190b2tlbiI6IiJ9\&amp;quot;,\&amp;quot;begin_date\&amp;quot;:\&amp;quot;20140601\&amp;quot;,\&amp;quot;mac\&amp;quot;:\&amp;quot;123\&amp;quot;,\&amp;quot;pos_id\&amp;quot;:\&amp;quot;88500310\&amp;quot;,\&amp;quot;customer_id\&amp;quot;:\&amp;quot;370112107467\&amp;quot;,\&amp;quot;access_token\&amp;quot;:\&amp;quot;\&amp;quot;}&amp;quot;, LAST);  </description>
    </item>
    
    <item>
      <title>Firefox</title>
      <link>http://shenwenqing.com/series/tool/firefox/</link>
      <pubDate>Thu, 11 Oct 2018 18:42:03 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/firefox/</guid>
      <description> 代理设置 “编辑”→“首选项”→“高级”→“网络”→“设置”→“手动配置代理”  mozvr 介绍 mozilla vr 虚拟现实 购买Oculus Rift头盔来看它的网页  </description>
    </item>
    
    <item>
      <title>Chrome</title>
      <link>http://shenwenqing.com/series/tool/chrome/</link>
      <pubDate>Thu, 11 Oct 2018 18:40:53 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/chrome/</guid>
      <description> 介绍 webkit: chrome firefox safari的内核，来源于kde的khtml与kjs  f12调试模式  js调试 sources-&amp;gt; js文件打断点调试 # “{}”按钮是格式化代码，右边按钮单步调试，依次为执行， 跳过进入方法，进入方法，跳出方法，开启／停止调试，暂停 //# sourceURL=base.js console 可以查看js常量，如THREE.VERSION  设置页  about:about # 进入查看所有设置页 chrome:extensions chrome:flags # 可以开启硬件加速解码  集成抓包工具  chrome://net-internals/#events  插件 ARC Welder # android模拟器  </description>
    </item>
    
    <item>
      <title>Intellij Idea</title>
      <link>http://shenwenqing.com/series/tool/intellij_idea/</link>
      <pubDate>Thu, 11 Oct 2018 18:38:58 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/intellij_idea/</guid>
      <description> 注意  Project 相当于workspace, module 相当于工程  注册服务器  # 发布网站 http://idea.lanyus.com http://idea.qinxi1992.cn http://idea.lianghongbo.com/licens http://im.js.cn:8888  快捷键  alt + enter 改错  webstorm pycharm goland clion phpCharm </description>
    </item>
    
    <item>
      <title>Sublime</title>
      <link>http://shenwenqing.com/series/tool/sublime/</link>
      <pubDate>Thu, 11 Oct 2018 18:38:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/sublime/</guid>
      <description> 功能  显示风格好 缩略图 热加载(不改变原文件) 插件 多文件夹查找 多视窗 命令模糊搜索下拉菜单 柜形选择 V8插件，js运行控制台 js校验 vi 操作设置 修改配色方案  快捷键  批量修改  </description>
    </item>
    
    <item>
      <title>Eclipse</title>
      <link>http://shenwenqing.com/series/tool/eclipse/</link>
      <pubDate>Thu, 11 Oct 2018 18:33:08 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/eclipse/</guid>
      <description>方案 user library发布 项目右键 -&amp;gt; properties -&amp;gt; Deployment Assembly -&amp;gt; add -&amp;gt; javaBuild Path Entries中选择发布包 tomcat设置发布到外部 new server -&amp;gt; 直接finish 右键server -&amp;gt; open 修改server location -&amp;gt; use Tomcat installation 修改server location -&amp;gt; deploy path为webapps 修改TimeOuts -&amp;gt;所有时间为1200 java版本 window -&amp;gt; preferences -&amp;gt; java -&amp;gt; compiler window -&amp;gt; preferences -&amp;gt; java -&amp;gt; installed JREs 编码 general -&amp;gt; workspace Text file encoding general -&amp;gt; content types Text -&amp;gt; java source file defalt encoding输入UTF-8并点击update 快捷键 general -&amp;gt; editors -&amp;gt; keys content assist # 代码提示 word comletion # 代码补全  插件 market place http://www.</description>
    </item>
    
    <item>
      <title>Tool</title>
      <link>http://shenwenqing.com/series/tool/tool/</link>
      <pubDate>Thu, 11 Oct 2018 18:32:38 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/tool/tool/</guid>
      <description>teamviewer # 远程桌面 idle # python tkinter开发的python ide lighttable # clojure hbuilder # h5 komodo edit # 免费跨平台，多pl sketch # mac下轻量ui设计工具 rose # ibm uml工具 vscode  </description>
    </item>
    
    <item>
      <title>PM2</title>
      <link>http://shenwenqing.com/series/ops/pm2/</link>
      <pubDate>Thu, 11 Oct 2018 18:31:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/pm2/</guid>
      <description> 介绍  带有负载均衡功能的node应用进程管理器 内建负载均衡(使用node cluster模块) 后台运行 热重载 停止不稳定进程，如无限循环  安装  npm install -g pm2  命令  pm2 start app.js pm2 stop pm2 restart pm2 status pm2 info 1 pm2 logs 1  </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://shenwenqing.com/series/ops/git/</link>
      <pubDate>Thu, 11 Oct 2018 18:26:40 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/git/</guid>
      <description>目录结构 .git branches config # 存放版本库git地址  规定 HEAD # HEAD的版本号, HEAD^^ 表示HEAD之前两个的版本, HEAD~n 表示之前n个版本 buffered stage branch head # buffered表示当前修改所在的版本，stage是buffered中文件add之后到的版本，branch是stage commit后到的分支(版本)，head是远程仓库的最新版本  命令 git [command] --help git help submodule  仓库 clone checkout # 切换到分支。检出原有文件替换 -b # 创建并切换到分支 branch # 创建并切换到分支 -r # 指定操作远程分支 -r origin/dev -a # 本地远程所有分支 dev ef71 # 从ef71创建分支dev dev -d dev # 删除 -D dev # 强制删除 remote remove origin show # 显示仓库 prune origin # 删除远程没有而本地缓存的远程分支 add origin git@bitbucket.</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>http://shenwenqing.com/series/ops/maven/</link>
      <pubDate>Thu, 11 Oct 2018 18:25:38 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/maven/</guid>
      <description> repository包依赖关系网站  mvnrepository.com  命令 pom.xml生成项目命令 mvn mvn compile # mvn compile exec:java eclipse插件 m2e 得到jar包 mvn dependency:copy-dependencies 生成eclipse工程 mvn eclipse:eclipse jetty-plugin下运行 mvn jetty:run 版本 mvn -version  方案 ojdbc14本地加载 ＃ oracle是收费的，所以不能直接下载到驱动 o-&amp;gt; mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=ojdbc14-10.2.0.4.0.jar o-&amp;gt; 把ojdbc14-10.2.0.4.0.jar复制到目录下: /home/outrun/.m2/repository/com/oracle/ojdbc14/10.2.0.4.0/ o-&amp;gt; /home/outrun/.m2/repository/com/oracle/ojdbc14/下会产生maven-metadata-local.xml文件存放maven引入依赖 o-&amp;gt; 项目中引入本地依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.oracle&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;ojdbc14&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;10.2.0.4.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  </description>
    </item>
    
    <item>
      <title>Ant</title>
      <link>http://shenwenqing.com/series/ops/ant/</link>
      <pubDate>Thu, 11 Oct 2018 18:24:51 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/ant/</guid>
      <description> 功能 js压缩 自动发布  build.xml 示例 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project default=&amp;quot;execute&amp;quot;&amp;gt; &amp;lt;target name=&amp;quot;compile&amp;quot;&amp;gt; &amp;lt;javac destdir=&amp;quot;.&amp;quot; srcdir=&amp;quot;.&amp;quot;/&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;target name=&amp;quot;execute&amp;quot; depends=&amp;quot;compile&amp;quot;&amp;gt; &amp;lt;java classpath=&amp;quot;.&amp;quot; classname=&amp;quot;HelloWorld&amp;quot;/&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;/project&amp;gt;  </description>
    </item>
    
    <item>
      <title>Svn</title>
      <link>http://shenwenqing.com/series/ops/svn/</link>
      <pubDate>Thu, 11 Oct 2018 18:22:50 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/svn/</guid>
      <description>svn linux下移植的版本控制器 默认端口: 3690  目录结构 conf:配置文件 db:数据库 hooks:勾子（自定义功能） locks:文件锁  命令 服务器 svn --version svnadmin create c:\svn # 创建仓库 ## hooks勾子 locks锁 conf db svnserve -h svnserve -d -r c:\svn # 启动服务(-d是后台运行，windows不支持，需要创建服务) ## --listen-port 3691 指定监听端口 windows 下注册服务 sc create 服务名 binPath= &amp;quot;d:/suversion/bin/svnserve --service -r c:\svn&amp;quot; displayName= &amp;quot;显示名&amp;quot; # 注意双引号前面要有空格 sc delete 服务名 使用多个仓库 svnadmin create d:\svn2 创建仓库以后 svnserve -d -r d:\svn2 --listen-port 3691 配置用另一个服务端口启动该仓库 # svn默认启动端口是3690 svn://192.168.10.3:3691 来访问该仓库  客户端 添加项目 svn add test/ svn ci -m &amp;quot;first&amp;quot; # svn commit -m &amp;quot;fisrt&amp;quot; ## ci是checkin 检出 svn checkout svn://192.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://shenwenqing.com/series/ops/docker/</link>
      <pubDate>Thu, 11 Oct 2018 18:18:21 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/docker/</guid>
      <description>介绍  基于linux LXC，可以实现虚拟化  镜象网站  https://hub.docker.com/  命令 docker -h search mysql pull centos:7 centos:latest outrun11/test:nginx1 images centos # 本地镜象列表 ps -a # 容器列表 rmi centos:latest # 删除镜象 rm # 移除容器 docker rm docker ps -aq # 移除所有未运行的容器 rm -f 026 kill 026e restart 026e start 026 # 启动已建立的进程 cp 026e:/docker/file /local/file login build -t=&amp;quot;nginx/test&amp;quot; . # 用当前目录Dockerfile创建新镜像 tag nginx/test:test1 outrun11/test:nginx1 # 要求docker网站中创建了名为test的repository push outrun11/test:nginx1 logs beae3392 run # 从镜像建立进程 # id可以只输入前几位 # -t 伪tty, -i 交互的 # -rm=true执行完后删除 # -v /etc/:/opt/etc/ 挂载本机/etc到容器/opt/etc, /etc/:/opt/etc/:ro 只读挂载, /etc/ 对外共享/etc # -p 1234:80 端口映射本机1234端口到容器80 # --volumes-from etc_share 使用另一个容器对外共享的磁盘 # -d 后台运行 # --link redis_server:redis 连接容器的redis命令 # -w /var/node 当前工作目录 # -e NODE_ENV=&#39;&#39; 环境变量 -t -i centos /bin/bash # 启动容器, 执行bash b15 /bin/echo &#39;hello&#39; # 启动容器 --rm=true -i -t --name=ls-volume -v /etc/:/opt/etc/ centos ls /opt/etc # 创建共享 -i -t -p 1337:1337 --name=etc_share -v /etc/ centos mkdir /etc/my_share &amp;amp;&amp;amp; /bin/sh -c &amp;quot;while true; do echo hello; sleep 1; done&amp;quot; # 持续运行 --rm=true -i -t --volumes-from etc_share --name=ls_etc centos ls /etc # 使用共享  配置 /etc/sysconfig/docker # /etc/init.</description>
    </item>
    
    <item>
      <title>Kvm</title>
      <link>http://shenwenqing.com/series/ops/kvm/</link>
      <pubDate>Thu, 11 Oct 2018 18:17:40 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/kvm/</guid>
      <description> 介绍 kernel-based virtual machine, 使用linux自身的调度器进行管理,所以代码较少 # 又叫qemu-system或qemu-kvm 虚拟化需要硬件支持(如 intel VT技术或AMD V技术)，是基于硬件的完全虚拟化  原理 包含一个可加载的内核模块kvm.ko, 由于集成在linux内核中，比其他虚拟机软件高效  使用 检查系统是否支持硬件虚拟化 egrep &#39;(vmx|svm)&#39; --color=always /proc/cpuinfo  </description>
    </item>
    
    <item>
      <title>Vmware</title>
      <link>http://shenwenqing.com/series/ops/vmware/</link>
      <pubDate>Thu, 11 Oct 2018 18:17:12 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/vmware/</guid>
      <description> 安装  安装后会创建两个虚拟网卡  设置  edit -&amp;gt; preferences -&amp;gt; Hot Keys 设置退出快捷键  网络连接方式  1.vm9自带的virtual network editor中选择桥接到有线网卡 2.vm -&amp;gt; setting -&amp;gt; network adapter选项设置 bridged（桥接）:与主机平等，可以设置为同一个网段相互访问 nat:通过虚拟网卡连接主机，共享网络 host-only:单机模式  </description>
    </item>
    
    <item>
      <title>Virtualbox</title>
      <link>http://shenwenqing.com/series/ops/virtualbox/</link>
      <pubDate>Thu, 11 Oct 2018 18:15:35 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/virtualbox/</guid>
      <description> 方案 linux安装增强iso iso位置 /usr/share/virtualbox 编译环境 kernel-devel gcc 共享剪切板与拖拽文件 虚拟机启动后devices下设置 共享文件夹 linux下挂载 mount -t vboxsf 共享名 /mnt/share windows下挂载 我的电脑 右键 映射网络驱动器 clone clone 时选择更新mac,并在虚拟机中网络连接设置中重写mac与ip 配置主机间ssh免登录，远程ssh与所有主机免登录  </description>
    </item>
    
    <item>
      <title>Vsftp</title>
      <link>http://shenwenqing.com/series/ops/vsftp/</link>
      <pubDate>Thu, 11 Oct 2018 18:14:47 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/vsftp/</guid>
      <description>介绍  默认端口21 匿名用户登陆名为ftp或anonymous, 目录在/var/ftp, 只能下载不能上传 本地用户用户名和密码与本地用户相同，目录为该用户的登录目录  文件  /usr/sbin/vsftpd # VSFTPD的主程序 /etc/rc.d/init.d/vsftpd # initd启动脚本 /etc/vsftpd/vsftpd.conf # 主配置文件 /etc/pam.d/vsftpd # PAM认证文件 /etc/vsftpd.ftpusers # 禁止使用VSFTPD的用户列表文件 /etc/vsftpd.user_list # 禁止或允许使用VSFTPD的用户列表文件 /var/ftp # 匿名用户主目录 /var/ftp/pub # 匿名用户的下载目录  默认用户与组  用户 adduser -d /var/ftp -g ftp -s /sbin/nologin ftp 组 ftp  命令  systemctl start vsftpd  配置 /etc/vsftpd/vsftpd.conf文件中 anonymous_enable=YES local_enable=YES write_enable=YES chroot_local_user=YES allow_writeable_chroot=YES local_root=/ # local_root表示使用本地用户登录到ftp时的默认目录 anon_root=/ # anon_root表示匿名用户登录到ftp时的默认目录 chroot_list_file=/etc/vsftpd/chroot_list 编辑/etc/vsftpd/chroot_list 在这里面输入用户名字，一行写一个用户名。 重启vsftpd 打开tcp, udp端口21, 20 root 登录 /etc/vsftpd/vsftpd.</description>
    </item>
    
    <item>
      <title>Cron</title>
      <link>http://shenwenqing.com/series/ops/cron/</link>
      <pubDate>Thu, 11 Oct 2018 18:12:51 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/cron/</guid>
      <description>介绍  crond服务在systemd中被timer取代  使用 $ service crond start $ service crond stop $ service crond restart $ service crond reload # 重载配置 $ crontab crontest.cron # 添加定时任务。打印的文件在用户根目录下 $ crontab -l # 列出用户目前的crontab $ crontab -u # 设定某个用户的cron服务 $ crontab -r # 删除某个用户的cron服务 $ crontab -e # 编辑某个用户的cron服务 # crontab -u root -l 查看root的设置 /etc/crontab # 系统配置文件 /etc/cron.hourly /etc/cron.daily /etc/cron.weekly /etc/cron.monthly # 每小时、天、周、月执行的脚本 定时格式 M H D m d cmd M: 分钟（0-59）每分钟用*或者 */1表示 H: 小时（0-23） D: 天（1-31） m: 月（1-12） d: 一星期内的天（0~6，0为星期天） cmd: 如 ~/a.</description>
    </item>
    
    <item>
      <title>SSH</title>
      <link>http://shenwenqing.com/series/ops/ssh/</link>
      <pubDate>Thu, 11 Oct 2018 18:11:27 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/ssh/</guid>
      <description>ssh（secure shell）：特点  1.加密和压缩：http与ftp都是明文传输 2.ssh有很多子协议，实现不同功能：如sftp,scp 3.端口:22  配置  修改ip地址： 有虚拟机时：先设置虚拟机的连接方式是桥接 图形界面直接修改（或重启到root用户的图形界面修改） 命令修改 /etc/network/interfaces auto eth0 iface eth0 inet static address ip地址 netmask 子网掩码 gateway 网关 broadcast 广播地址 dns-nameservers DNS 重启网络服务：/etc/init.d/networking restart， /etc/ssh/sshd_config PasswordAuthentication no # 关闭密码登录 PermitRootLogin no # 关闭root登录  命令  ssh outrun@10.1.1.1 # -p 22 端口 # PubkeyAuthentication=no 不公钥登录  免登录 1&amp;gt; ssh-keygen -t rsa # 一直回车，生成~/.ssh/id_rsa 与 id_rsa.pub两个文件 2&amp;gt; ssh-copy-id -i 192.168.56.11 # 这样就可以免登录访问192.168.56.11了 ## ssh-copy-id -i localhost　免登录自己 或 把A机下的1中生成的id_rsa.</description>
    </item>
    
    <item>
      <title>Nsq</title>
      <link>http://shenwenqing.com/series/architecture/nsq/</link>
      <pubDate>Thu, 11 Oct 2018 16:32:01 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/nsq/</guid>
      <description> 介绍 go  工具 admin # 监控  </description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>http://shenwenqing.com/series/architecture/kafka/</link>
      <pubDate>Thu, 11 Oct 2018 16:31:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/kafka/</guid>
      <description> 介绍 scala语言编写  架构  push/pull队列架构，适合异构集群 高吞吐率 分布式 支持数据并行到hadoop  工具 manager # 监控  </description>
    </item>
    
    <item>
      <title>Rabbitmq</title>
      <link>http://shenwenqing.com/series/architecture/rabbitmq/</link>
      <pubDate>Thu, 11 Oct 2018 16:30:07 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/rabbitmq/</guid>
      <description>install  yum install rabbitmq-server  命令  添加用户: rabbitmqctl add_user rainbird password 添加权限: rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; rainbird &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; 删除测试用户: rabbitmqctl delete_user guest  原理 虚拟主机 virtual host: 用户通过虚拟主机进行权限控制(如禁止A组访问B组的交换机) ＃ 默认虚拟主机为&amp;quot;/&amp;quot; 队列 queue: 由生产者(producers)通过程序建立，再通过消费者(consuming)连接取走 消息: 路由键 routing key 交换机 exchange: 负责把消息放入队列 绑定 binding(路由规则): 如指明交换机中具有路由键&amp;quot;X&amp;quot;的消息要到名为&amp;quot;Y&amp;quot;的队列中去 # 如果同一个键对应多个队列，则复制后分别发送 功能 持久化 队列和交换机创建时指定标志durable,指定队列和交换机重启生重建 ＃ 如果绑定了durable的队列和durable的交换机，该绑定自动保留 ＃ non-durable的交换机与durable的队列不能绑定 ＃ 一但创建durable标志，不能修改 消息发布到交换机时，指定标志Delivery Mode=2,这样消息会持久化  使用(原文http://adamlu.net/rabbitmq/tutorial-one-python)  安装python 与插件支持 pip python-pip git python-pika rabbitmq-server start send.</description>
    </item>
    
    <item>
      <title>Jetty</title>
      <link>http://shenwenqing.com/series/architecture/jetty/</link>
      <pubDate>Thu, 11 Oct 2018 16:28:22 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/jetty/</guid>
      <description> 介绍  是开源的servlet容器，基于java, 可以给jsp和servlet提供运行环境 jetty容器可以实例化成一个对象，迅速为一些独立运行(stand-alone)的java应用提供网络和web连接  </description>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>http://shenwenqing.com/series/architecture/tomcat/</link>
      <pubDate>Thu, 11 Oct 2018 16:27:32 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/tomcat/</guid>
      <description>介绍  tomcat从7开始默认就是nio的  配置 bin/startup.bat set JAVA_HOME= # 设置tomcat运行jdk context.xml &amp;lt;Loader delegate=&amp;quot;true&amp;quot;/&amp;gt; # true表示使用java加载器的代理模式 ## false代表永远先在Web应用程序中寻找 web.xml Content-Type: text/x-zim-wiki Wiki-Format: zim 0.4 Creation-Date: 2013-08-04T19:40:08+08:00 ====== web.xml文件 ====== Created Sunday 04 August 2013 &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt; &amp;lt;load-on-startup&amp;gt;1 &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt; &amp;lt;param-value&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt; &amp;lt;welcome-file-list&amp;gt; &amp;lt;welcome-file&amp;gt; &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt; &amp;lt;filter-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt; &amp;lt;url-pattern&amp;gt; &amp;lt;mime-mapping&amp;gt; &amp;lt;extension&amp;gt;bmp &amp;lt;mime-type&amp;gt;image/bmp &amp;lt;error-page&amp;gt; &amp;lt;exception-type&amp;gt;异常类的完全限定名 /&amp;lt;error-code&amp;gt;错误码 &amp;lt;location&amp;gt;以“/”开头的错误处理页面路径  启动顺序 web.xml中配置的启动顺序 监听器 过滤器 servlet load-on-startup属性值越小越先启动 tomcat的加载过程： # 分析启动日志得到 启动http协议 启动catalina 启动servlet引擎 加载xml配置文件 初始化日志配置 初始化ContextListener 初始化SessionListener 部署web项目 spring监听器，加载xml配置(开始spring自己的日志记录) 实例化bean 初始化c3p0连接池的记录显示 初始化LocalSessionFactoryBean的记录显示 application监听器(监听器按配置顺序启动) struts过滤器，加载xml配置(开始struts自己的日志记录) struts-default.</description>
    </item>
    
    <item>
      <title>Netty</title>
      <link>http://shenwenqing.com/series/architecture/netty/</link>
      <pubDate>Thu, 11 Oct 2018 16:25:14 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/netty/</guid>
      <description>介绍  JBOSS提供，由Trustin Lee开发，比mina晚 java开源框架  原理  基于socket的数据流处理 # socket数据流不是a queue of packets , 而是a queue of bytes, 所以分次传输的数据会成为a bunch of bytes  例子 Handler ChannelHandler ChannelOutboundHandler ChannelOutboundHandlerAdapter # 可作Encoder MessageToByteEncoder ChannelInboundHandler # 提供可重写的事件 ChannelInboundHandlerAdapter ByteToMessageDecoder # easy to deal with fragmentation issue 事件 decode(ctx, in, out) # 内部处理过数据，堆积到了buffer(in) ## out中add了数据, 表示decode成功，则执行后抛弃in中数据 # decode会被循环调用直到有一次out中没有add东西 ReplayingDecoder 事件 channelRead() # 从client接收到数据时调用，数据的类型是ByteBuf ## ByteBuf是 reference-counted object ## 必须用ReferenceCountUtil.release(msg)或((ByteBuf) msg).release()来明确释放 exceptionCaught() # 当抛出Throwable对象时调用 channelActive() # as soon as a connection is established 方法 handlerAdded() handlerRemoved() ByteBuf 方法 buf.</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>http://shenwenqing.com/series/architecture/nginx/</link>
      <pubDate>Thu, 11 Oct 2018 16:18:58 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/nginx/</guid>
      <description>结构  一个主进程(root权限运行)和多个工作进程(普通权限运行)  模块  handler filter upstream load-balance  功能  http 可以保持session， 相同的ip分配到同一个服务器上 缓存静态页面到内存，建立索引与自动索引 反向代理 负载均衡 模块化 过滤器 gzipping, byte ranges, chunked responses, SSI-filter 支持SSL与TLS SNI imap/pop3代理  命令 nginx -c /etc/nginx/nginx.conf nginx -s quit nginx -s stop nginx -s reload # 重载设置 ## service nginx reload nginx -v # 查看版本 ## -V nginx -t [-c nginx.conf] # 检查配置文件是否正确 nginx -h # 查看帮助 ## -? pkill -9 nginx kill -HUP `nginx.</description>
    </item>
    
    <item>
      <title>Squid</title>
      <link>http://shenwenqing.com/series/architecture/squid/</link>
      <pubDate>Thu, 11 Oct 2018 16:16:37 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/squid/</guid>
      <description>配置文件  /etc/squid/squid.conf  代理类型  普通代理 透明代理 反向代理  缓存  动态资源 静态资源  参考资料  squid 透明代理详解  配置 # squid.conf http_port 3128 # squid服务端口 icp_port 3130 # udp端口,用来接收和发送ICP消息 cache_dir ufs /var/spool/squid # 缓存目录, 写入方式有aufs与ufs两种,aufs使用大量线程异步进行磁盘i/o操作 cache_access_log /var/log/squid/access.log cache_log /var/log/squid/cache.log cache_store_log /var/log/squid/store.log pid_filename /var/run/squid.pid # 日志文件位置 #auth_param basic children 5 #auth_param basic realm Squid proxy-caching web server #auth_param basic credentialsttl 2 hours # 关闭认证，认证一般不需要 cache_effective_user squid cache_effective_group squid cache_mgr youraccount@your.</description>
    </item>
    
    <item>
      <title>Mycat</title>
      <link>http://shenwenqing.com/series/db/mycat/</link>
      <pubDate>Thu, 11 Oct 2018 16:12:35 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/db/mycat/</guid>
      <description>目录结构  bin mycat # 服务器启动等 conf wrapper.conf # jvm配置参数(如分配系统资源) server.xml # 服务器参数，用户授权 schema.xml # 逻辑库，表，分片的定义．修改后要重启 log4j.xml # 配置输出到logs/mycat.log的日志 logs mycat.log # 日志（每天一个日志文件）， 可调整输出级别  默认值  默认数据端口: 8066 默认管理端口: 9066  配置 wrapper.conf # jvm配置参数(如分配系统资源) server.xml # 服务器参数，用户授权 schema.xml # 逻辑库，表，分片的定义．修改后要重启 log4j.xml # 配置输出到logs/mycat.log的日志 mysql linux版数据库设置大小写不敏感，否则会发生表找不到的问题 my.cnf [mysqld] lower_case_table_names = 1  例子 server.xml &amp;lt;mycat&amp;gt; &amp;lt;user name=&amp;quot;test&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot;&amp;gt;test&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;schemas&amp;quot;&amp;gt;TESTDB&amp;lt;/property&amp;gt; &amp;lt;/user&amp;gt; &amp;lt;/mycat&amp;gt; schema.xml &amp;lt;mycat&amp;gt; &amp;lt;schema name=&amp;quot;TESTDB&amp;quot; checkSQLschema=&amp;quot;false&amp;quot; sqlMaxLimit=&amp;quot;100&amp;quot;&amp;gt; &amp;lt;table name=&amp;quot;travelrecord&amp;quot; dataNode=&amp;quot;dn1,dn2,dn3&amp;quot; rule=&amp;quot;auto-sharding-long&amp;quot; /&amp;gt; &amp;lt;table name=&amp;quot;employee&amp;quot; primaryKey=&amp;quot;ID&amp;quot; dataNode=&amp;quot;dn1,dn2&amp;quot; rule=&amp;quot;sharding-by-intfile&amp;quot; /&amp;gt; &amp;lt;table name=&amp;quot;company&amp;quot; primaryKey=&amp;quot;ID&amp;quot; type=&amp;quot;global&amp;quot; dataNode=&amp;quot;dn1,dn2,dn3&amp;quot; /&amp;gt; &amp;lt;table name=&amp;quot;goods&amp;quot; primaryKey=&amp;quot;ID&amp;quot; type=&amp;quot;global&amp;quot; dataNode=&amp;quot;dn1,dn2&amp;quot; /&amp;gt; &amp;lt;table name=&amp;quot;hotnews&amp;quot; primaryKey=&amp;quot;ID&amp;quot; dataNode=&amp;quot;dn1,dn2,dn3&amp;quot; rule=&amp;quot;mod-long&amp;quot; /&amp;gt; &amp;lt;table name=&amp;quot;customer&amp;quot; primaryKey=&amp;quot;ID&amp;quot; dataNode=&amp;quot;dn1,dn2&amp;quot; rule=&amp;quot;sharding-by-intfile&amp;quot;&amp;gt; &amp;lt;childTable name=&amp;quot;orders&amp;quot; primaryKey=&amp;quot;ID&amp;quot; joinKey=&amp;quot;customer_id&amp;quot; parentKey=&amp;quot;id&amp;quot;&amp;gt; &amp;lt;childTable name=&amp;quot;order_items&amp;quot; joinKey=&amp;quot;order_id&amp;quot; parentKey=&amp;quot;id&amp;quot; /&amp;gt; &amp;lt;/childTable&amp;gt; &amp;lt;childTable name=&amp;quot;customer_addr&amp;quot; primaryKey=&amp;quot;ID&amp;quot; joinKey=&amp;quot;customer_id&amp;quot; parentKey=&amp;quot;id&amp;quot; /&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/schema&amp;gt; &amp;lt;dataNode name=&amp;quot;dn1&amp;quot; dataHost=&amp;quot;localhost1&amp;quot; database=&amp;quot;db1&amp;quot; /&amp;gt; &amp;lt;dataNode name=&amp;quot;dn2&amp;quot; dataHost=&amp;quot;localhost1&amp;quot; database=&amp;quot;db2&amp;quot; /&amp;gt; &amp;lt;dataNode name=&amp;quot;dn3&amp;quot; dataHost=&amp;quot;localhost1&amp;quot; database=&amp;quot;db3&amp;quot; /&amp;gt; &amp;lt;dataHost name=&amp;quot;localhost1&amp;quot; maxCon=&amp;quot;1000&amp;quot; minCon=&amp;quot;10&amp;quot; balance=&amp;quot;0&amp;quot; writeType=&amp;quot;0&amp;quot; dbType=&amp;quot;mysql&amp;quot; dbDriver=&amp;quot;native&amp;quot;&amp;gt; &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt; &amp;lt;writeHost host=&amp;quot;hostM1&amp;quot; url=&amp;quot;centos6.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>http://shenwenqing.com/series/db/redis/</link>
      <pubDate>Thu, 11 Oct 2018 16:09:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/db/redis/</guid>
      <description>特点  单线程 # emecache多线程 no-sql 内存 # 请求不经过parser和optimizer(memcache也可以，但不支持排行榜和浮点数) key-value # memcache只有字符串，append字符串, blacklist删除麻烦 # key的命令上一般用:来分隔命名空间 string 整个或一部分操作 整数、浮点数自增自减 list 两边推入或弹出 偏移量trim 读单个多个元素 值查找移除元素 set 增删查单个元素 单个元素是否存在 交集、并集、差集 随机取元素 hash 增删查单个键值对 获取所有键值对 zset # 有序集合, 排序根据score, score为双精度浮点数 增删查单个元素 根据range或成员获取元素 c 编写 复制 持久化 # memcache不能持久化 point-in-time dump # 指定时间段内有指定数量的写操作时执行 dump-to-disk二条命令 append-only文件 从不同步 每秒同步一次 一命令同步一次 客户端分片 不完全事务  应用  primary storage(主存储) secondary storage(二级存储)  命令 文件命令 redis-server # 端口为6379 redis-server /etc/redis.</description>
    </item>
    
    <item>
      <title>Mongodb</title>
      <link>http://shenwenqing.com/series/db/mongodb/</link>
      <pubDate>Thu, 11 Oct 2018 16:00:15 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/db/mongodb/</guid>
      <description>特点  数据结构json(bson) 易写入，易修改 c++编写 分布式 介于关系数据库 和 非关系数据库之间 查询语句强 支持索引 bson格式  注意  document不能大于4Mb 可以非安全模式异步马上成功 每个连接用队列存储命令  数据结构定义  collection # 表 document # 记录 field(key, value) # 字段(field)与值(value) 与关系型数据库的区别 document中的field不要key俱全或一样 find()命令查询  bson的数据类型  ＃bson 是json的扩展 # 增加了数据类型 # 把json数据转换成二进制码存到文件 null boolean undefined 数组 # 如{gps: [20, 56]} 32位和64位整数 # shell中不支持 ## node.js python java等高级语言的驱动中支持 64位浮点 # shell使用的全是这种类型, 如{x:3.14} utf-8 # 字符串类型 ObjectID Date # 如{x:new Date()} 正则 # 如{x:/uspcat/i} javascript块代码 # 如{x:function(){}} ## 相当于存储过程 内嵌文档 # 如{x: {xx: &amp;quot;a&amp;quot;}} 二进制 # shell中不能使用  ObjectId  大小 12字节 显示为24个十六进制字符 # 空间换时间的思想 细节 前4字节是unix时间戳 后3字节集群machine hash 后2字节pid 后3字节inc自增计数器, 在前面都相等时全局自增  命名  数据库与集合名 不能是空字符串 特殊字符 &#39; (空格) , $ / \ \0 应该全小写 小于64字节 数据库名不与保留库名相同，如 admin, local, config 集合名 db-text合法，但不能db.</description>
    </item>
    
    <item>
      <title>Neo4j</title>
      <link>http://shenwenqing.com/series/db/neo4j/</link>
      <pubDate>Thu, 11 Oct 2018 15:59:29 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/db/neo4j/</guid>
      <description> 介绍  使用zookeeper  特点  完全兼容ACID 主从复制 副本从节点 从节点写数据，先同步到主节点, 再由主节点分发  配置 dbms.connector.bolt.enabled=true dbms.connector.bolt.listen_address=0.0.0.0:7687 dbms.connector.http.enabled=true dbms.connector.http.listen_address=0.0.0.0:7474 # 远程访问  </description>
    </item>
    
    <item>
      <title>Oracle</title>
      <link>http://shenwenqing.com/series/db/oracle/</link>
      <pubDate>Thu, 11 Oct 2018 15:46:29 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/db/oracle/</guid>
      <description>启动：两个服务 OracleServiceORCL OracleOraDb11g_home1TNSListener  服务器的组成 oracle数据库 存储位置 oracle安装位置/oradata/ 每个数据库文件夹中有多个二进制文件（*.dbf） oracle实例(内存概念) 服务名 OracleService数据库名 # 实例操作数据库 # 实例包括多个进程与一个内存池(缓存)  工具 # 工具操作实例 sqlplus sqldeveloper  分布式 失败转移与负载平衡 多个服务器集成：集群 逐个连接服务器失败转移 根据每个服务器的特点分配连接进程数  Oracle认证 开发技术认证 Java认证 数据库开发语言SQL和PL/SQL认证 数据库技术认证 OCM【大师】 OCP【专家】 OCA【初级】 中间件技术认证 OracleServer认证，WEB服务器认证 专业领域技术认证 ERP CRM HR OA  版本 Oracle11g 用jdk6 8i 9i 10i # i 是internet 11g # g 是grid网格(一个请求多个服务器运行) 12c # cloud  端口 1521(lisener服务的端口号（停了以后再开会变）) netstat -a  权限 系统权限：创建数据库，创建用户 对象权限：表操作 sys create database权限 system 没有create database权限 scott hr 角色 # 超管以角色进入，普通用户输入用户名密码 dba dbaoperator  SQL99标准（不区分大小写） PLSQL是Oracle对SQl99标准的扩展 结构代查询语言 DML select,insert,update,delete DDL create table,alter table, drop table DCL grant select any table to scott, revoke select any select from scott TCL(老师编的) commit, rollback,rollback to savepoint  原理 oracle总体结构 1.</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>http://shenwenqing.com/series/db/mysql/</link>
      <pubDate>Thu, 11 Oct 2018 15:37:48 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/db/mysql/</guid>
      <description>工具软件  mysql database mysql cluster 创建集群，配置复杂 mysql cluster manager cluster帮助软件，配置简单 mysql workbench 数据库建模工具 mysql utilities 提供一组命令行工具用于维护和管理 MySQL 服务器  端口  3306  包括  管理工具 (克隆、复制、比较、差异、导出、导入) 复制工具 (安装、配置) 一般工具 (磁盘使用情况、冗余索引、搜索元数据) mysql enterprise monitor documentation mysql enterprise monitor connector mysql enterprise monitor service manager mysql enterprise monitor agent mysql enterprise backup mysql connector  引擎  XtraDB MyISAM InnoDB  命令 mysql --max-relay-logs-size=300 # 中继日志大小(sql语句数) --relay-log-purge={0|1} # 中继日志自动清空 --relay-log-space-limit=0 # 限制中继日志大小,0表示无限制 services.</description>
    </item>
    
    <item>
      <title>Postgres</title>
      <link>http://shenwenqing.com/series/db/postgres/</link>
      <pubDate>Thu, 11 Oct 2018 15:34:29 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/db/postgres/</guid>
      <description>命令 initdb --locale en_US.UTF-8 -D &#39;data&#39; postgres -D data # -p 6543 pg_ctl -D data -l a.log start postmaster # -D /data psql -d postgres # 默认创建的数据库，用户名为当前用户名 ＃ -h localhost -p 5432 -d dbname 用户名 密码 # -f 导入sql命令文件, 或者在末尾加 &amp;lt; a.sql 来导入 # -L 导出日志文件 pg_dump -f a.sql -i -C -E UTF8 -n public -h localhost # 导出数据库 # -a 导出某表 createdb # -hlocalhost -Upostgres -O 用户名 数据库名 # 创建数据库并指定 owner dropdb # -U user dbname 元命令 \?</description>
    </item>
    
    <item>
      <title>Heartbeat</title>
      <link>http://shenwenqing.com/series/architecture/heartbeat/</link>
      <pubDate>Thu, 11 Oct 2018 15:32:51 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/heartbeat/</guid>
      <description> 2.0模块  heartbeat: 节点间通信检测模块 ha-logd: 集群事件日志服务 CCM(Consensus CLuster Membership): 集群成员一致性管理模块 LRM(Local Resource Manager): 本地资源管理模块 Stonith Daemon: 使出现问题的节点从集群资源中脱离 CRM(Cluster Resource management): 集群资源管理模块 Cluster policy engine: 集群策略引擎 用于实现节点与资源之间的管理与依赖关系 Cluster transition engine: 集群转移引擎  3.0拆分之后的组成部分  Heartbeat: 负责节点之间的通信 Cluster Glue: 中间层，关联Heartbeat 与 Pacemaker,包含LRM 与 stonith Resource Agent: 控制服务启停，监控服务状态脚本集合，被LRM调用 Pacemaker: 也就是曾经的CRM，包含了更多的功能 管理接口: crm shell 一个使用ajax web 的web窗口 hb_gui图形工具 DRBD-MC, 一个基于java的工具  版本差异  与1.x相比，2.1.x版本变化 保留原来所有功能 自动监控资源 对各资源组进行独立监控 同时监控系统负载 自动切换到负载低的node上  </description>
    </item>
    
    <item>
      <title>Lvs</title>
      <link>http://shenwenqing.com/series/architecture/lvs/</link>
      <pubDate>Thu, 11 Oct 2018 15:31:54 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/lvs/</guid>
      <description>介绍 第四层开始负载(可以建立到三层负载) 第四层负载 socket进必须连lvs  模式  tun # lvs负载均衡器将请求包发给物理服务器，后者将应答包直接发给用户 net # 请求和应答都经过lvs dr # 不要隧道结构的tun  使用 DR模式 centos6 yum install-y gcc gcc-c++ makepcre pcre-devel kernel-devel openssl-devel libnl-devel popt-devel modprobe -l |grep ipvs # 检查内核是否集成 echo &amp;quot;1&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_forward # 开启路由转发 安装ipvsadm http://www.linuxvirtualserver.org/software/kernel-2.6/ipvsadm-1.26.tar.gz 安装keepalived http://www.keepalived.org/software/keepalived-1.2.7.tar.gz ./configure --prefix=/usr/local/keepalived cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/ cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/ mkdir /etc/keepalived/ cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/ cp /usr/local/keepalived/sbin/keepalived /usr/sbin/ o-&amp;gt; 配置文件/etc/keepalived/keepalived.conf ! Configuration File forkeepalived global_defs { notification_email { test@sina.</description>
    </item>
    
    <item>
      <title>Iscsi</title>
      <link>http://shenwenqing.com/series/architecture/iscsi/</link>
      <pubDate>Thu, 11 Oct 2018 15:31:36 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/iscsi/</guid>
      <description> 存储的概念和术语  scsi: 小型计算机系统接口(Small Computer System Interface) fc: 光纤通道(Fibre channel) das: 直连式存储(Direct-Attached Storage) nas: 网络接入存储(Network-Attached Storage) san: 存储区域网络(Storage Area Network) 连接设备: 路由, 光纤交换机, 集线器(hub) 接口: scsi fc 通信协议: ip scsi iscsi: internet scsi 优点 可以网络传输 服务器数量无限 在线扩容．动态部署 架构 控制器架构: 专用数据传输芯片．专用RAID数据校验芯片．专用高性能cache缓存和专用嵌入式系统平台 iscsi连接桥架构: 前端协议转换设备(硬件) 后端存储(scsi磁盘阵列．fc存储设备) pc架构 存储设备搭建在pc服务器上，通过软件管理成iscsi, 通过网卡传输数据 实现 以太网卡 + initiator软件 toe网卡 + initiator软件 iscsi HBA卡 iscsi系统组成 iscsi initiator 或　iscsi hba iscsi target 以太网交换机 一台或多台服务器  </description>
    </item>
    
    <item>
      <title>Protobuf</title>
      <link>http://shenwenqing.com/series/architecture/protobuf/</link>
      <pubDate>Thu, 11 Oct 2018 15:21:36 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/protobuf/</guid>
      <description> 命令  protoc -I. -I-I$GOPATH/src --go_out=plugins=grpc:. * # -I import目录 protoc --grpc-gateway_out=.  插件 安装 # go build 出protoc-gen-go后，放入go/bin下 protoc-gen-go # 编译proto文件 protoc-gen-grpc-gateway # http服务  </description>
    </item>
    
    <item>
      <title>Hexo</title>
      <link>http://shenwenqing.com/series/backend/hexo/</link>
      <pubDate>Thu, 11 Oct 2018 15:20:06 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/hexo/</guid>
      <description> 介绍  简单轻量，基于node的静态博客框架 可以部署在自己node服务器上，也可以部署在github上  目录结构  scaffolds # 脚手架 scripts # 写文件的js, 扩展hexo功能 source # 存放博客正文内容 _drafts # 草稿箱 _posts # 文件箱 themes # 皮肤 _config.yml # 全局配置文件 db.json # 静态常量  使用  npm install -g hexo hexo version hexo init nodejs-hexo cd nodejs-hexo &amp;amp;&amp;amp; hexo server hexo new 新博客 # 产生 source/_posts/新博客.md hexo server # 启动server hexo generate # 静态化处理 github中创建一个项目nodejs-hexo, 在_config.yml中找到deploy部分，设置github项目地址 hexo deploy # 部署以后，分支是gh-pages, 这是github为web项目特别设置的分支 上github，点settings找到github pages, 找到自己发布的站点 无法访问静态资源 设置域名 申请域名 dnspod 中 绑定ip  </description>
    </item>
    
    <item>
      <title>Jekyll</title>
      <link>http://shenwenqing.com/series/backend/jekyll/</link>
      <pubDate>Thu, 11 Oct 2018 15:19:43 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/jekyll/</guid>
      <description>介绍  ruby静态站点生成器，根据网页源码生成静态文档文件 提供模板、变量、插件等功能 生成的站点可以直接发布到github上  使用  curl http://curl.haxx.se/ca/cacert.pem -o cacert.pem # 移动到ruby安装目录 安装devkit gem install jekyll git clone https://github.com/plusjade/jekyll-bootstrap.git jekyll # 下载jekyll-bootstrap模版 cd jekyll &amp;amp;&amp;amp; jekyll serve rake post title = &#39;Hello&#39; # 生成文章 ## 编辑_posts下面生成的文章 修改convertible.rb文件编码为utf-8 jekyll serve 发布到github github上创建新仓库 git remote set-url origin git@新仓库 git add . git commit -m &#39;new&#39; git push origin master git branch gh-pages # 新建一个分支，用于发布项目 git checkout gh-pages 修改_config.yml production_url: http://outrun.</description>
    </item>
    
    <item>
      <title>Cxf</title>
      <link>http://shenwenqing.com/series/backend/cxf/</link>
      <pubDate>Thu, 11 Oct 2018 15:19:10 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/cxf/</guid>
      <description>常识  自己内部整合spring(但是不耦合)  支持的协议  soap1.1/1.2 post/http restful http  使用  导入cxf包 方法1 # 不支持注解 String address=&amp;quot;http://localhost:8888/hello&amp;quot;; ServerFactoryBean factoryBean=new ServerFactoryBean(); factoryBean.setAddress(address); factoryBean.setServiceBean(new MyWS()); factoryBean.create(); 方法2 # 支持注解,wsdl文件中类型不再单独schema文件 ServerFactoryBean factoryBean = new JaxWsServerFactoryBean # java and xml web service 日志 # 记录握手信息(访问wsdl文件) ## 看日志记录得到 soap serverFactoryBean.getInInterceptors().add(new LoggingInInterceptor()); serverFactoryBean.getOutInterceptors().add(new LoggingOutInterceptor());  整合spring  o-&amp;gt; cxf2.4.4.jar/schemas/jaxws.xsd中找到命名空间&amp;quot;http://cxf.apache.org/jaxws&amp;quot; o-&amp;gt; 配置applicationContext.xml，加入cxf的命名空间http://cxf.apache.org/jaxws,schema地址为http://cxf.apache.org/schemas/jaxws.xsd。 并且在eclipse中配置schema约束文件的路径 # 该xsd约束文件的url地址用的是包地址,不规范 o-&amp;gt; applicationContext.xml中配置 &amp;lt;bean id=&amp;quot;studentService&amp;quot; class=&amp;quot;test.spring.StudentServiceImpl&amp;quot;/&amp;gt; # 用于：自身调用，被spring引用 &amp;lt;jaxws:server serviceClass=&amp;quot;test.spring.StudentService&amp;quot; address=&amp;quot;/student&amp;quot;&amp;gt; # address配置服务的名称即可(web.</description>
    </item>
    
    <item>
      <title>Dwr</title>
      <link>http://shenwenqing.com/series/backend/dwr/</link>
      <pubDate>Thu, 11 Oct 2018 15:18:33 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/dwr/</guid>
      <description>介绍  java函数通过ajax映射到前端js调用  使用 ajax框架 1.导入jar包 dwr.jar 2.web-inf/下的配置文件 web.xml文件 &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;dwr-invoker&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;org.directwebremoting.servlet.DwrServlet&amp;lt;/servlet-class&amp;gt; # 固定写法 &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;debug&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;scriptCompressed&amp;lt;/param-name&amp;gt; # 允许在javascript中执行 &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; # web工程启动时加载 &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;dwr-invoker&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/dwr/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; dwr.xml文件 &amp;lt;dwr&amp;gt; &amp;lt;allow&amp;gt; &amp;lt;create creator=&amp;quot;new&amp;quot; javascript=&amp;quot;DWRUserAccess&amp;quot;&amp;gt; # 生成js文件的名（页面中引用） &amp;lt;param name=&amp;quot;class&amp;quot; value=&amp;quot;outrun.dwr.DWRUserAccess&amp;quot; /&amp;gt; # 曝露的类 &amp;lt;/create&amp;gt; &amp;lt;convert converter=&amp;quot;bean&amp;quot; match=&amp;quot;outrun.dwr.User&amp;quot; /&amp;gt; # 注册实体类，可以在js中进行实例化 &amp;lt;/allow&amp;gt; &amp;lt;/dwr&amp;gt; 3.写outrun.dwr.DWRUserAccess中的方法 4.页面调用 test.html &amp;lt;script src=&amp;quot;/outrun/dwr/engine.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;/outrun/dwr/util.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;/outrun/dwr/interface/DWRUserAccess.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;SCRIPT LANGUAGE=&amp;quot;JavaScript&amp;quot;&amp;gt; DWRUserAccess.方法(参数,执行完运行的js函数) # 参数可以是一个map,如 var userMap = {}; userMap.</description>
    </item>
    
    <item>
      <title>Jbpm</title>
      <link>http://shenwenqing.com/series/backend/jbpm/</link>
      <pubDate>Thu, 11 Oct 2018 15:17:37 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/jbpm/</guid>
      <description>常识  适用对象：业务逻辑不复杂，业务流程会变化 # s2sh适合业务逻辑复杂，但是业务流程不会变化的项目 jbpm封装hibernate 包含对象 模型 实例（由活动组成，包括活动、箭头等） 任务（需要人办理的活动）  使用 myeclipse添加jbpm xml画图插件 MyEclipse -&amp;gt; MyEclipse Configuration Center -&amp;gt; Software -&amp;gt; Browse Software(add site) -&amp;gt; add from archive file找到jbpm-gpd-site.zip,取名为jbpm4.4 -&amp;gt; Browse Software(Personal Sites -&amp;gt; jbpm4.4下8个选项)右键add to Profile -&amp;gt; 右下角apply changes -&amp;gt; 重启myeclipse -&amp;gt; 新建文件中找到新建jbpm xml文件 画图 test.jpdl.xml文件用jbpm工具打开 打开Properties视图 配置 jbpm.hibernate.cfg.xml # mysql方言要配置InnoDB的方言（因为jbpm建表时对表指定了type=InnoDB约束） 配置hibernate的5个映射文件（导入的jbpm.jar包中有） &amp;lt;mapping resource=&amp;quot;jbpm.repository.hbm.xml&amp;quot; /&amp;gt; &amp;lt;mapping resource=&amp;quot;jbpm.execution.hbm.xml&amp;quot; /&amp;gt; &amp;lt;mapping resource=&amp;quot;jbpm.history.hbm.xml&amp;quot; /&amp;gt; &amp;lt;mapping resource=&amp;quot;jbpm.task.hbm.xml&amp;quot; /&amp;gt; &amp;lt;mapping resource=&amp;quot;jbpm.identity.hbm.xml&amp;quot; /&amp;gt; jbpm.</description>
    </item>
    
    <item>
      <title>Shiro</title>
      <link>http://shenwenqing.com/series/backend/shiro/</link>
      <pubDate>Thu, 11 Oct 2018 15:12:44 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/shiro/</guid>
      <description>功能 Authenticator # SecurityManager继承Authenticator public AuthenticationInfo authenticate(AuthenticationToken authenticationToken) throws AuthenticationException; permission 概念 subject resource permission role 隐式角色 显示角色 配置 shiro.ini [users] zhang=123, role1, role2 # 用户名=密码, 角色1, 角色2 判断角色 o-&amp;gt; subject.hasRole(&amp;quot;admin&amp;quot;); o-&amp;gt; @RequiresRoles(&amp;quot;admin&amp;quot;) @RequiresRoles(value={“admin”, “user”}, logical= Logical.AND) # 表示当前Subject需要角色admin和user。 o-&amp;gt; &amp;lt;shiro:hasRole name=&amp;quot;admin&amp;quot;&amp;gt;&amp;lt;/shiro:hasRole&amp;gt; 权限注解 @RequiresAuthentication # 表示当前Subject已经通过login进行了身份验证；即Subject. isAuthenticated()返回true。 @RequiresUser # 表示当前Subject已经身份验证或者通过记住我登录的。 @RequiresGuest # 表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。 @RequiresPermissions (value={“user:a”, “user:b”}, logical= Logical.OR) # 表示当前Subject需要权限user:a或user:b。 credential 散列 String str = &amp;quot;hello&amp;quot;; String salt = &amp;quot;123&amp;quot;; //内部使用MessageDigest String simpleHash 密码生成工具 //输入明文密码得到密文密码 String encryptPassword(Object plaintextPassword) throws IllegalArgumentException; //匹配用户输入的token的凭证（未加密）与系统提供的凭证（已加密） boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info); filter NameableFilter ＃根据名字找到相应的拦截器实例 OncePerRequestFilter # 控制开启、关闭拦截器实例 ShiroFilter # 安全控制 AdviceFilter # aop preHandle # 前置增强 postHandle # 后置增强 afterCompletion # 后置最终增强(异常也执行，相当于finally的概念) PathMatchingFilter # 匹配请求路径 AccessControlFilter # 允许或拒绝访问，拒绝时如何处理 jsp标签 &amp;lt;%@taglib prefix=&amp;quot;shiro&amp;quot; uri=&amp;quot;http://shiro.</description>
    </item>
    
    <item>
      <title>Mybatis</title>
      <link>http://shenwenqing.com/series/backend/mybatis/</link>
      <pubDate>Thu, 11 Oct 2018 15:09:36 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/mybatis/</guid>
      <description>使用 1.导入ibatis jar包 2.配置文件 SqlMap.properties # 属性名可以修改 driver=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@127.0.0.1:1521:orcl username=root password=root SqlMapConfig.xml # 总配置文件 &amp;lt;sqlMapConfig&amp;gt; &amp;lt;properties recource=&amp;quot;SqlMap.properties&amp;quot;/&amp;gt; &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;&amp;gt; &amp;lt;dataSource type=&amp;quot;SIMPLE&amp;quot;&amp;gt; &amp;lt;property value=&amp;quot;${driver}&amp;quot; name=&amp;quot;JDBC.Driver&amp;quot;/&amp;gt; &amp;lt;property value=&amp;quot;${url}&amp;quot; name=&amp;quot;JDBC.ConnectionURL&amp;quot;/&amp;gt; &amp;lt;property value=&amp;quot;${username}&amp;quot; name=&amp;quot;JDBC.Username&amp;quot;/&amp;gt; &amp;lt;property value=&amp;quot;${password}&amp;quot; name=&amp;quot;JDBC.Password&amp;quot;/&amp;gt; &amp;lt;sqlMap resource=&amp;quot;Student.xml&amp;quot;/&amp;gt; Student.xml # 映射xml文件 &amp;lt;sqlMap&amp;gt; &amp;lt;typeAlias alias=&amp;quot;Student&amp;quot; type=&amp;quot;com.Student&amp;quot;/&amp;gt; &amp;lt;select id=&amp;quot;selectAllStudent&amp;quot; resultClass=&amp;quot;Student&amp;quot;&amp;gt; select * from Student 辅助类Student.java # 要求有无参构造方法 private sid = 0; private String name = null; private String major = null; private Date birth = null; private float score = 0; 3.</description>
    </item>
    
    <item>
      <title>Struts2</title>
      <link>http://shenwenqing.com/series/backend/struts2/</link>
      <pubDate>Thu, 11 Oct 2018 14:49:08 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/struts2/</guid>
      <description>介绍 就是一个利用filter拦截所有请求，利用反射转发请求与响应数据的过滤器。它通过配置文件来设置请求地址与处理类之间的数据流转 struts2中处理请求的类（Action类）是非单例的，所以效率比较低  思想 Action类中的无侵入设计（新技术中不出现旧技术）：map代替了作用域 ActionContext actionContext = actionContext.getContext() actionContext.getApplication() actionContext.getSession() 好处 map是java中的api，不出现旧技术 测试方便（ servlet不能测试，只能发布测试） # 注意：Action类中用到作用域map的方法也不能测试  结构 apps: 例子程序 docs:帮助文件 lib:程序包 src:源码  使用 要求 jdk5 jsp2 servlet api2.4 1.导入核心的8个包 struts2-core-2.3.1.1.jar # struts的过滤器 xwork-core-2.3.1.1.jar # 验证工具 freemarker-2.3.18.jar # 标签 javassist-3.11.0.GA.jar # 动态代理 commons-fileupload-1.2.2.jar commons-io-2.0.1.jar # 文件处理 commons-lang-2.5.jar # 基础包 ognl-3.0.3.jar # 表达式语言 2.web.xml文件中配置过滤器 &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;struts&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&amp;lt;/filter-class&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;struts&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; 3.写jsp页面，get或post路径为struts2的名称空间、扩展名，被配置的struts2过滤器处理 3.写Action类（继承ActionSupport类） 4.配置src/struts.xml文件与src/struts.properties文件，映射类、方法等到请求路径，映射返回字符串到任何方式  核心包：8个 struts2-core-2.</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>http://shenwenqing.com/series/backend/spring/</link>
      <pubDate>Thu, 11 Oct 2018 14:38:14 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/spring/</guid>
      <description>下载  spring现在maven或gradle发布 官方引用方式 http://projects.spring.io/spring-framework/ maven发布地址 http://maven.springframework.org/release/org/springframework/spring/  特点 spring 是轻量级的，模块形式，无侵入或少侵入设计的（6个模块） dao orm aop jee web core ioc 动态代理 机制 bean或注解声明的没有接口的类：CGlib生成动态代理 有接口的类:Proxy生成代理，但是生成的类是接口类型 # cglib项目并入到spring项目中来了 ##　Proxy生成动态代理要求被代理的类必须有接口 结论 进行了事务包装（动态代理过的）有接口的类，注入（service实例）时，只能用接口接收 spring 3.2新特性 基于注解的注入测试类@RunW.. 为什么spring? 解耦 用spring 容器提供服务 单例 aop服务（权限拦截等） 辅助类等  功能  1.javaBean 的创建、关系与设置 2.声明式事务处理 3.定时器，远程调用  术语  pojo: pure old java object ,不实现任何接口 ioc inversion of control 控制反转（spring创建一个类的实例 ，注入到当前类中） di dependence injection 依赖注入  整合 spring boot spring integration  spring boot 用于在maven中快速构建spring项目  使用 1.</description>
    </item>
    
    <item>
      <title>Hibernate</title>
      <link>http://shenwenqing.com/series/backend/hibernate/</link>
      <pubDate>Thu, 11 Oct 2018 11:47:56 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/hibernate/</guid>
      <description>基本概念：  o-&amp;gt; hibernate 相当于dao层，层次划分中是访问层，解决增、删、改、查、批处理五个问题 o-&amp;gt; hibernate实现orm(对象关系映射标准，完全面向对象编程思想) DBUtils与i/mybatis 与hibernate 是同样的，同样实现的是orm标准 它们的区别在于 hibernate中不写sql语句 ibatis中写少量sql语句 DBUtils中写sql语句 它们的另一个相同点是 底层全都是jdbc o-&amp;gt; 结构对应 javabean中的 类，对象，属性 数据库中的 表，记录，字段 o-&amp;gt; hql hibernate query language，hibernate自己的sql语言，需要使用antlr jar包中的方法内部转换成sql语言才能使用 o-&amp;gt; 正向工程：JavaBean生成表，反向工程：表生成JavaBean  优点  1.完全面向对象编程思想，无sql 2.减少代码 3.控制数据库访问，降低访问数据库的频率（第一次访问后，数据存储在内存的缓存中），提升效率 4.hibernate具有独立性（访问层随时可以更换）  特性  不写hbm.xml映射文件，而是基于注解的验证 hibernate3.6之后可以基于注解对javaBean的数据进行验证（jsr303标准）  目录  . # hibernate程序包 documentation # 文档 lib # 所有依赖包 project # 源码文件  加载顺序  后面的覆盖前面的 hibernate.properties中的配置被覆盖 # 因为该文件中的配置在new Configuration() 的时候就加载，而之后的xml配置文件是调用configuration.addResource()的方法加载的，新加载的配置覆盖了原来的配置  使用 1.导入核心包(10 + 1个) hibernate3.</description>
    </item>
    
    <item>
      <title>Socketio</title>
      <link>http://shenwenqing.com/series/backend/socketio/</link>
      <pubDate>Thu, 11 Oct 2018 11:42:33 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/socketio/</guid>
      <description>介绍  socket.io: 基于任何浏览器, mobile设备的&amp;quot;webSocket&amp;quot;  安装  npm install socket.io  使用  var socketIo = require(&#39;socket.io&#39;); socketIo.listen(app).on(&#39;connection&#39;, function (socket) { # require(&#39;socket.io&#39;)(app); ## var io = require(&#39;socket.io&#39;)(80); socket.emit(&#39;news&#39;, { hello: &#39;world&#39; }); socket.on(&#39;my other event&#39;, function (data) { console.log(data); }); });  api server io.on(&#39;connection&#39;, function(socket){}); io.on(&#39;disconnect&#39;, function(){}); socket.on(&#39;message&#39;, function(msg){}); client-js socket = io.connect(url); socket.on(&#39;&#39;, function(json){}); socket.send(json); io on(&#39;connection&#39;, function(socket){}); # disconnect socket on(&#39;disconnect&#39;, function(){ }); socket.on(&#39;say to someone&#39;, function(id, msg){ socket.</description>
    </item>
    
    <item>
      <title>Tornado</title>
      <link>http://shenwenqing.com/series/backend/tornado/</link>
      <pubDate>Thu, 11 Oct 2018 11:42:13 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/tornado/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Nodejs</title>
      <link>http://shenwenqing.com/series/backend/nodejs/</link>
      <pubDate>Thu, 11 Oct 2018 10:33:48 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/nodejs/</guid>
      <description>特点  commonJs规范 # 用于构建模块 javascript书写(v8引擎) # 关键字1 # 原因1: 成熟的事件驱动模式 ## 原因2: 没有i/o库, 没有历史包袱 ## 原因3: v8性能好 # js设计之初就可以运行在后端 单线程 # 关键字2 非阻塞io(non-blocking i/o model) # 关键字3 ## io与数据处理分离（所以必须异步） ## 线程池结合event-driven实现 事件驱动(event-driven) # 关键字4 ## event loop[while(true)] -&amp;gt; watcher -&amp;gt; handles ### event loop每一周询问多个watcher是否有事件 ### http模块就是启动了一个watcher,所以执行后进程不结束 # 注: event loop中没有watcher时进程退出 ### 其它watcher有 timer, fs, udp/req, process ### watcher产生事件后, event loop取到并执行其handle(回调函数) ## 不同操作系统中event driven的实现: ### windows: IOCP, Linux: epoll, Mac:kqueue 异步操作 # 书写难度的解决 ## go语言有协程(coroutine)而node.</description>
    </item>
    
    <item>
      <title>Hadoop</title>
      <link>http://shenwenqing.com/series/backend/hadoop/</link>
      <pubDate>Thu, 11 Oct 2018 10:05:41 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/hadoop/</guid>
      <description>发展 google gfs mapReduce # 并行计算框架 big-table hadoop1.0 hdfs mapReduce hadoop2.0 hdfs # Hadoop Distributed File System　yarn # Yet Another Resource Negotiator资源管理调度系统 # 在hdfs上运行计算框架(如mapReduce, storm, spark)  原理 hdfs 模块 client nameNode # 用于注册文件 ## 2.0后可以有多个nameNode metadata # 数据的描述信息 dataNode # 数据在dataNode间水平传递 关系 client rpc nameNode 结构 metadata /test/a.log, 3, {blk_1,blk_2}, [{blk_1:[h0,h1,h3]},{blk_2:[h0,h2,h4]}] mapReduce Map: 切分，并行计算 Reduce: 从map中取多个计算结果，进行合并  组件 ambari # 安装、部署、配置和管理 hdfs # 分布式文件系统 hive # 数据仓库 pig # 数据流处理 mahout # 数据挖掘 mapreduce flume # 日志收集 hbase # 实时分布式, bigtable数据库 sqoop # etl zookeeper  框架 CDH cloudera HDP hortonworks data platform 应用框架 sqoop 在hdfs(hive)与关系型数据库之间数据相互转移 phoenix 介绍 打造更快的sql查询，面向hbase与hdfs之上的其它nosql数据库 特征 通过jdbc进行交互 shark 介绍 hive on spark 特点 并行job处理比mapReduce快100倍 ganglia 分布式监控系统，用于监视和显示集群中节点的各种状态信息，如cpu, mem, 硬盘利用率, i/o负载, 网络流量等，历史数据生成曲线图，通过php页面显现。 存储框架 hive 功能 将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为mapReduce运行。 缺点 底层使用mapReduce引擎，是一个批处理过程，难以满足查询的交互性 hbase 特征 分布式的，面向列的开源nosql数据库，列可以动态增加 基于hadoop的bigTable 不同于一般关系数据库，是一个适合于非结构化数据存储的数据库 自动切分数据 并发读写 缺点 只能按照row key来查询 master宕机，整个系统挂掉 计算框架 mr 离线计算框架 spark 介绍 内存计算框架 apache托管UC Berkeley AMP lab开源的类hadoop 通用并行框架 mapreduce中间输出结果可以保存在内存中，不再需要读写hdfs 是scala语言实现的 特点 准实时，收集成rdd后处理 不支持事务 技术 spark rdd spark streaming spark sql drill google dremel 的开源版本 storm 介绍 实时视图计算框架 纯实时 支持事务 特点 结合kafka impala 介绍 实时视图计算框架 纯实时 支持事务 特点 结合kafka  部署 本地模式 伪分布模式(学习用) 集群模式 例子 软件结构 0 jdk, hadoop NameNode, DFSZKFailoverController 1 jdk, hadoop NameNode, DFSZKFailoverController 2 jdk, hadoop ResourceManager 3 jdk, hadoop, zookeeper DataNode, NodeManager, JournalNode, QuorumPeerMain 4 jdk, hadoop, zookeeper DataNode, NodeManager, JournalNode, QuorumPeerMain 5 jdk, hadoop, zookeeper DataNode, NodeManager, JournalNode, QuorumPeerMain zookeeper 配置conf/zoo.</description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>http://shenwenqing.com/series/backend/elasticsearch/</link>
      <pubDate>Thu, 11 Oct 2018 10:01:22 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/elasticsearch/</guid>
      <description>介绍  分布式实时lucene  使用  ./bin/elasticsearch curl http://localhost:9200  命令  elasticsearch -Ecluster.name=my_cluster_name -Enode.name=my_node_name  概念存储  index type # document中加_type field实现 # 所以不同type中的field在index要唯一，否则冲突 # 对field排序会载入所有type的document document # 对应lucene中的key value倒排文档 # 对就一个请求的json对象 field mapping # 定义type的field，映射json到document field  设置 config/elasticsearch.yml action.auto_create_index: -l*, +z* # 自动创建，以z开头和非l开头的索引 action.destructive_requires_name: true # 允许通配删index http.cors.enables: true http.cors.allow-origin: &amp;quot;*&amp;quot; cluster.name: c1 node.name: n1 node.master: true node.data: true transport.host: localhost transport.tcp.port: 9300 network.host: 0.0.0.0 # 修改es监听地址，别的机器也可以访问。同时设置bind_host和publish_host # 需要设置transport.</description>
    </item>
    
    <item>
      <title>Lucene</title>
      <link>http://shenwenqing.com/series/backend/lucene/</link>
      <pubDate>Thu, 11 Oct 2018 09:59:44 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/lucene/</guid>
      <description>原理 block k-d tree 倒排索引 词典 排序数组 # 为了二分查找 # 实现简单，性能差 哈希表 # 性能好，占内存大 跳跃表 # 内存小且可调节, 模糊查询不好 B/B+树 # 磁盘索引 ，更新方便，检索慢 trie树 # 效率与字符串长度有关，只适合做英文词典 dat # 可做中文词典，内存占用小 fst # 共享前缀，内存占用小，要求输入有序，不易更新 内存存前缀索引、磁盘存后缀词块 倒排表 正向文件 # 行式存储，原始文档 doc-values # 列式存储，文档号到值的映射 文件指纹  概念  index # 一个倒排表，对应一个目录 segment # index的存储单元，包含多个文档 document # 创建单位 field # 文档里的键值对 term # 分词后的字符串 analyzer tokenizer # 切分文本到索引单元 tokenfilter # 对token预处理  常识  特性 索引 高亮 命中率排序 分词 与数据库的区别：数据库注重存储、全文检索注重查询 其它搜索：多媒体搜索 索引库(文件夹 或 内存中)： 只存储了商品的基本信息 索引库与数据库定时同步 索引库 -&amp;gt; document -&amp;gt; field # field是键值对,值只能存数据 同步 IndexWriter:addDocumnet(),delteDocument(),updateDocument() 查询 IndexSearch:search(),get() Field的内部结构 # 不存不索引会报错 Store:控制此Field字段是否存储到索引库中 Index:是否建立索引（索引不区分大小写,过滤词不创建索引） NO:不建立索引，可以通过field的key查到，但是不能通过关键字查询到 NOT_ANALYZED:建立索引，但是不分词 ANALYZEd:建立索引又分词  使用到的对象  Directory Analyzer TokenStream tokenStream = analyzer.</description>
    </item>
    
    <item>
      <title>Lua</title>
      <link>http://shenwenqing.com/series/pl/lua/</link>
      <pubDate>Thu, 11 Oct 2018 09:50:15 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/lua/</guid>
      <description> 介绍  lua语言，来实现逻辑。 c/c++来实现功能 eclipse ldt 来开发（cdt 再安装 ldt 使用更方便）  使用  lua Hello.lua # 执行脚本 luac Hello.lua # 编译字节码 #-&amp;gt; lua luac.out  语法  -- # 注释 num = 10 # 定义  </description>
    </item>
    
    <item>
      <title>Cocos2dx</title>
      <link>http://shenwenqing.com/series/frontend/cocos2dx/</link>
      <pubDate>Thu, 11 Oct 2018 09:49:36 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/cocos2dx/</guid>
      <description> 使用  ./create_project.py -project Hello -package com.plter.hello -language lua # 生成多种平台的项目 换ldt来开发，删除Resources下面除fonts文件夹的所有文件，修改入口为main.lua  目录结构  Classes/AppDelegate.cpp中有加载 Hello.lua 作为入口 Resources/hello.lua 来运行  </description>
    </item>
    
    <item>
      <title>Extjs</title>
      <link>http://shenwenqing.com/series/frontend/extjs/</link>
      <pubDate>Thu, 11 Oct 2018 09:48:40 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/extjs/</guid>
      <description> 介绍  2.0之前是免费的，但有内在泄漏总是 GPLv3版本后收费  Sencha  1.是ExtJS、jQTouch(一个用于手机浏览器的jquery插件) 以及 Raphael（一个网页上绘制矢量图形的js库） 三个项目合并而成的一个开源项目。 2.Sencha Touch 是全球领先的应用程序开发框架，其设计旨在充分 利用HTML5、CSS3 和Javascript 来实现最高级别的功能、灵活性和优化。 Sencha Touch 是针对下一代具有触摸屏设备的跨平台框架。  </description>
    </item>
    
    <item>
      <title>Bootstrap</title>
      <link>http://shenwenqing.com/series/frontend/bootstrap/</link>
      <pubDate>Thu, 11 Oct 2018 09:39:11 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/bootstrap/</guid>
      <description>介绍 在jquery基础上的组件框架  移动 &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&amp;quot;&amp;gt;  css 全局 container # div, 唯一包裹容器 container-fluid # 占全部视口 栅格 # 必须放在row内 col-xs-1 # 适用于大于等于分界点的屏幕 ## 大于12的最后那个col另起一行排列 # xs &amp;lt; 768px 宽度, container 最大宽度: 自动 # sm &amp;gt;= 768px, 750px # md &amp;gt;= 992px, 970px # lg &amp;gt;= 1200px, 1170px col-md-offset-4 # 向右偏移4 col-md-pull-9 # 向后推9, 改变元素的顺序 col-md-push-3 o-&amp;gt; mixin make-row 如 .wrapper {.make-row();} make-xs-column make-sm-column-offset make-sm-column-push make-sm-column-pull  样式 muted # 文本颜色 text-warning text-error text-info text-success text-left # 文本左对齐 text-center text-right text-justify text-nowrap text-lowercase text-uppercase text-capitalize bg-primary # p bg-success bg-info bg-warning bg-danger success # 状态类 # table行颜色, control-group div error danger warning info active has-warning # div元素 # 适用class: control-label, form-control, help-block has-error has-success has-feedback # div, pull-right # 任意元素向右浮动 pull-left navbar-right # 导航条中向右浮动 navbar-left clearfix # 清除浮动 initialism # 缩略语样式, abbr标签 small # small标签的样式 lead # p标签，突出显示 blockquote-reverse # blockquote标签使用, 内容右对齐 disabled # btn, input, 只disable样式 o-&amp;gt; 适用的class radio radio-inline checkbox checkbox-inline o-&amp;gt; 适用的标签 fieldset inline # 行内ul, checkbox center-block # 任意元素, 水平居中 show # 任意元素显示 hidden .</description>
    </item>
    
    <item>
      <title>Webpack</title>
      <link>http://shenwenqing.com/series/frontend/webpack/</link>
      <pubDate>Thu, 11 Oct 2018 09:37:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/webpack/</guid>
      <description>介绍  模块打包  命令  npm i -g webpack npm i css-loader style-loader webpack ./entry.js bundle.js # --progress # --colors # --watch # --module-bind ## jade, &#39;css=style!css&#39; webpack ./entry.js bundle.js --module-bind &#39;css=style!css&#39; webpack # use webpack.config.js npm i webpack-dev-server -g webpack-dev-server # --progress --colors # --hot 热部署 # 启动一个express在8080端口  配置 # webpack.config.js var webpack = require(&#39;webpack&#39;) var merge = require(&#39;webpack-merge&#39;) var path = require(&#39;path&#39;) var HtmlwebpackPlugin = require(&#39;html-webpack-plugin&#39;) var ROOT_PATH = path.</description>
    </item>
    
    <item>
      <title>Grunt</title>
      <link>http://shenwenqing.com/series/frontend/grunt/</link>
      <pubDate>Thu, 11 Oct 2018 09:37:01 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/grunt/</guid>
      <description>介绍  压缩js代码 合并js文件 单元测试 js代码检查 监控文件修改重启任务  命令  grunt dist # 重新生成dist目录，将编译后的css,js放入 grunt watch # 监测less源码文件改动，自动重新编译为css grunt test # 运行测试用例 grunt docs # 编译并测试 grunt 重新构建所有内容并运行测试用例  安装  # grunt模块以grunt-contrib-开头 npm i -g grunt grunt-init grunt-cli  例子 o-&amp;gt; // Gruntfile.js module.exports = function (grunt) { grunt.loadNpmTasks(&#39;grunt-contrib-clean&#39;) grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;) grunt.loadNpmTasks(&#39;grunt-contrib-jshint&#39;) grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;) grunt.loadNpmTasks(&#39;grunt-replace&#39;) grunt.initConfig({ pkg: grunt.file.readJSON(&#39;package.json&#39;), jshint: { all: { src: [&#39;Gruntfile.js&#39;, &#39;src/**/*.js&#39;, &#39;test/**/*.js&#39;], options: { jshintrc: &#39;jshint.json&#39; } } }, clean: [&#39;lib&#39;], concat: { htmlhint: { src: [&#39;src/core.</description>
    </item>
    
    <item>
      <title>Gulp</title>
      <link>http://shenwenqing.com/series/frontend/gulp/</link>
      <pubDate>Thu, 11 Oct 2018 09:36:17 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/gulp/</guid>
      <description> 介绍  自动化构建项目工具  使用 安装 npm install --global gulp # npm install --save-dev gulp // gulpfile.js 在项目根目录 var gulp = require(&#39;gulp&#39;); gulp.task(&#39;default&#39;, function () { // 默认任务代码 }) 命令 shell&amp;gt; gulp # gulp &amp;lt;task&amp;gt; &amp;lt;othertask&amp;gt;  插件 gulp-dom-src 合并src, 改写html gulp-if gulp-useref gulp-usemin gulp-htmlreplace google-closure-compiler gulp-add-src gulp-autoprefixer gulp-changed gulp-clean gulp-clean-css gulp-concat gulp-concat-css gulp-consolidate gulp-html-replace # 替换html内容 gulp-htmlmin gulp-imagemin gulp-less gulp-make-css-url-version gulp-minify-css gulp-rev-append gulp-uglify  </description>
    </item>
    
    <item>
      <title>Fis</title>
      <link>http://shenwenqing.com/series/frontend/fis/</link>
      <pubDate>Thu, 11 Oct 2018 09:32:59 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/fis/</guid>
      <description>介绍  npm的形式发布 百度前端工具框架，为前端开发提供底层架构 所有js文件都用模块书写，一个文件一个模块 F.module(name, function(require, exports){}, deps);  安装  npm install -g fis  命令 fis install # 安装模块 fis release # 编译和发布, -h 查看帮助 ## 默认会调整资源引用的相对路径到绝对路径 ### 不想对路径做调整，可以使用spt工具https://github.com/fouber/spt ## --optimize 或 -o 压缩。--md5对不同静态资源生成版本，也可以配置时间戳 ## --dest 或 -d。指定项目发布配置，在执行编译后发布。可以远程发布、发布多个 ## --pack 开启打包处理 ## -omp 简化 --optimize --md5 --pack ## --watch 或 -w 自动监听文件修改，自动编译 ### 该监视考虑了各种嵌入关系, a.css中嵌入了b.css, b修改时会重构这两个文件 ### --live 或 -L 。在-w基础上实现，监视到修改后自动刷新浏览器页面 fis server start # 启动本地调试服务器 ## -p [port] 指定新端口 ## --type node 如果没有java, php环境，指定用node环境启动 fis server stop fis server open # 查看默认产出目录  配置 o-&amp;gt; fis.</description>
    </item>
    
    <item>
      <title>D3</title>
      <link>http://shenwenqing.com/series/frontend/d3/</link>
      <pubDate>Thu, 11 Oct 2018 09:32:00 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/d3/</guid>
      <description> #介绍 数据可视化, 使用svg, css3
使用 node npm install d3 // var d3 = require(&#39;d3&#39;), jsdom = require(&#39;jsdom&#39;); var document = jsdom.jsdom(), svg = d3.select(document.body).append(&#39;svg&#39;); web &amp;lt;script src=&amp;quot;//d3js.org/d3.v3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;d3.version&amp;lt;/script&amp;gt;  d3对象  // 选择器 event mouse select selectAll selection touch touches // 过渡 ease # ease对象 timer flush interpolate # interpolate对象 interpolateArray interpolateHcl interpolateHsl interpolateLab interpolateNumber interpolateObject interpolateRgb interpolateRound interpolateString interpolateTransform interpolateZoom interpolators transition // 数组 ascending bisectLeft bisector bisectRight bisect descending deviation entries extent keys map max mean median merge min nest pairs permute quantile range set shuffle sum transpose values variance zip // 数学 random transform // 请求 csv html json text tsv xhr xml // 格式化 format formatPrefix requote round // 本地化 locale // 颜色 hcl hsl lab rgb // 命名空间 ns // 内部 dispatch functor rebind // 比例尺 scale // 时间 time // 布局 layout // 地理 geo // 几何 geom // 行为 behavior  </description>
    </item>
    
    <item>
      <title>Threejs</title>
      <link>http://shenwenqing.com/series/frontend/threejs/</link>
      <pubDate>Thu, 11 Oct 2018 07:58:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/threejs/</guid>
      <description>介绍 协调程序加载项的类库  使用 var preload = new createjs.LoadQueue(false, &amp;quot;assets/&amp;quot;); var plugin= { getPreloadHandlers: function(){ return{ types: [&amp;quot;image&amp;quot;], callback: function(src){ var id = src.toLowerCase().split(&amp;quot;/&amp;quot;).pop().split(&amp;quot;.&amp;quot;)[0]; var img = document.getElementById(id); return {tag: img}; } } } } preload.installPlugin(plugin); preload.loadManifest([ &amp;quot;Autumn.png&amp;quot;, &amp;quot;BlueBird.png&amp;quot;, &amp;quot;Nepal.jpg&amp;quot;, &amp;quot;Texas.jpg&amp;quot; ]);  api 涉及dom 属性 window.innerWidth window.innerHeight 事件 window.addEventListener(&#39;resize&#39;, onWindowResize, false); function onWindowResize(){ camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); controls.handleResize(); } 三大组件 场景(scene) var scene = new THREE.</description>
    </item>
    
    <item>
      <title>Createjs</title>
      <link>http://shenwenqing.com/series/frontend/createjs/</link>
      <pubDate>Thu, 11 Oct 2018 07:56:33 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/createjs/</guid>
      <description>easeljs 介绍 处理canvas 使用 var stage = new createjs.Stage(&amp;quot;canvasName&amp;quot;); stage.x = 100; stage.y = 100; var text = new createjs.Text(&amp;quot;Hello&amp;quot;, &amp;quot;36px Arial&amp;quot;, &amp;quot;#777&amp;quot;); stage.addChild(text); stage.update();  tweenjs 介绍 处理动画调整和js属性 使用 var circle = new createjs.Shape(); circle.graphics.beginFill(&amp;quot;#FF0000&amp;quot;).drawCircle(0, 0, 50); stage.addChild(circle); createjs.Tween.get(circle, {loop: true}) .wait(1000) .to({scaleX: 0.2, scaleY: 0.2}) .wait(1000) .to({scaleX:1, scaleY:1}, 1000, createjs.Ease.bounceInOut) createjs.Ticker.setFPS(20); createjs.Ticker.addEventListener(&amp;quot;tick&amp;quot;, stage);  soundjs 介绍 简化处理音频 使用 var displayStatus; displayStatus = document.getElementById(&amp;quot;status&amp;quot;); var src = &amp;quot;1.mp3&amp;quot;; createjs.</description>
    </item>
    
    <item>
      <title>Bigpipe</title>
      <link>http://shenwenqing.com/series/frontend/bigpipe/</link>
      <pubDate>Thu, 11 Oct 2018 07:54:00 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/bigpipe/</guid>
      <description>介绍 facebook的页面异步加载框架 不同于ajax的http调用，需要更多的网线连接。bigpipe与当前页面共用http连接  使用 前端 &amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;underscore.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;bigpipe.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div id=&amp;quot;body&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;quot;text/template&amp;quot; id=&amp;quot;tpl_body&amp;quot;&amp;gt; &amp;lt;div&amp;gt;&amp;lt;%=articles%&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var bigpipe = new Bigpipe() bigpipe.ready(&#39;articles&#39;, function(data) { $(&#39;#body&#39;).html(_.render($(&#39;#tpl_body&#39;).html(), {articles: data})) }) &amp;lt;/script&amp;gt; 服务器端 app.get(&#39;/profile&#39;, function (req, res) { if (!cache[layout]) { cache[layout] = fs.readFileSync(path.join(VIEW_FOLDER, layout), &#39;utf8&#39;) } res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;}) res.write(render(complie(cache[layout]))) ep.all(&#39;users&#39;, &#39;articles&#39;, function () { res.end() }) ep.fail(function(err) { res.end() }) db.getData(&#39;sql1&#39;, function (err, data) { data = err ?</description>
    </item>
    
    <item>
      <title>Angular1</title>
      <link>http://shenwenqing.com/series/frontend/angular1/</link>
      <pubDate>Thu, 11 Oct 2018 07:47:51 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/angular1/</guid>
      <description>介绍 google发布 提倡SPA(Single Page Apps), 运行快，一次加载 mvvm  特点 前端mvc 双向数据绑定 指令和语义化标签 模块化工具 依赖注入 html模板 常用工具封装，如$http $cookies $location  调试插件 Batarang  directive nested inside ng-app # 声明app名, 在最外层 ng-submit # &amp;lt;form ng-submit=&amp;quot;submit()&amp;quot;&amp;gt; ng-controller ng-repeat # $index返回当前引用的元素序号，$first, $middle, $last 返回布尔值 ng-model # 绑定当前元素的值 ng-click # angularjs中，ng-eventhandler=&amp;quot;expression&amp;quot;类的指令可以 ## 在所有浏览器中有相同的行为，angular将会屏蔽差异性 ## 不会在全局命名空间中进行操作，指定的表达式只能访问元素控制器作用域范围内的函数和数据 ng-bind ng-change &amp;lt;form ng-submit=&amp;quot;aaFunc()&amp;quot;&amp;gt; # 会阻止浏览器默认的提交操作 ng-dblclick ng-show ng-hide ng-class # 可以是类名字符串，空格分隔，可以是类名数组，可以是类名到布尔值的映射 ng-class=&amp;quot;{true: &#39;active&#39;, false: &#39;inactive&#39;}[isActive]&amp;quot; ng-class=&amp;quot;{&#39;selected&#39;: isSelected, &#39;car&#39;: isCar}&amp;quot; ng-style # templete中写css不好维护 ng-src=&amp;quot;/images/cats/{{favoriteCat}}&amp;quot; # src，href属性中简单使用templete,由于浏览器优先并行加载图片和其它内容,angular没有机会拦截到数据绑定请求，所以无法运行 ng-href ng-options # &amp;lt;select ng-model=&amp;quot;x&amp;quot; ng-options=&amp;quot;(m.</description>
    </item>
    
    <item>
      <title>Jquery</title>
      <link>http://shenwenqing.com/series/frontend/jquery/</link>
      <pubDate>Thu, 11 Oct 2018 07:34:03 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/jquery/</guid>
      <description>对象命名方式 var $a = $(&amp;quot;#inputID&amp;quot;);  选择器（选择多个时形成数组） 基本选择器 $(&amp;quot;#inputID&amp;quot;); # id选择 $(&amp;quot;input&amp;quot;); // 标签名,默认获取第一个 # 标签名选择 $(&amp;quot;.className&amp;quot;); // 按样式名定位 # 样式名选择 $(&amp;quot;#div1ID,.myClass,p&amp;quot;); # 选择多个 $(&amp;quot;*&amp;quot;); # 所有元素 层级选择器 $(&amp;quot;form input&amp;quot;) # form所有后代元素中input元素的个数 $(&amp;quot;form&amp;gt;input&amp;quot;) # form子元素中input元素个数，不包括下层元素 $(&amp;quot;form+input&amp;quot;) # form同级并且下面的第一个input元素 $(&amp;quot;form~input&amp;quot;) # form同级并且下面的所有input元素 子元素选择器 # 只选择一个 $(&amp;quot;ul li:first&amp;quot;) # ul中第一个子元素li $(&amp;quot;ul li:last&amp;quot;) # ul中最后一个子元素li $(&amp;quot;input:not(:checked)&amp;quot;) # input标签中所有未选中的元素 $(&amp;quot;table tr:even&amp;quot;) # 表格的奇数行（索引号为偶数） $(&amp;quot;table tr:odd&amp;quot;) # 表格的偶数行（索引号为奇数） $(&amp;quot;table tr:eq(1)&amp;quot;) # table中索引号等于1的行 $(&amp;quot;table tr:gt(0)&amp;quot;) # table中索引号大于0的行（不包括0） $(&amp;quot;table tr:lt(2)&amp;quot;) # table中索引号小于2的行（不包括2） $(&amp;quot;:header&amp;quot;) # 匹配如 h1, h2, h3之类的标题元素 内容选择器 $(&amp;quot;div:contains(&#39;Join&#39;)&amp;quot;) # div 标签的html()中包含&#39;Join&#39;字符串的元素 $(&amp;quot;p:empty&amp;quot;) # p 标签的html()的内容为空的元素 $(&amp;quot;div:has(p)&amp;quot;) # div标签中包含p标签的该div标签 $(&amp;quot;p:parent&amp;quot;); # 非空的p标签元素，即p为父元素 可见性选择器 $(&amp;quot;tr:hidden&amp;quot;) # 查找隐藏的tr元素，如&amp;lt;tr style=&amp;quot;display:none&amp;quot;&amp;gt; &amp;lt;td&amp;gt;Value 1&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; $(&amp;quot;tr:visible&amp;quot;) # 查找可见的tr元素 属性选择器 $(&amp;quot;div[id]&amp;quot;) # 含有id属性的div元素 $(&amp;quot;input[name=&#39;newsletter&#39;]&amp;quot;) # 所有name属性是newsletter的input元素 $(&amp;quot;input[name!</description>
    </item>
    
    <item>
      <title>React</title>
      <link>http://shenwenqing.com/series/frontend/react/</link>
      <pubDate>Thu, 11 Oct 2018 07:32:08 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/react/</guid>
      <description>介绍 facebook推出的用于build user interfaces 的类库  使用 o-&amp;gt; webpack # webpack.config.js var webpack = require(&#39;webpack&#39;) module.exports = { devtool: &#39;inline-source-map&#39;, entry: [&#39;webpack/hot/dev-server&#39;, __dirname + &#39;/app/main.js&#39;], output: { path: __dirname + &#39;/build&#39;, filename: &#39;bundle.js&#39; }, module: { loaders: [ { test: /\.(js|jsx)$/, exclude: /node_modules/, loader: &#39;babel-loader&#39;, } ] }, plugins: [ new webpack.HotModuleReplacementPlugin(), new webpack.DefinePlugin({ &#39;process.env&#39;: { NODE_ENV: JSON.stringify(&#39;production&#39;) } }) ], devServer: { contentBase: __dirname + &#39;/build&#39;, historyApiFallback: true, inline: true, port: 3031, } } # index.</description>
    </item>
    
    <item>
      <title>Infomation</title>
      <link>http://shenwenqing.com/series/infomation/infomation/</link>
      <pubDate>Wed, 10 Oct 2018 20:56:27 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/infomation/infomation/</guid>
      <description>网站 漂亮 http://graphicnovel-hybrid4.peugeot.com/start.html http://wildflower.resn.co.nz/ http://acko.net/blog/making-love-to-webkit/ http://journey.lifeofpimovie.com/#!/ http://thecarpandtheseagull.thecreatorsproject.com/video.html 示例 https://www.chromeexperiments.com/webgl?page=1&amp;amp;sort=newest https://developer.mozilla.org/en-US/docs/Web/Demos_of_open_web_technologies www.webgl.com https://www.reddit.com/r/threejs/ http://learningthreejs.com/ http://operasoftware.github.io/Odin/demo.html http://madebyevan.com/webgl-water/ http://www.spielzeugz.de/html5/sticky-thing/ http://www.ro.me/ http://threejs.org/examples/#webgl_animation_cloth http://threejs.org/examples/#css3d_periodictable http://d3.artzub.com/wbca/ http://www.findtheconversation.com/concept-map http://acme-experience.com/wood-and-metalworking http://suissemania.ch/ http://thunderdome.riotgames.com/teamwork http://galeriekostek.cz/cs http://centralkladno.cz/ http://www.deutser.com/ http://www.nespresso.com/kitchenaid/en_CA/colors http://www.webgl.com/ # 官网很多示例 http://aleksandarrodic.com/ # 交互网页 http://aleksandarrodic.com/p/jellyfish/ # 乌贼 http://www.chromeexperiments.com/detail/webgl-water-simulation/ # 水球 http://nouvellevague.ultranoir.com/ # 雕像 http://1985wanggang.blog.163.com/blog/static/776383320103755629174/ # flash web 3d 地球 http://stemkoski.github.io/Three.js # 很多three.js学习示例 http://gyu.que.jp/jscloth/ # js cloth http://alteredqualia.com/canvasmol/ # 3d 化学元素 http://demo.itivy.com/html5-earth/index.html # 3d 旋转地球 http://www.fxysw.com/forum.php # 分形艺术网 http://demo.itivy.com/html5-3d-google-search/index.html # 伪3d google box http://demo.</description>
    </item>
    
    <item>
      <title>English</title>
      <link>http://shenwenqing.com/series/english/english/</link>
      <pubDate>Wed, 10 Oct 2018 20:53:25 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/english/english/</guid>
      <description>发音 spelling and numbers Acronym ibM, miT, ph.D mbA lA iQ revP ciA fbI coD soS xyZ Spelling boX cooK wiLsoN sentence stress with descriptive phrases It&#39;s SHORT. It&#39;s a short NAIL It&#39;s CHOCOLATE. It&#39;s a chocolate CAKE. contrasting description and a set phrase It&#39;s a short NAIL. It&#39;s a FINGERnail It&#39;s a chocolate CAKE. It&#39;s a PANcake T,D,S or Z + Y T + Y = CH what&#39;s your name can&#39;t you do it?</description>
    </item>
    
    <item>
      <title>管理</title>
      <link>http://shenwenqing.com/series/management/management/</link>
      <pubDate>Wed, 10 Oct 2018 20:12:11 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/management/management/</guid>
      <description> 事 知原理 是什么，为什么，怎么样，拆解  事与团队 事造就团队，好团队不一定出好成果  团队 负责态度 提高团队效率，而非自己效率 存在合理性 有目标，成员能力认可，成员感性认可 成果评价 产出判断 分配利益和荣耀 团队提升 培训无意义，自觉成长 分配事 因特质分配，如稳定，峰值，沟通  人 行动 感性，理性，惯性 成分 技能，素质，精神 优点，缺点 # 并非此长彼短，是两个维度 态度 找潜质的眼光 特性抑制 创造力，纪律 勤奋，聪明 稳定，峰值 深度，速度 细节，大局 发展 上限 下限 成本 低成本召回  招聘 能力 真诚 主动 写代码 分析/解决问题 时间/流程意识 设计 表达 快 重点 沟通 双方 逻辑  上级 是客户 购买能力和时间 靠谱 事事有交代 只交“产品” 背景清晰 扼要 完整 引入独有经验 设计沟通 及时、主动、规律 update进度 紧迫感 重要性 问题和需求 变化 需要的决断 给意见做选择题 下一个工作重点 下一个沟通节点 计划外沟通 简要内容 告知用时 态度 顺 一致的作风 把握分寸、赞美 领导利益着想 顾全局，负责 分忧 超出预期 提问题与建设性意见  架构师 介绍 架构就是各种权衡，人，资源，需求，时间，弄一个大伙都能接受的方案 拆分 分界 正交 工程 找瓶颈 人 只hire owner 自我驱动，持续改进 告警及时响应 出问题，写相关文档 砸需求，看弹性 小精英团队，智能解决问题 任务 任务列表: 难度, 优先级, 排期, 地平线目标, 现状, wishlist nice to have给新人 素养 思考全面 方法 划分项目边界 想清楚再行动，行动也会顺畅 技术 kiss # 有生命力，简单却不容易 设计清晰 选型简单 代码精炼 抽象优雅 沟通 文档 &amp;gt; 邮件 &amp;gt; im &amp;gt; 电话 # 即时性相反  战略 未来 ai 云 优势 轻，方便 全 可计算 本质 批发转零售 帮助别人成功而成功 产品型转服务型 现象 外包被淘汰 行业 OS of business 功能 产品功能，样板 开发体验，文档 组件收费，容量收费，节省的成本收费 数据直接做决策 分类 service # 基础服务 plugins # 基础服务组合 app # plugins组合 产品 开箱即用，做瑞士军刀不做零件 矛盾 强大，易用 小客户无付费能力，大客户要求多 行业分类 垂直，水平  </description>
    </item>
    
    <item>
      <title>标记语言</title>
      <link>http://shenwenqing.com/series/pl/markup_language/ml/</link>
      <pubDate>Wed, 10 Oct 2018 17:59:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/ml/</guid>
      <description>org-mode markdown restructedText LaTex plantUML  </description>
    </item>
    
    <item>
      <title>PlantUML</title>
      <link>http://shenwenqing.com/series/pl/markup_language/plantuml/</link>
      <pubDate>Wed, 10 Oct 2018 17:59:00 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/plantuml/</guid>
      <description> 分类 salt wireframe uml activity class component sequence state use case  </description>
    </item>
    
    <item>
      <title>Schema</title>
      <link>http://shenwenqing.com/series/pl/markup_language/schema/</link>
      <pubDate>Wed, 10 Oct 2018 17:55:28 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/schema/</guid>
      <description> Schema约束 tld文件是Schema约束的  引入  根元素添加 文件books.xsd &amp;lt;xs:schema xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot; // ns 是 namespace targetNamespace=&amp;quot;http://www.jnb.com&amp;quot; // 给当前约束文件起一个名字 elementFormDefault=&amp;quot;qualified&amp;quot;&amp;gt; // 添加属性，qualified指所有都来自xs空间 可选attributeFormDefault=&amp;quot;unqualified&amp;quot; // unqualified 默认来自的空间 文件books.xml 从根元素开始约束 &amp;lt;jnb:书架 xmlns:jnb=&amp;quot;http://www.jnb.com&amp;quot; // 在被约束文件根元素添加属性，约束命名空间 xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; // 找到xsi xsi:schemaLocation=&amp;quot;http://www.jnb.com books.xsd&amp;quot;&amp;gt; // 指定对应约束文件的物理地址 &amp;lt;jnb:书&amp;gt; &amp;lt;/jnb:书&amp;gt; &amp;lt;/jnb:书架&amp;gt; // 在被约束所有元素添加指定空间前缀 // 保存并检验  语法  元素约束 &amp;lt;xs:element name=&amp;quot;xxx&amp;quot; type=&amp;quot;yy&amp;quot; defaule=&amp;quot;&amp;quot; /&amp;gt; // name 元素名 type 类型 元素类型 xs:string // 字符串 xs:decimal // big decimal 数字类型 xs:integer // xs:boolean xs:date // 日期 xs:time // 时间 属性约束，在元素标签体里 &amp;lt;xs:attribute name=&amp;quot;&amp;quot; type=&amp;quot;&amp;quot; /&amp;gt; // name 属性名 type 类型 属性类型和元素类型一样 属性说明 &amp;lt;xs:attribute use=&amp;quot;required&amp;quot; /&amp;gt; 限定约束 对值的限定 枚举限定 正则限定 选择限定 长度限定 混合内容 &amp;lt;xs:complexType mixed=&amp;quot;true&amp;quot;&amp;gt; // 只有文本和子元素，mixed可以不使用 &amp;lt;/xs:complexType&amp;gt; 指示器 All Choice // 选择出现 Sequence // 按声明顺序出现 maxOccurs minOccurs Group name attributeGroup name &amp;lt;xs:all&amp;gt; // 指定以下元素随意出现 &amp;lt;/xs:all&amp;gt;  </description>
    </item>
    
    <item>
      <title>Dtd</title>
      <link>http://shenwenqing.com/series/pl/markup_language/dtd/</link>
      <pubDate>Wed, 10 Oct 2018 17:54:44 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/dtd/</guid>
      <description>注意  同名元素只能用命名空间来区分定义  例子  &amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt; &amp;lt;!DOCTYPE poem[ &amp;lt;!ELEMENT poem (author, title, content)&amp;gt; &amp;lt;!ELEMENT author (#PCDATA)&amp;gt; &amp;lt;!ELEMENT title (#PCDATA)&amp;gt; &amp;lt;!ELEMENT content (#PCDATA)&amp;gt; ]&amp;gt; &amp;lt;poem&amp;gt; &amp;lt;author&amp;gt;王维&amp;lt;/author&amp;gt; &amp;lt;title&amp;gt;鹿柴&amp;lt;/title&amp;gt; &amp;lt;content&amp;gt;空山不见人， 但闻人语声， 返景入深林，复照青苔上。&amp;lt;/content&amp;gt; &amp;lt;/poem&amp;gt; 外部引用 &amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt; &amp;lt;!DOCTYPE poem SYSTEM &amp;quot;outer.dtd&amp;quot;&amp;gt; // outer.dtd &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;!ELEMENT poem (author, title, content)&amp;gt; &amp;lt;!ELEMENT author (#PCDATA)&amp;gt; &amp;lt;!ELEMENT title (#PCDATA)&amp;gt; &amp;lt;!ELEMENT content (#PCDATA)&amp;gt;  语法  &amp;lt;!ELEMENT author (#PCDATA)&amp;gt; 之中的两个空格必须要有  元素类型  EMPTY # 可以有属性 ANY # 根元素设为ANY类型后，元素出现的次数和顺序不受限制 #PCDATA 纯元素类型 混合类型 # 可以是元素与内容的混合 例子 &amp;lt;!</description>
    </item>
    
    <item>
      <title>设计-格式语言</title>
      <link>http://shenwenqing.com/series/design/language/</link>
      <pubDate>Wed, 10 Oct 2018 17:47:53 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/language/</guid>
      <description> org-mode markdown restructedText LaTex plantUML # xml  </description>
    </item>
    
    <item>
      <title>设计-规定</title>
      <link>http://shenwenqing.com/series/design/standard/</link>
      <pubDate>Wed, 10 Oct 2018 17:46:58 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/standard/</guid>
      <description> 巴科斯范式的内容 在双引号中的字(&amp;quot;word&amp;quot;)代表着这些字符本身。而double_quote用来代表双引号。 在双引号外的字（有可能有下划线）代表着语法部分。 尖括号( &amp;lt; &amp;gt; )内包含的为必选项。 方括号( [ ] )内包含的为可选项。 大括号( { } )内包含的为可重复0至无数次的项。 竖线( | )表示在其左右两边任选一项，相当于&amp;quot;OR&amp;quot;的意思。 ::= 是“被定义为”的意思。  </description>
    </item>
    
    <item>
      <title>设计-媒体</title>
      <link>http://shenwenqing.com/series/design/media/</link>
      <pubDate>Wed, 10 Oct 2018 17:45:17 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/media/</guid>
      <description> 场景控制  3CAD character camera control art direction  特效 会场散射光束（博物馆） 雾中焦点的竖光（saber的剑） 画线的光点（最终幻想） 密集的星星，远近缩放，光圈(tree.js官网） 水滴带动整个屏幕的亮度(fate stay night) 蓝色光影交错（fate stay night） 秒针声强调时间(fate stay night) 单帧卡动画渲染气氛(fsn) 黑白画面到彩色画面(madlife 集锦[dream on]) 黑白画面彩色涟漪(冰果) 地面的雾影(fsn) 音乐重节拍时出现隐形单位/人(fsn) 转动的星空光点线加云(fsn结尾) 沙的立体塑型(秦时明月) 红辣椒的分镜  网站效果 图片向下拉，上面模糊小，下面清晰大，有一种震撼感  </description>
    </item>
    
    <item>
      <title>设计-代码</title>
      <link>http://shenwenqing.com/series/design/code/</link>
      <pubDate>Wed, 10 Oct 2018 17:40:53 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/code/</guid>
      <description>思想 todo: 待统一 原则 替换 子类继承超类的所有 单一职则 一个类负责一个功能 开闭 对扩展开放，对修改关闭，如接口 最小功能隔离 顺序依赖 低层依赖高层，具体依赖抽象 non-intrusion 将功能推入代码，而非代码拿到功能 代码实现接口，而非继承类 创建 factory, abstract factory builder prototype # 原型复制来产生对象 singleton 结构 adapter bridge # 抽象与实现分离 composite # 抽取公共行为 decorator facade # 外观描述 flyweight # 享元 proxy 行为 interpreter template method 责任链 command iterator mediator # 消息传递中介 memento # 保存，恢复状态 observer state # 不同状态下不同行为 strategy # 同行为的不同算法，替换算法 visitor # 抽象行为本身，不同对象不同行为  单例 单例模式 单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。 如 # 大多有资源管理器的功能 线程池 缓存 日志对象 对话框 打印机 显卡驱动程序 java反射机制会使所有单例失效：私有构造方法可以被访问 例子 public class Singleton{ private static Singleton uniqueInstance = null; private Singleton(){} public static Singleton getInstance(){ if(uniqueInstance == null){ uniqueInstance = new Singleton(); } return uniqueInstance; } } 三种单例 // 饿汉式单例类.</description>
    </item>
    
    <item>
      <title>设计-工程</title>
      <link>http://shenwenqing.com/series/design/project/</link>
      <pubDate>Wed, 10 Oct 2018 17:39:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/design/project/</guid>
      <description> 评价 必要分析 tracing log, 监控, 告警 极限性能，当前负载情况 降级方案 下游依赖 数据修复脚本 集成性 integration, 整体各部分间有机协调工作，发挥集体效益 信息系统的集成性 系统之间相互通信和相互协作的能力 扩展性以集成性为前提 可复用性 可提高可扩展性 扩展性 评估 方便添加新功能 扩展后，新旧功能集成性 扩展后，满足性能: 及时性、可靠性 安全 低成本 方式 应用分离 正确管理依赖项 类型 自动代码生成 动态编译 元模型 自描述文件 语言互用性 自定义属性(元数据) 基于元模型的反射 可扩展标记语言(xml) 插件 # 设计得当的一个软件几乎全部可以利用插件来完成 组件开发 功能固定 考虑兼容性、可重用性 难点 接口设计 可成长性 组成成分可不断增加 可扩展性是可成长性的基础 可代谢性 组成部分可以更新  工程 软件发展的阶段 程序设计阶段1946-1955 节省空间 软件设计阶段1956-1970 硬件发展，软件危机 软件工程阶段1970-今 组件化 迭代开发 迭代周期 一个迭代周期中不新添加需求 一个迭代周期中包含多次迭代 一个阶段的结束称之为里程碑 初始化阶段增量 项目启动 建立业务模型 定义业务问题域 找出主要风险因素 定义项目需求的外延 创建业务问题域的相关说明文档 细代阶段增量 高层的分析与设计 建立项目的基础框架 监督主要的风险因素 制订达成项目目标的创建计划 构建阶段增量 代码及功能的实现 移交阶段增量 向用户发布产品 beta测试(alpha测试是内部测试， beta测试是用户测试) 执行性能调优，用户培训和接收测试 瀑布模型 #每一次执行工作流的深度不同 # 80/20原则 可行性分析 实现会不会复杂，尽量简单 需求分析 分类 生存点 痒点 兴奋点 # 不会按时交付（只完成主要，然后延期，用户测试） 客户沟通，同类产品比较，行业标准 功能 正确, 可行, 必要, 有序, 明确, 一致 性能 完善, 简短 分析 设计 先出成果再优化 任务分配(进度条) 命名标准 文档 可移植、可维护易扩展 排期 实现 测试 运维 螺旋模型（模块化） # 边分析边开发边交付（一环一环向目标实现） 团队 运维 设计 开发 测试人员 分析师 技术总监 架构师（软件 数据库） 项目经理（技术、人员【人员离职问题】、软件） 公司问题 人员流动 代码维护  uml Unified Modeling Languag 静态模型 用例图(需求分析):客户看 # 项级图(突出重点)，一级图，二级图，三级图 参与者(泛化) (关联) 用例(包含，扩展【继承】) # 是动词，表示功能模块 注释 类图：类结构、类关系（可以自动生成java类） 继承 实现 关联（全局变量）【导航性：一对多关系等】【聚合(所有引用)，组合（生命周期相同，如int类型属性）】 # spring 中的依赖注入是关联 依赖（局部变量） 实体关系图ER 动态模型 时序图：可以根据时序图写代码 #　rose工具中时序图中加入参与者：用例图中创建参与者，拖入时序图中  </description>
    </item>
    
    <item>
      <title>运维</title>
      <link>http://shenwenqing.com/series/ops/ops/</link>
      <pubDate>Wed, 10 Oct 2018 17:33:07 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/ops/</guid>
      <description>目标 安全性 账号管理 漏洞修复 安全审计 可用性 服务监控 架构优化 冗余备份 预案演练 故障响应 运维成本 成本核算 服务选型 成本优化 运维效率 研发工作流支持 服务支持平台建设 运维自动化平台建设 操作系统 windows linux chrome os mac os fushsia # goolge os  套件 jira # IBM Rational提供的缺陷及变更管理工具。它对软件缺陷或功能特性等任务记录提供跟踪管理。提供了查询定制和多种图表报表。 teambition redmine # ror开发的项目管理web，支持git, svn, cvs等，把成员、任务、文档、讨论等资源整合在一起 gerrit # code review 工具 jenkins # java实现的持续集成工具 ansible # python实现的自动化部署工具 gradle # 自动化构建 jumpserver saltstack # 自动化运维工具 zabbix # 分布式监控 nagios # 监控 puppet # 自动化运维 selenium # 自动化运维 tty.</description>
    </item>
    
    <item>
      <title>架构-性能</title>
      <link>http://shenwenqing.com/series/architecture/performance/</link>
      <pubDate>Wed, 10 Oct 2018 17:20:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/performance/</guid>
      <description>qps latency through put io 磁盘 iops: 2k 网络 带宽 iops: 3w bottle-nect  </description>
    </item>
    
    <item>
      <title>架构-工具</title>
      <link>http://shenwenqing.com/series/architecture/tool/</link>
      <pubDate>Wed, 10 Oct 2018 17:19:52 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/tool/</guid>
      <description>datastudio # ibm数据库连接工具 plsql oracle sql developer navicat # ios的数据库操作gui cmder # windows命令行工具 wireshark charlet</description>
    </item>
    
    <item>
      <title>存储</title>
      <link>http://shenwenqing.com/series/architecture/store/</link>
      <pubDate>Wed, 10 Oct 2018 17:17:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/store/</guid>
      <description>fastdfs # 开源分布式文件系统 squid varnish # 反向代理，web缓存  </description>
    </item>
    
    <item>
      <title>服务器</title>
      <link>http://shenwenqing.com/series/architecture/server/</link>
      <pubDate>Wed, 10 Oct 2018 17:16:29 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/server/</guid>
      <description>nginx netty tomcat jetty tengine # 淘宝基于nginx修改，添加了功能 监控 /upstream_status openresty # 基于nginx, luaJit 的web平台 meteor # 包装node ringojs # jvm上commonJs规范的服务器 mina apache提供， 由Trustin Lee开发，比netty更早 tomcat native # 基于apr(apache portable runtime)技术，让tomcat在操作系统级别的交互上做的更好 tinyHttpd resin # 收费, 类似tomcat的java容器，性能提升 uwsgi # 一个web服务器，实现了wsgi, uwsgi, http等协议 weblogic # oracle was # ibm服务器 gunicon # python wsgi http server  </description>
    </item>
    
    <item>
      <title>架构-高可用</title>
      <link>http://shenwenqing.com/series/architecture/ha/</link>
      <pubDate>Wed, 10 Oct 2018 17:15:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/ha/</guid>
      <description>high-availability linux 目标  reliability: 可靠性 availability: 可用性 serviceability: 可服务性 ras: remote access service(远程服务访问)  术语  节点(node): 唯一主节点，多个备用节点 资源(resource): 是节点可控制的实体，主节点发生故障时，可以被其它节点接管 例如: 磁盘分区 文件系统 ip地址 应用程序服务 nfs文件系统 事件(event): 集群中可能发生的事件 例如: 系统故障 网络连通故障 网卡故障 应用程序故障 动作(action): 事件发生时ha的响应方式 例如: 用shell 脚本对资源进行转移  心跳 heartbeat keepalived vrrp # virtual router redundancy protocol 虚拟路由器冗余协议 # 解决静态路由出现的闪单点故障问题，它能够保证网络的不间断．稳定运行  负载 方法 dns轮循 java nio erlang语言 linux epoll bsd kqueue 消息队列、事件通知 c/c++下ace, boost.asio, libev(libevent) 服务器mina, jetty, node.</description>
    </item>
    
    <item>
      <title>架构-通信</title>
      <link>http://shenwenqing.com/series/architecture/communication/</link>
      <pubDate>Wed, 10 Oct 2018 17:13:22 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/communication/</guid>
      <description> 系统 elk # elasticsearch, logstash, kibana log.io  mq rabbitMQ kafaka jafka nsq memcacheQ zeroMQ activeMQ beanstalkd mqtt # 最早由ibm提供的，二进制消息的mq  任务 quartz # java celery # python rundeck # java  </description>
    </item>
    
    <item>
      <title>架构-治理</title>
      <link>http://shenwenqing.com/series/architecture/governance/</link>
      <pubDate>Wed, 10 Oct 2018 17:10:32 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/governance/</guid>
      <description>功能  服务 注册 发现 性能/ha 区域感知load balance 故障切换 故障注入 熔断 健康检查 流量拆分和推出 策略 quota 网络数据 api调用 服务准入条件 路由规则 容错 访问策略 安全 服务间认证(auth) tls 细粒度权限控制 配置 啮合层 # 服务与网络间加入透明层，用来功能配置 查看 服务网可视化 monitor log tracing 迭代 部署 版本控制 平台支持 # 如aws, k8s, mesos 通讯能力 # http/1.1 http/2 grpc tcp  rmi # java远程调用功能 hessian
soa eai # Enterprise Application Integration 建立底层结构将异构应用集成 esb # Enterprise Service Bus 企业服务总线， 是连接中枢  rpc hsf # 高速服务框架 (socket直连) protobuf thrift Dubbo spring cloud  paas cloudStack # 托管在apache的开源、高可用、高扩展性的云计算平台 # 支持主流hypervisors # 一个开源云计算解决方案，可以加速iaaS的部署、管理、配置 kubernetes # google开源的，在docker技术上，为容器化应用提供: 作用 资源调度 部署运行 服务发现 扩容缩容 cloudfoundry # 根据应用模板，动态生成很多tomcat, mysql, nosql, 动态控制这些实例的启停。 openstack # 云操作系统，管理虚拟资源 hsf # high-speed service framework 特点 不增加中间点(稳定，高度可伸缩) 结构 注册服务信息，推送服务地址 基于osgi  mesh lstio #google IBM, lyft开源，基于envoy 组成 数据面板 控制面板 linkerd # buoyant出品 fingle # twitter出品 envoy # lyft出品 nginmesh # nginx推出  粘合层 zookeeper # 服务发现 exhibitor # supervisor for zk gearman # 把工作委派给其他机器 etcd # k8s中用到的服务发现仓库 mesos # apache开源的分布式资源管理框架  monitor spy.</description>
    </item>
    
    <item>
      <title>架构-数据</title>
      <link>http://shenwenqing.com/series/test/data/</link>
      <pubDate>Wed, 10 Oct 2018 16:52:12 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/test/data/</guid>
      <description>流量 小米论坛 pv 2000w 热门并发300 20k/页面 300k/图片(未压缩) 70k/无图帖子 500k-3M/有图帖子 动态服务器最小带宽: 48Mbps 静态服务器最小带宽: 1440Mbps 实际购买带宽: 800M 带宽费用: 8.7w/month 糗事百科 pv 1000w 热门并发150 10k/页面 70k/图 4图/页 90k-400k/综合页 动态服务器带宽: 12Mbps 静态服务器带宽: 336Mbps  带宽 建议 热门并发1.5倍到2倍购买 价格 静态IP企业宽带 5M 10M 50M 100M 200M 盛大云 华东双线 216/月 396 1836 3636 7236 盛大云 华北BGP 318 618 3018 6018 12018 阿里云 BGP 100/兆/月 5k 1w 2w Amazon EC2 流量计费 $3313 idcexpert.cn 1.5w 10w linkcloud.cn 双线 也可流量计费 168 480 3300 6600  cdn 介绍 流量不大时带宽比cdn便宜, 流量大时cdn便宜。 界限为250Mbps左右，价格在9k/month 价格 50TB/月 100TB/月 阿里云 3.</description>
    </item>
    
    <item>
      <title>构架-方案</title>
      <link>http://shenwenqing.com/series/architecture/solution/</link>
      <pubDate>Wed, 10 Oct 2018 16:49:27 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/solution/</guid>
      <description> 数据迁移 去掉约束 排序（中断继续）  数据存储 缓存 queue + map # queue存储、限量, map查询，指向queue中元素  直播 《关于直播，所有的技术细节都在这里了》  并发 异步事件 tornado + celery + rabbitmq + 优先级  缓存 queue + map # queue存储、限量, map查询，指向queue中元素  前端模板 layout layout service # 缓存layout到redis crud layout功能 layout对象 index # 缩略信息 plugins components table layout # 组合方式 水平，垂直，tab  游戏 进程 gateway进程组 # 对外api function进程组 # 注册玩家全局信息 session进程组 # 玩家状态 dbserver进程组 # 数据 多word进程组 # 不同地图的信息、逻辑  </description>
    </item>
    
    <item>
      <title>架构-原理</title>
      <link>http://shenwenqing.com/series/architecture/principle/</link>
      <pubDate>Wed, 10 Oct 2018 15:25:12 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/principle/</guid>
      <description>微机 并行架构 位级(bit-level): 32位, 64位计算机 指令级(instruction-level) # 处理器内部并行度很高 流水线 乱序执行 猜测执行 数据级, 单指令多数据(SIMD)架构 # 图像处理 任务级(task-level) # 多处理器 # 超线程, 虽只有4个核，但可用核返回8 共享内存模型 分布式内存模型 分类 指令流的重数分类 SI(single instruction stream)单指令流 MI(multiple instruction stream)多指令流 操作数流的重数分类 SD(single data stream)单数据流 MD(multiple data stream)多数据流 SISD 串行计算机 SIMD 阵列机(多处理单元) MISD 很少 MIMD 多处理机 多计算机 并发: 一个时间段有多个程序在运行，在同一个处理机上。 # 伪并发是单核处理器并发，真并发是多核处理器并发 # 可处理时间点i/o的数目来衡量 互斥: 程序(进程)间不使用临界资源 同步: 程序间依赖，有等待关系 同步的其它意思: 1. os开发中指进程协作 2. 数据异步复制(如同步歌曲) 并行: 多处理器才并行，单处理器叫交替执行 多线程 异步: 与同步相对。多线程是实现异步的一种手段 进程 线程 一个进程下的轻量进程 协程 单线程下事件并行(就是仿cpu时间调度) 事件(非阻塞) 介绍 就是回调 事件模型 原理 队列存事件, 单进程检测事件是否回调 工具 epoll(select, poll) libev(libevent) dma direct memory access 不依赖cpu的内存存取 长连接 socket连接  cpu 介绍 单cpu串行工作，前任务完成，后任务才开始 # 串行不适合图形处理(多点，线，面要同时乘投影矩阵) cpu把大量空间和电量分配给控制器和缓存，不能集成太多计算单元 cpu内存通过cpu总线连接, cpu总线与pci总线通过主桥(北桥)连接 # 显卡在pci总线上 ## 控制逻辑在cpu中运行, 生成渲染数据, 到内存, 再到显存显卡计算。 ### 内存到显存数据传输最花费时间。  进程调度 等级 高级调度(High-Level Scheduling) 作业调度, 后备作业调入内存运行 低级调度(Low-Level Scheduling) 进程调度, 就绪队列中某进程获得cpu 中级调度(Intermediate-Level Scheduling) 虚拟存储器引入, 内外存对换区进行进程对换 方式 非剥夺方式 处理机分配给某进程后一直运行下去,直到阻塞时,才分配处理机到另一个进程 剥夺方式 进程运行时,系统基于某种原则,剥夺分配给它的处理机.</description>
    </item>
    
    <item>
      <title>架构-术语</title>
      <link>http://shenwenqing.com/series/architecture/term/</link>
      <pubDate>Wed, 10 Oct 2018 15:22:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/architecture/term/</guid>
      <description>Alb automaticLoopBack 自动回环，虚拟接口 sdn software defined network 软件定义网络  </description>
    </item>
    
    <item>
      <title>媒体</title>
      <link>http://shenwenqing.com/series/media/media/</link>
      <pubDate>Wed, 10 Oct 2018 15:13:01 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/media/media/</guid>
      <description>原理 硬件 CRT cathode ray tube 阴极射线管显示器 随机扫描方式 光栅扫描方式 DPU distributed processing unit 分散处理单元  标准 Core Graphics System CGI(computer graphics interface) # 与设备无关的方法，方便的直接控制图形设备 CGM(computer graphics metafile) # 设备无关的主义定义图形文件格式 GKS(graphics kernal system) # 应用程序与图形输入输出设备之间的功能接口 PHIGS(programmer&#39;s hierarchical interactive graphics system) # 为3d设计的工具库 GL(graphics library) # 广泛应用的标准图形程序库  算法 基元的显示 直线扫描转换 DDA 中点画线法 Bresenham画线 圆的扫描转换 中点画圆 Bresenham 区域填充 种子填充 多边形扫描转换 图形变换 二维图形变换 二维视见变换 三维图形变换 投影 平行正交 平行斜交 透视投影 裁剪 直线段裁剪算法 Cohen-Sutherland算法 中点分割算法 梁友栋-Barsky算法 多边形裁剪Sutherland-Hodgman算法 三维图形裁剪 梁友栋-Barsky算法 曲线和曲面 概念 插值 逼近 参数连续性 几何连续性 光顺(smoothness) Hermite插值曲线多项式 Coons曲面 Bezier曲线和曲面 B样条曲线和曲面 图形运算 交点计算 多边形表面交线计算 平面中的凸壳算法 Graham扫描 Jarvis行进 包含与重叠 凸多边形 多边形的三角剖分 形体的表示 概念 图形信息 几何信息 拓扑信息 非图形信息 颜色 亮度 质量 体积 二维 边界 拆线逼近曲线 选点 共线性 三点转角阈值 带树法 图形的四叉树表示法 三维 几何元素 点 边 环(有序有向边) 面 体 体素 一组单元实体: 长方体、圆柱体、圆锥体、球体 扫描体 代数半空间定义的形体 线框图 顶点表、边表、面表 边界表示法 实体 CSG(constructive solid geometry), 指任意复杂形体都可用的体素组合 特征表示 Brep表示 八叉树(四叉树的推广) 分形 规则分形 # 严格自相似性的分形 Von Koch算法 Julia集和Mandelbrot集 消除隐藏线和隐藏面 线面比较法消除隐藏线 浮动水平线消除曲面隐藏线 深度排序算法(优先级算法) 画家算法(深度优先级表法) z一缓冲算法(深度缓冲算法) 扫描线算法消除隐藏面 区域分割算法消除隐藏面 BSP(binary space partitioning)树算法判别物体可见性 八叉树算法消除隐藏面 光线投射算法找到可见面 # 对包含曲面(特别球面的场景效率高) 真实感 漫反射及光源照明 照明效应 漫射照明 具体光源照明的照射效应、透射效应 漫反射、镜面反射 环境光 漫反射 镜面反射与Phong模型 光的衰减 多边形网的明暗处理 常数明暗法 亮度插值明暗法(Gouraund着色) 法向量插值明暗法(Phong着色) 阴影 纹理(texture) 整体光 透射光亮度模拟 Whitted光照模型(以Phong为基础) 光线跟踪 # 适用光滑表面 包围盒 空间分割成网格单元 辐射度方法 # 描述封闭环境中的能量交换 # 可模拟彩色渗透现象 色彩模型 颜色 色彩(Hue) 色饱和度(Saturation) 明度(Brightness) CIE(国际照明委员会)色度图(红绿蓝) 混合系统 面向硬件 RGB 红绿蓝加色系统 CMY 青、品红、黄着色系统 彩色印刷、胶卷等非发光显示体中采用 面向用户 HSV(Hue, saturation, value) # 六棱锥模型 # 可与RGB空间互相转化 HLS(Hue, lightness, saturation)双六棱锥模型  2d 分形 介绍 Fractal 具有自相似性质的多个形状 大的部分由小的部分组成，小的部分像大的部分 用递归算法模拟 Mandelbrot Set 介绍 分形领域最著名的科学家 本华.</description>
    </item>
    
    <item>
      <title>开发工具</title>
      <link>http://shenwenqing.com/series/backend/tool/</link>
      <pubDate>Wed, 10 Oct 2018 15:02:50 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/tool/</guid>
      <description>source insight gerrit # 查看代码 hsandbox # repl paraview # 数据可视化 finreport # 数据可视化  </description>
    </item>
    
    <item>
      <title>硬件</title>
      <link>http://shenwenqing.com/series/backend/hardware/</link>
      <pubDate>Wed, 10 Oct 2018 14:59:59 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/hardware/</guid>
      <description> 树莓派 arduino </description>
    </item>
    
    <item>
      <title>前端</title>
      <link>http://shenwenqing.com/series/frontend/frontend/</link>
      <pubDate>Wed, 10 Oct 2018 14:51:24 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/frontend/frontend/</guid>
      <description>套餐 web bootstrap extjs jquery ui dojo # 语法较难用 easy ui dwz # 国产较难用，卖文档 wijmo # 收费 vaadin # apache webkit foundation # 响应式，移动优先 boilerplate # h5模板 meteor # 融合前后端, 后端node knockout # mvvm, 利于单页应用  mobile jingle vux # vue手机组件 ionic # angular手机框架 framework7 # ios(兼容android)组件 mui zui # 类bootstrap 移动端 frozenui  组件 写法 介绍 框架的作用就是统一编程风格 react jquery angular prototype mootools # 浏览器原生对象扩展 underscore # 函数式 underscore-contrib # 扩展underscore ramda # 函数式，较正确 lodash # 函数式 functional javascript bilby # 函数式库，包含dispatch, 蹦床, monadic, validator等 allong.</description>
    </item>
    
    <item>
      <title>后端</title>
      <link>http://shenwenqing.com/series/backend/backend/</link>
      <pubDate>Wed, 10 Oct 2018 14:36:50 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/backend/</guid>
      <description>领域 erp jbpm activiti # 工作流 YAML # 工作流 bossa # 工作流引擎 azkaban # 开源oa grav # 开源cms nopCommerce # .net开源电商  游戏 pomelo # 网易开源的实时性好的游戏类服务器  展示 cleaver # 基于node幻灯片 hexo # 生成博客 jekyll # 博客 hugo # 静态网站  gis ide skylive arcGIS mapInfo mapGIS superMap 库 webglobe arcpy  搜索 分类 垂直搜索引擎 针对某一个行业的专业搜索引擎，是搜索引擎的细分和延伸，是对网页库中的某类专门的信息进行一次整合，定向分字段抽取出需要的数据进行处理后再以某种形式返回给用户。 通用搜索引擎 通过关键字的方式实现的，是语义上的搜索，返回的结果倾向于知识成果，比如文章，论文，新闻等 通用搜索引擎的信息量大、查询不准确、深度不够 通用搜索引擎的海量信息无序化 部分 １.索引 ２.分词 ３.搜索 lucene solr compass # 基于lucene nutch # 基于lucene sunspot # 基于Rsolr，以dsl结构用ruby调solr elasticsearch sphinx # 基于sql的全文检索引擎  数据 爬虫 cheerio # node解析html，如jquery scrapy-redis # python 分布式爬虫框架 phantomjs # js浏览器模拟框架 分析 pandas # python数据分析 计算 hadoop 日志 scribe facebook出品 特点 支持nfs存储 结构 scribe agent 向scribe发送数据 scribe 接收数据，不同topic 的数据发送给不同的store中 存储系统(store) file, buffer, network, bucket, null, thriftfile, multi chukwa # apache出品，hadoop系列产品 flume cloudera出品 特点 可靠性(节点故障时，日志传送到其他节点) 三种级别 end-to-end 发送前写磁盘，成功时删除 store on failure 失败返回时写磁盘 best effort 不确认数据是否成功 可扩展性 agent collector storage三层架构，每层可扩展。 agent: 将数据源数据发送给collector collector: 将多个agent数据汇总后, 加载到storage中 storge: 存储系统, 可以是file, hdfs, hive, hbase等 agent collector 由master统一 logstash # 分布式日志收集，需结合kafka  ai tensorflow # 神经网络计算 convnet.</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>http://shenwenqing.com/series/test/test/</link>
      <pubDate>Wed, 10 Oct 2018 14:15:04 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/test/test/</guid>
      <description>分类 功能测试 黑盒 灰盒 白盒 性能测试 压力测试 负载测试 基准测试 # 统计多少时间内执行了多少次某个方法 回归测试 # 改旧代码后，保证旧代码可用 冒烟测试 # 功能验证，不一定是改旧代码  cpu性能测试 graph-frames subsecond offset  接口测试 工具 loadrunner phoenix 介绍 web自动化测试工具 特点 分布式执行 无脚本模式执行 无人值守模式执行 自定模式执行 模块 数据维护模块 部署模式 server-client 仅windows下可用 socket通信 web部署 server与client放到tomcat或webLogic下部署 http通信 web页面控制与监控client端执行 wireshark siege siege -c 200 -r 100 http://www.google.com # 200并发，发送100次请求 tcpcopy # 基于tcp packets的请求复制工具, 在线流量导入到测试系统中 ab 内网测试, apache自带的压力测试工具, 安装apache后在bin目录中找到 ab -n1000 -c100 http://www.google.com/a.html # 100并发, 发送1000次请求 locust # 外网性能测试　http_load # 压测 http_load -rate 5 -seconds 10 http://www.</description>
    </item>
    
    <item>
      <title>编程术语</title>
      <link>http://shenwenqing.com/series/backend/term/</link>
      <pubDate>Tue, 09 Oct 2018 17:00:21 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/backend/term/</guid>
      <description>dom 文档对象模型 dao 数据访问对象 ucs unicode character set utf ucs Transformation Format bmp Basic Multilingual plane bom Byte Order Mark asp Active Server Pages iis Internet Information services validate code 验证码 tld tag library description jsp java server page xsd XML Schemas Definition suffix 后缀 ide Integrated Development Environment RIA Rich internet Applications 富互联网应用（富客户端）C/S架构是胖客户端，B/S架构是瘦客户端。比如 flash就是ria(其它如js, SilverLight，unity3d，flash3d,adobe air,HTML5/css3，adobe Flex等) JPA Java Persistence API java持久层api JDBC Java DataBase Connectivity DHTML DynamicHTML cvs Concurrent Version System svn subversion uml UnifiedModelingLanguage AJAX Asynchronous JavaScript and XML bnf 命令书写格式规范: 巴科斯范式 desc description capacity 容量 component 组件 association 联合 aggregation 聚合 composition 组合 alpha 开端 inherit 继承 dhtml dynamic html 是 html css 客户端script 不是规范，是现有技术、标准的整合运用 css Cascading Style Sheet 级联样式表 associated 交互的 perspective 视图 adapter 适配器 jit just in time (compilation) webdav Web-based Distributed Authoring and Versioning Web 分布式创作和版本管理 (WebDAV) 扩展了 HTTP/1.</description>
    </item>
    
    <item>
      <title>Prolog</title>
      <link>http://shenwenqing.com/series/pl/prolog/</link>
      <pubDate>Tue, 09 Oct 2018 16:58:38 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/prolog/</guid>
      <description> 介绍 programming in logic缩写， 是一种逻辑编程语言。广泛应用于人工智能 不是真正意义上的程序，运行步骤由计算机决定。没有if, when, case, for这样的控制流程语句 很难分清哪些是程序，哪些是数据，程序就是数据，是一个智能数据库 有强大的递归功能。  </description>
    </item>
    
    <item>
      <title>Haskell</title>
      <link>http://shenwenqing.com/series/pl/haskell/</link>
      <pubDate>Tue, 09 Oct 2018 16:54:16 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/haskell/</guid>
      <description>介绍 源于ML 标准化的、纯函数式编程语言 非限定性语义和强静态类型 作为其他语言设计新功能时的样板，如Python的lambda标记语句  工具 检索函数用http://www.Haskell.org/hoogle  单词 polymorphism # 多态 monomorphic # 单态  风格 point free style sum&#39; xs = foldl (+) 0 xs sum&#39; = foldl (+) 0  注意 使用缩进代替括号，但也可用括号  文件扩展名 # 文件中不用let定义变量, # 变量赋值两次会报错, 这意味着代码顺序不重要 hs  内置变量 pi  模块 :m Data.Char Data.Map # 加载模块 chr # chr :: Int -&amp;gt; Char ord # ord :: Char -&amp;gt; Int toUpper toLower import Data.</description>
    </item>
    
    <item>
      <title>Lisp</title>
      <link>http://shenwenqing.com/series/pl/lisp/</link>
      <pubDate>Tue, 09 Oct 2018 16:53:40 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/lisp/</guid>
      <description> 介绍 为人工智能开发的函数语言 目前最主要两大方言为scheme和commonLisp。Emacs扩展语言为Lisp，有一种Emacs Lisp语言 拥有理论上最高的运算能力  编译器 sbcl # steel bank common lisp  </description>
    </item>
    
    <item>
      <title>Rust</title>
      <link>http://shenwenqing.com/series/pl/rust/</link>
      <pubDate>Tue, 09 Oct 2018 16:53:03 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/rust/</guid>
      <description>介绍 mozilla开发的,注重安全, 性能, 并发的系统编程语言 js之父Brendan Eich设计</description>
    </item>
    
    <item>
      <title>Scala</title>
      <link>http://shenwenqing.com/series/pl/scala/</link>
      <pubDate>Tue, 09 Oct 2018 16:52:22 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/scala/</guid>
      <description> 介绍 haskell衍生语言 集成了面向对象和函数语言的特性 可以很简单地与已有的java代码交互，只需要反java相关类导入就可以了 面向对象语言同时结合命令式和函数式编程风格  工具 sbt simple build tool  </description>
    </item>
    
    <item>
      <title>Perl</title>
      <link>http://shenwenqing.com/series/pl/perl/</link>
      <pubDate>Tue, 09 Oct 2018 16:51:58 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/perl/</guid>
      <description> 标准 pcre: Perl Compatible Regular Expressions  </description>
    </item>
    
    <item>
      <title>Xml</title>
      <link>http://shenwenqing.com/series/pl/markup_language/xml/</link>
      <pubDate>Tue, 09 Oct 2018 16:51:29 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/xml/</guid>
      <description>标签头  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;  命名空间  &amp;lt;xsl:stylesheet version=&amp;quot;1.0&amp;quot; xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&amp;gt; # xmlns:beans=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; # 引用其它uri空间 ## jar 包中的dtd/xsd文件直接用相对路径引用即可（相当于src/目录下的文件） &amp;lt;h:table xmlns:h=&amp;quot;http://www.w3.org/TR/html4/&amp;quot;&amp;gt; &amp;lt;h:tr&amp;gt; &amp;lt;h:td&amp;gt;Apples&amp;lt;/h:td&amp;gt; &amp;lt;h:td&amp;gt;Bananas&amp;lt;/h:td&amp;gt; &amp;lt;/h:tr&amp;gt; &amp;lt;/h:table&amp;gt; # 命名空间约束文件的查找 1.联网 2.myeclipse中的xml 3.同目录下 4.jar包中 # xmlns:只能有一个没有别名 注意 命名空间不可以分层使用，如 &amp;lt;r:g:element&amp;gt; 是不允许的 例子 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;GB2312&amp;quot; ?&amp;gt; &amp;lt;c:customer xmlns:c=&amp;quot;http://www.customer.com/&amp;quot;&amp;gt; &amp;lt;c:name&amp;gt;ZhangSan&amp;lt;/c:name&amp;gt; &amp;lt;c:phone&amp;gt;09098768&amp;lt;/c:phone&amp;gt; &amp;lt;c:host xmlns:e=&amp;quot;http://www.employee.com/&amp;quot;&amp;gt; &amp;lt;e:name&amp;gt;LiSi&amp;lt;/e:name&amp;gt; &amp;lt;e:phone&amp;gt;89675412&amp;lt;/e:phone&amp;gt; &amp;lt;/c:host&amp;gt; &amp;lt;/c:customer&amp;gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;GB2312&amp;quot;?&amp;gt; &amp;lt;book xmlns=&amp;quot;http://www.library.com/&amp;quot;&amp;gt; &amp;lt;title&amp;gt;The C++ Standard Library&amp;lt;/title&amp;gt; &amp;lt;author&amp;gt;Nicolai M.Josutis&amp;lt;/author&amp;gt; &amp;lt;/book&amp;gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;GB2312&amp;quot;?&amp;gt; &amp;lt;customer xmlns=&amp;quot;http://www.customer.com/&amp;quot; xmlns:e=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>Erlang</title>
      <link>http://shenwenqing.com/series/pl/erlang/</link>
      <pubDate>Tue, 09 Oct 2018 16:50:59 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/erlang/</guid>
      <description> 特点 由爱立信所辖CS-Lab开发，目的是创造一种可以应对大规模并发活动的编程语言。易于编写分布式应用。 面向并发(concurrent-oriented) 在语言中定义了erlang进程的概念和行为，使它特别经量级(309字节)，创建和结束一个进程时间为1-3ms 该进程(绿进程)在rlang虚拟机内管理和高度，是用户态进程 进程堆栈占用233字节 erlang虚拟机支持几十万甚至更多进程 结构化，动态，函数式  </description>
    </item>
    
    <item>
      <title>R</title>
      <link>http://shenwenqing.com/series/pl/r/</link>
      <pubDate>Tue, 09 Oct 2018 16:50:34 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/r/</guid>
      <description> 介绍 本身是GNU的一个开源软件 用于统计分析、绘图 是S语言的一个分支(实现)  特点 数据存储和处理 数组运算(向量、矩阵运算强大)  </description>
    </item>
    
    <item>
      <title>Ruby</title>
      <link>http://shenwenqing.com/series/pl/ruby/</link>
      <pubDate>Tue, 09 Oct 2018 16:50:06 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/ruby/</guid>
      <description> 工具 gems gem update --system  </description>
    </item>
    
    <item>
      <title>C</title>
      <link>http://shenwenqing.com/series/pl/c/</link>
      <pubDate>Tue, 09 Oct 2018 16:49:26 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/c/</guid>
      <description> 库 libvirt  </description>
    </item>
    
    <item>
      <title>Cpp</title>
      <link>http://shenwenqing.com/series/pl/cpp/</link>
      <pubDate>Tue, 09 Oct 2018 16:48:39 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/cpp/</guid>
      <description> 问题 野指针、迷途指针 Double Free问题 智能指针 RAII资源获取就是初始化 二级指针  库 opencv iplimage # 图像处理  </description>
    </item>
    
    <item>
      <title>Html</title>
      <link>http://shenwenqing.com/series/pl/markup_language/html/</link>
      <pubDate>Tue, 09 Oct 2018 16:42:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/html/</guid>
      <description>事件 blur change click dblclick focus keydown keypress keyup load mousedown mousemove mouseout mouseover mouseup reset select submit unload Abort # 中断图片下载时激发 AfterPrint # 打印文档后激发 AfterUpdate # 传送完数据 BeforeCopy # 复制到剪贴板前 BeforeCut # 剪切到剪贴板前 BeforeEditFocus BeforePaste BeforePrint BeforeUnload BeforeUpdate Bounce CellChange CtextMenu Copy Cut DataAvailable DatasetChanged DatasetComplete Drag DragDrop DragEnd DragEnter DragLeave DragOver DragStart Drop Error ErrorUpdate FilterChange Finish Help LoseCapture Move Paste PropertyChange ReadyStateChange Resize RowEnter RowExit RowsDelete RowsInserted Scroll SelectStart Start Stop  标签 &amp;lt;var&amp;gt; # 标识常量 &amp;lt;samp&amp;gt; # 标识输出内容的样式 &amp;lt;pre&amp;gt; # 代码块 &amp;lt;code&amp;gt; # 一段代码  属性 全局属性 # 配置所有元素共有行为 accesskey # 快捷键 ## 需要按alt + 指定的键 class contenteditable # 内容是否可修改, 如p标签 contextmenu # 定义右键菜单，未实现 dir # 文字对齐方式 draggable dropzone hidden id lang spellcheck style tabindex # tab键切换元素的顺序 title  浏览器特性 视频播放 支持vaapi, chrome 加上--enable-vaapi参数可以开启硬件加速解码  方案 &amp;lt;=================================标签========================================&amp;gt; &amp;lt;input&amp;gt;表单 单选框 &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;name&amp;quot; checked value=&amp;quot;1&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;name&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt; 下拉框 &amp;lt;select id=&amp;quot;mySelect&amp;quot; size=10 multiple&amp;gt; # 长度等于10 ，多选 &amp;lt;option selected=&amp;quot;selected&amp;quot;&amp;gt;Apple&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;Orange&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; 勾选框 &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;&amp;quot; /&amp;gt; 按钮 &amp;lt;input type=&amp;quot;button&amp;quot;/&amp;gt; &amp;lt;button&amp;gt; # &amp;lt;button&amp;gt;&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;搜索&amp;lt;/button&amp;gt; button之间可以加图片 &amp;lt;table&amp;gt;表格 &amp;lt;caption&amp;gt; # 标题 &amp;lt;thead&amp;gt; &amp;lt;th&amp;gt; &amp;lt;td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;/th&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tfoot&amp;gt; 属性 &amp;lt;tr style=&amp;quot;display: none;&amp;quot;&amp;gt; # 设置属性为隐藏 &amp;lt;form&amp;gt;表单 enctype属性 application/x-www-form-urlencoded(默认) # 在发送编码所有字符（空格转换为 &amp;quot;+&amp;quot; 加号，特殊符号转换为 ASCII HEX 值） multipart/form-data # 不对字符进行编码，在上传文件时使用 text/plain # 空格转换为+，但是不对特殊字符进行编码 &amp;lt;hr&amp;gt;分割线 字体 &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; .</description>
    </item>
    
    <item>
      <title>Css</title>
      <link>http://shenwenqing.com/series/pl/css/</link>
      <pubDate>Tue, 09 Oct 2018 16:27:24 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/css/</guid>
      <description>介绍 cascading style sheet  层叠 # 浏览器对每个元素定义了默认的样式表 不同级 1. style属性 2. style标签 3. link标签 4. 浏览器中用户自定义样式表 5. 浏览器默认样式 !important color: black !important 同级 # 评估得出最特殊的样式 ## a-b-c值依次排序，a如id个数, b如其他属性个数, c如元素名个数 # 评分相同时，使用最后的 id值的数目 其它属性和伪类的数目 元素名和伪元素的数目  继承 部分元素继承父元素样式 元素外观继承 布局不继承 inherit # 指明使用父元素样式 border: inherit  css样式一共三种用法: 内联式 &amp;lt;div style=&amp;quot;color:#000;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 嵌入式 &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt; div {color:#000;} &amp;lt;/style&amp;gt; 引用式 &amp;lt;link href=&amp;quot;css.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;  @ @charset &amp;ldquo;UTF-8&amp;rdquo; # 默认UTF-8, 在import前 @import &amp;ldquo;styles.</description>
    </item>
    
    <item>
      <title>Php</title>
      <link>http://shenwenqing.com/series/pl/php/</link>
      <pubDate>Tue, 09 Oct 2018 16:24:33 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/php/</guid>
      <description>安装  php, php-cgi 编译安装 yum install libxml2-devel openssl-devel bzip2-devel libmcrypt-devel -y ./configure --prefix=/opt/zly/php --with-mysql=mysqlnd --with-openssl --with-mysqli=mysqlnd --enable-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --enable-sockets --enable-fpm --with-mcrypt --with-config-file-path=/etc --with-config-file-scan-dir=/etc/php.d --with-bz2 make make install cp php.ini-production /etc/php.ini cp sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm chmod +x /etc/rc.d/init.d/php-fpm cp /opt/zly/php/etc/php-fpm.conf.default /opt/zly/php/etc/php-fpm.conf chkconfig --add php-fpm chkconfig php-fpm on /etc/init.d/php-fpm start  命令  php -S localhost:8000 -t dir/  配置  /etc/php/php.ini date.timezone = Europe/Berlin # 时区设置 display_errors = On  框架 zend opcache # php5.</description>
    </item>
    
    <item>
      <title>Elixir</title>
      <link>http://shenwenqing.com/series/pl/elixir/</link>
      <pubDate>Tue, 09 Oct 2018 16:24:04 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/elixir/</guid>
      <description>介绍  跑在erlang虚拟机上 与erlang相同，actor称作进程, 是比线程更轻量的概念  使用 o-&amp;gt; 元组 {:foo, &amp;quot;this&amp;quot;, 42} # 三元组 o-&amp;gt; actor defmodule Talker do def loop do receive do {:greet, name, age} -&amp;gt; IO.puts(&amp;quot;Hello #{name}&amp;quot;) {:shutdown} -&amp;gt; exit(:normal) end loop end end pid = spawn(&amp;amp;Talker.loop/0) send(pid, {:greet, &amp;quot;Huey&amp;quot;, 16}) sleep(1000) Process.flag(:trap_exit, true) pid = spawn_link(&amp;amp;Takler.loop/0) send(pid, {:shutdown}) receive do {:EXIT, ^pid, reason} -&amp;gt; IO.puts(&amp;quot;Talker has exited (#{reason})&amp;quot;) end o-&amp;gt; 有状态的actor # 递归 defmodule Counter do def start(count) do spawn(__MODULE__, :loop, [count]) # 伪变量__MODULE__, 是当前模块的名字 end def next(counter) do send(counter, {:next}) end def loop(count) do receive do {:next} -&amp;gt; IO.</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://shenwenqing.com/series/pl/go/</link>
      <pubDate>Tue, 09 Oct 2018 16:10:44 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/go/</guid>
      <description>特点  原生支持并发，编译执行的类脚本语言 不支持动态库，不支持重载，不支持泛型，有怪异的正则  命令 godoc -http=:6060 # 运行本地帮助网站 go build # 编译代码包 install # 编译安装 get # 下载依赖 # 默认目录是GOPATH下的pkg -u # update -v clean # 清理build产生的文件 -c # 清理.test文件 -i # 清理生成的可执行文件 -r # 包括依赖包的结果文件 run # 编译并运行 list # 列出指定代码包的信息 fix # 升级旧代码成新版本代码 vet # 检查静态错误 test # go test -cover -args -config config_it.toml -test.run &amp;quot;TestA&amp;quot; # 执行当前目录下所有_test.go结尾的文件 -file # 可省略，测试单个文件, 如go test test_a.go a.go a.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>http://shenwenqing.com/series/pl/python/</link>
      <pubDate>Tue, 09 Oct 2018 16:05:05 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/python/</guid>
      <description>介绍  虚拟机语言 虽然是脚本语言，可以预编译成pyc文件来执行  shell  #! /usr/bin/python # -*- coding: utf8 -*-  语法 规范 pep8  内置函数 o-&amp;gt; input(&amp;quot;&amp;quot;) # x = int(input(&amp;quot;Please enter an integer:&amp;quot;)) print(&amp;quot;%s&amp;quot;, % s1) ## %.3s % (&amp;quot;abcdef&amp;quot;)取3字符 ## %.* s % (2, &amp;quot;abcd&amp;quot;)取2字符) # %r repr()显示字符串 # %c 单个字符 # %b 二进制整数 # %x 十六进制整数 # %d 十进制整数 # %i 十进制整数 # %o 八进制整数 # %e %E 指数(基底分别为e E) # %-10.</description>
    </item>
    
    <item>
      <title>Scheme</title>
      <link>http://shenwenqing.com/series/pl/scheme/</link>
      <pubDate>Tue, 09 Oct 2018 16:03:20 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/scheme/</guid>
      <description>特点  词法定界(Lexical Scoping) 动态类型(Dynamic Typing) 良好的可扩展性 尾递归(Tail Recursive) 函数作为值返回 计算连续 传值调用(passing-by-value) 算术运算相对独立  标准  R5RS (Revised5 Report on the Algorithmic Language Scheme) Guile (GNU&#39;s extension language)  guile脚本中(.scm)  #! /usr/local/bin/guile -s !#  语法 注释 ; # 注释到行尾 #! ... !# # 标准中没有，实现中有的多行注释 类型 1 &#39;symbol &amp;quot;str&amp;quot; true, false struct empty # 表示一个空表 块(form) (define x 123) (set! x &amp;quot;abc&amp;quot;) (+ 1 2) (* (+ 2 (* 3 4)) (+ 5 6 7)) (display &amp;quot;hello world&amp;quot;) (not #f) # #t (not #t) # #f # not 后不是逻辑型，都返回#f 非精确数 (- #i1.</description>
    </item>
    
    <item>
      <title>Clojure</title>
      <link>http://shenwenqing.com/series/pl/clojure/</link>
      <pubDate>Tue, 09 Oct 2018 16:00:21 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/clojure/</guid>
      <description>介绍  是jvm上的一个lisp语言变种，比lisp更强调纯函数式编程 操作符知道自己的特征值(identity value), 如+是0, *是1 数组是懒惰的，需要时求值。适用于任意层的嵌套。头元素在使用后舍弃 集合(vector, map, set)都是持久的，使用共享结构，与ruby, java中非持久结构有相似的性能 # 持久的数据结构中，其它线程对数据的修改对该线程是不可见的 没有尾递归优化，不常用递归，要用loop.recur  语法  s-expressions (max 3 5) (+ 1 (* 2 3)) (def meaning-of-life 42) (if (&amp;lt; meaning-of-life 0) &amp;quot;negative&amp;quot; &amp;quot;non-negative&amp;quot;) (def droids [&amp;quot;Huey&amp;quot; &amp;quot;Dewey&amp;quot; &amp;quot;Louie&amp;quot;]) (count droids) (droids 0) (def me {:name &amp;quot;Paul&amp;quot; :age 45 :sex :male}) (:age me) (defn percentage [x p] (* x (/ p 100.0))) (percentage 200 10)  并发 o-&amp;gt; 原子变量 # 对一个值进行同步更新 (def my-atom (atom 42)) (deref my-atom) @my-atom (swap!</description>
    </item>
    
    <item>
      <title>JS</title>
      <link>http://shenwenqing.com/series/pl/js/</link>
      <pubDate>Tue, 09 Oct 2018 10:31:30 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/js/</guid>
      <description>commonJs规范下的javascript node.js mongoDB ringojs  特性 面向对象 动态语言(已超出脚本语言的范畴) 语法源自java first-class function的思想来自Scheme语言 prototype-based的思想来自Self语言  机制 弱类型，变量都是var 解释器有自己的内存管理机制(garbage collection) 自由数据类型转换 # 产生了==, ===的判断相等的不同定义  历史 Netscape(现Mozilla)创建JavaScript, 但JavaScript是Sun(现Oracle)的注册商标 作为标准提交给ECMA(欧洲计算机制造协会), 改名为ECMAScript # ECMAScript 3(ES3) 作为标准广泛使用 ## ECMAScript 5(ES5) 定义了新的语言标准 # JavaScript1.5是Mozilla的版本号, 相当于ES3,包含一些非标准语言扩展 ## JavaScript1.8 # JavaScript解释器或引擎(engine)也有版本号, Google的叫做V8(现在是4.0) 微软改动并取名Jscript  v8引擎 直接生成机器码 分代式GC java jvm工程师参数了优化  语法 api不包括输入输出功能 # 输入输出由宿主环境提供, 如web浏览器或node.js调用工具的控制台 html中js执行顺序 当页面载入时，会执行位于 body 部分的 JavaScript。 当被调用时，位于 head 部分的 JavaScript 才会被执行。 对象参数 arguments # 当前函数的所有参数数组 arguments.</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>http://shenwenqing.com/series/pl/java/</link>
      <pubDate>Tue, 09 Oct 2018 08:48:07 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/java/</guid>
      <description>打包  建立一个文件夹叫jnb 将编译好的标签处理类连同包一起拷贝到jnb中 在jnb目录下创建META-INF目录 在META-INF中存储tld文件，修改tld文件添加http:# www.xxx.com jar cvf jnb.jar *   bin目录命令 javac # 编译器 java # 解释器 appletviewer # 小程序浏览器，执行HTML文件上java小程序类 javadoc # 生成HTML格式的帮助文档 jdb # java调试器 javah # 反编译成c头文件 javap # 反编译成java文件 jar # 打包工具 htmlconverter # 不明 native2ascii # 转换为unicode编码 serialver # 返回指定类的序列化号serialverUID  java类型占字节数 byte 1个字节 short 2个字节 char 2个字节 int 4个字节 long 8个字节 float 4个字节 double 8个字节 boolean 1-4字节  命令 javac # 编译器 java # 解释器 appletviewer # 小程序浏览器，执行HTML文件上java小程序类 javadoc # 生成HTML格式的帮助文档 jdb # java调试器 javah # 反编译成c头文件 javap # 反编译成java文件 jar # 打包工具 htmlconverter # 不明 native2ascii # 转换为unicode编码 serialver # 返回指定类的序列化号serialverUID jar cvfm ul.</description>
    </item>
    
    <item>
      <title>JavaWeb</title>
      <link>http://shenwenqing.com/series/pl/javaweb/</link>
      <pubDate>Tue, 09 Oct 2018 08:48:07 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/javaweb/</guid>
      <description>分层 示意 层 |视图层 --&amp;gt; | 控制层（） --&amp;gt; |业务层 --&amp;gt; |dao数据访问层对象 --&amp;gt; |数据库 技术 |jsp(c:forEach) |servlet获取list域 |service过滤数据 |封装对象List | 对象 |bean销毁 | | |创建bean | 业务 |web服务器tomcat | | | |存储过程（银行） java web 13种技术 JDBC Java Database Connectivty JNDI Java Name and Directory Interface EJB Enterprise JavaBean RMI Remote Method Invoke Java IDL/CORBA JSP Java Server Pages Java Servlet XML Extensible Markup Language JMS Java Message Service JTS Java Transaction Service JTA Java Transaction Architecture JavaMail JAF JavaBeans Activation Framework  框架 spring site # 整合框架 tapestry # 基于servlet的mvc框架 titles # apache的标签库 jersey # restful服务 guice # google的ioc轻量框架 ehcache # 缓存 httpclient httpComponents ejb # 会话bean, 实体bean, 消息驱动bean proguard # 混淆 i18n  监听器 启动顺序 先启动监听器，再启动过滤器 ServletContextListener ServletContextAttributeListener HttpSessionListener HttpSessionAttributeListener HttpSessionActivationListener web.</description>
    </item>
    
    <item>
      <title>pl语言</title>
      <link>http://shenwenqing.com/series/pl/language/</link>
      <pubDate>Mon, 08 Oct 2018 22:49:33 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/language/</guid>
      <description>elixir .net lua objective-c swift erlang R groovy # 基于jvm，结合python, ruby, smalltalk的特性
dart # 谷歌发布的基于javascript的编程语言 hack # facebook开发的基于HHVM，可与PHP无缝对接 特点 结合了PHP开发高效性同时，有了静态语言的报错特性 支持lambda表达式和强制返回等流行特性 roy # 可编译到js elm # 可编译到js jujia # 动态语言，用于科学和数值计算
Fortran # 最早出现的高级语言，用于工程计算领域 ML # meta language, 非纯函数式编程,允许副作用和指令式编程 lisp haskell prolog OCaml # 在caml上加上oo, 源于ML simula # 专注于仿真的语言，由类创建的对象会在协调的多线程模式下，像erlang的进程一样并行处理</description>
    </item>
    
    <item>
      <title>编译</title>
      <link>http://shenwenqing.com/series/pl/parser/</link>
      <pubDate>Mon, 08 Oct 2018 22:47:30 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/parser/</guid>
      <description> 流程  词法分析，语法分析，语义分析，中间代码生成，中间代码优化，目标代码生成，表格管理，错误处理 语义分析 -&amp;gt; 类型检查/推导 -&amp;gt; 代码优化 -&amp;gt; 机器码生成 # 中间数据结构, 比如AST 预处理，连接程序，装入程序，调试程序  文法  G = (Vn, Vt, S, P) # 终极符号, 非终级符号, 一个特殊非终级符号，产生式 类型 短语(0), 对应图灵机(TM) 上下文相关(1), 对应线性有界自动机(LBA) 上下文无关(2), 对应下推自动机(PDA) 线性文法、正则文法、正规文法，对应有限自动机(FA) # 无法控制自返数  状态机(FA)  确定状态机(DFA) 非确定状态机(NFA) # 同状态可多种转移 DFA与NFA互相转换  词法分析  状态转换矩阵法  语法分析  自顶向下 # 最左推导建立语法树 # first集，follow集，predict集 不回溯方法 递归下降 LL(1) # 从左输入符号、产生左推导、每次读一个字符。LL(k)特例 自底向上 # 从左读, 从右向前归约 简单优先关系 # 运算符优先关系矩阵 LR(k) # 从左输入，最右推导 LR(0) # 只看栈顶状态，有分析动作冲突 SLR(1) # LR(0)加向前看展望符，不能分析所有文法 LR(1) # LR(0)的每个推导加一个向前搜索符，状态太多 LALR(1) # LR(1)中同向前搜索符的状态合并  语义分析  抽象语法树 符号表 # 动态规划记录变量的综合信息 局部化处理 # 压栈变量作用域  中间代码生成  后缀式(逆波兰式) 三地址 # 操作符两变量地址，结果地址 四元式操作符 # 地址加，赋值，过程调用，类型转换，算术、逻辑、关系运算的存储 语法制导 # 中间代码产生式后拼上语义程序，在语法分析中遇到动作马上处理 类型检查 下标变量 # 如数组下标，同上全用四元式表示  中间代码优化  常量表达式 a = 1, b = 2, c = a + b, 则只记c = 3 公共表达式 a = b * c, d = b * c, 则只记a 循环不变式外提 while k &amp;lt; 0 do b * c, 则b * c外提只计算一次 基本块 # 一块语句要么全执行，要么全不执行 消减运算强度 如加法代替乘法 复写传播 a = b, 后a, b不再变值，用a替代b 无用代码消除 数学优化（恒等变换） 如a + 0 = a, a * 1 = a, a ^ 2 = a * a, a / 1 = a, 0 / a = 0 窥孔优化 对目标代码中短指令序列局部改进，如删除重复，控制流优化，代数化简，使用特殊指令等 全局优化 对整个程序控制流和数据分析再优化，如常量表达式全局优化  运行时时空管理  内存划分 存储 引用的库的代码 目标代码 静态变量 栈区 # 函数调用，中断现场 堆区 存储策略 静态分配 #编译时分配固定存储单元 动态分配 栈 堆 活动记录 保存局部变量，中间结果，临时变量，过程调用，控制信息等 专用寄存器 调用链 # 保存下一个调用的起始地址 动态链 # 保存前一个调用的起始地址 访问环境 # 记录闭包起始地址 display表 # 过程需要的所有非局部数据所在的过程活动记录的起始地址 全局display表 静态链 # 指向外层过程的活动记录的地址地址  目标代码生成  生成的语言 机器语言 可重定位的机器语言 # 由连接器装配后生成机器语言 # 多数用这种，如c语言 汇编语言 指令选择 虚拟机 寄存器分配 四元式翻译  </description>
    </item>
    
    <item>
      <title>pl原理</title>
      <link>http://shenwenqing.com/series/pl/principle/</link>
      <pubDate>Mon, 08 Oct 2018 22:46:50 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/principle/</guid>
      <description> gc 分类 mark-and-sweep reference-counting arc # automatic reference counting  </description>
    </item>
    
    <item>
      <title>算法分类</title>
      <link>http://shenwenqing.com/series/algorithm/algorithm/</link>
      <pubDate>Mon, 08 Oct 2018 22:40:12 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/algorithm/</guid>
      <description>加密 签名 公钥 dsa ecdsa rsa  资源 token bucket # 令牌桶 通过多少流量，删除多少令牌 突发流量 丢弃 排队 特殊标记发送，网络过载时丢弃加标记的包 过程 产生令牌 消耗令牌 判断数据包是否通过 作用 限制平均传输速率，允许突发传输 leaky bucket # 漏桶 作用 强行限制数据传输速率 max-min fairness # 加权分配资源 dominant resource fairness (DRF) # 一种 max-min fairness实现，可以多资源分配  NP问题 介绍 polynomial problem(p问题), 可以在多项式时间内解决的问题 non-deterministic polynomial problem(np, 非确定性多项式问题)，指可以在多项式时间内得到一个解的问题 non-deterministic polynomial hard problem(np-hard, np-hard问题)很难找到多项式时间算法的问题 non-deterministic polynomial complete problem(npc，np完全问题)很难找到多项式时间算法的np问题, 包含np-hard  hash 介绍 将任意长度二进制值映射到较短固定长度二进制值。改一个值会生成不同的哈希 同一个哈希(散列)的二进制值是不存在的 常见的有: md5, sha, sha1, sha256, sha512, RSA-SHA  排序 插入排序 冒泡排序 选择排序  希尔排序 概念 shellsort diminishing increment sort(缩减增量排序) increment sequence(增量序列)  桶排序 介绍 bucket sort 将数据分到有限数量的桶子里，每个桶分别排序(可能再使用别的排序办法) 当数据均匀分配时，时间复杂度是O(n), 不受O(nlogn)下限的影响 适用于小范围、独立均匀分布的整数数据。可以计算数据量大，符合线性期望时间的排序 步骤 # 排序7, 36, 65, 56, 33, 60, 110, 42, 42, 94, 59, 22, 83, 84, 63, 77, 67, 101 1.</description>
    </item>
    
    <item>
      <title>算法分析</title>
      <link>http://shenwenqing.com/series/algorithm/analysis/</link>
      <pubDate>Mon, 08 Oct 2018 22:28:31 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/analysis/</guid>
      <description>时间复杂度 概念 time complexity O()表示上界(&amp;lt;=), Ω() [omega]表示下界(&amp;gt;=), Θ() [Theta] 表示上下界相同, o()表示非Θ()的O() N &amp;gt;= n0时, T(N) &amp;lt;= cf(N), 记为T(N) = O(f(N)) N &amp;gt;= n0时, T(N) &amp;gt;= cg(N), 记为T(N) = Ω(g(N)) T(N) = Θ(h(N)) 当且仅当T(N) = O(h(N)) 和 T(N) = Ω(h(N)) 上界(upper bound) 下界(lower bound) 法则 # 约定, 不存在特定的时间单位 # 约定, 机器模型中, 1. 所有指令顺序执行。2. 任一简单的工作都恰好花费一个时间单位 ## 假设不存在如矩阵求逆或排序这样的单位操作 1. 如果T1(N) = O(f(N)), T2(N) = O(g(N)), 那么 T1(N) + T2(N) = O(f(N) + g(N)), 或写成 max(O(f(N)), O(g(N))) T1(N) * T2(N) = O(f(N) * g(N)) 2.</description>
    </item>
    
    <item>
      <title>算法思想</title>
      <link>http://shenwenqing.com/series/algorithm/thought/</link>
      <pubDate>Mon, 08 Oct 2018 22:21:21 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/thought/</guid>
      <description>口诀 难题首选动归 受阻贪心暴力 考虑分治思想 配合排序哈希  递归 介绍 recursion 利用递归，把状态的管理责任推给运行时 递归转迭代 可加上memory做优化  分治 介绍 divide and conquer 广义分治法 例子 二分检索 找最大/最小元素 归并分类 快速分类 选择问题 斯特拉森矩阵乘法  贪心 介绍 greedy 案例 Dijkstra最短路径 最小生成树Prim, Kruskal 背包问题 作业排序 最优归并模式  动态规划 介绍 dynamic planning 方法 常用滚动数组降低空间复杂度 案例 多段图 结点间最短路径 最优二叉检索树 0/1背包问题 可靠性设计 货郎担问题(旅行商问题) 流水线调度问题  检索与周游 介绍 retrieval/travel 案例 深度优先检索 广度优先检索 与/或图 对策树  回溯 介绍 backtracking 案例 8皇后问题 图的着色 哈密顿环 背包问题  暴力 介绍 分支限界条件加快效率 例子 DFS, BFS   分支-限界</description>
    </item>
    
    <item>
      <title>Archlinux安装</title>
      <link>http://shenwenqing.com/series/ops/archlinux/</link>
      <pubDate>Mon, 08 Oct 2018 20:31:09 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/ops/archlinux/</guid>
      <description>设置  ahci, secure boot, post behavious thorough  源  vim /etc/pacman.d/mirrorlist pacman -Syy  依赖  base-devel  分区  # mount -t efivarfs efivarfs /sys/firmware/efi/efivars # 判断efi cfdisk mkfs.vfat -F32 /dev/nvme0n1p1 # 或直接使用windows的uefi分区 mkfs.ext4 /dev/nvme0n1p2 mkswap /dev/nvme0n1p3 swapon /dev/nvme0n1p3 mount /dev/nvme0n1p2 /mnt mkdir -p /mnt/boot/EFI mount /dev/nvme0n1p1 /mnt/boot/EFI  配置  pacstrap -i /mnt base genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab arch-chroot /mnt /bin/bash pacman -S dialog wpa_supplicant vim vim /etc/locale.</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>http://shenwenqing.com/series/pl/markup_language/markdown/</link>
      <pubDate>Sun, 07 Oct 2018 17:10:37 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/pl/markup_language/markdown/</guid>
      <description> 标题 # 到 ######开头 # 分别表示一号 到 六号 标题  字体 **a**或__a__ # 加粗 *a*或_a_ # 斜体 ***a***或___a___ # 加粗斜体 ~~a~~ # 删除线  引用 &amp;gt;a &amp;gt;&amp;gt;b # 不断增加&amp;gt;来多层引用  分割线 --- # 三个及以上 *** # 三个及以上，与---显示无分别  图片 ![alt内容](url &amp;quot;title内容&amp;quot;) # alt显示在图片下，title在鼠标悬停时显示  超链接 [文本](url) &amp;lt;a href=&amp;quot;url&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;文本&amp;lt;/a&amp;gt; # 可以用a标签指定target，在新页面显示  列表 -或+或*开头 # 无序列表- 数字加点开头 # 有序列表，行数自动 多空格（至少两个）加列表开头 # 嵌套列表  表格 标题1|标题2|标题3 # 默认居中对齐 -|-|- # -可以多个，:-控制标题和内容左对齐，:-:居中，-:右对齐 1|2|3 ＃ 默认左对齐  代码 `a + b;` # 单选代码 ``` function a(){ } ``` # 多行代码 # tab开头  流程图 略  </description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>http://shenwenqing.com/series/algorithm/data_structure/</link>
      <pubDate>Sun, 07 Oct 2018 13:46:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/data_structure/</guid>
      <description>树 概念 tree free tree(自由树)，连通无回路的图 full tree(满树)，所有节点要么是树叶，要么是两个儿子 forest(森林)，无回路但不一定连通的图 root rooted tree(有根树)，确定根的树，常简称为树 node ancestor(祖先)，顶点本身也作为自己的祖先 proper ancestor(真祖先)，除了自己的祖先 parent(父母) child(子女) sibling(兄弟) leaf(叶节点), 没有子女的顶点 parental(父节点)，至少有一个子女的顶点 descendant(子孙)，以v为祖先的所有节点，包含v proper descendant(真子孙)，不包含本身 subtree(子树) depth(深度)，从根到v简单路径的长度 height depth 树中结点的最大级数 rank(秩) # 子女数 height(高度)，从根到叶节点最长简单路径的长度 # 按树的层的数量定义时，高度增加1 degree(度，一个节点子树的数目) level(root为1级, 结点为p级时，儿子在p+1级) state-space tree(状态空间树)，可用于分析回溯和分支界限 ordered tree(有序树)，有根树的每个顶点，所有子女有序 first child-next sibling representation(先子女后兄弟表示法) # 子女数不定，父节点只存第一个子女，该子女存兄弟链表 ## 以一种高效方式将有序树改造成关联二叉树 ## 关联二叉树中，左指针表示下层，右指针表示兄弟节点 binary tree(二叉树)，属于有序树 left child(左子女) right child(右子女) 左(右)子树 # 二叉树可以递归定义，所有可以用递归算法 binary search tree(二叉查找树)，父母顶点比左子树中所有数字大，右子树中小 效率，多取决于高度 logn &amp;lt;= h &amp;lt;= n - 1 # h 为高度, n为顶点数 multiway search tree(多路查找树) B树, B+树, B-树 边 树向边 回边 前向边 # 顶点到非子孙 交叉边 # 非前三都是交叉边 性质 |E| = |V| - 1 # 树的边数总比顶点数小1 # 图变树的必要不充分条件，连通图变树的必要充分条件 任意两个顶点间总存在简单路径，任选顶点可作根  二叉树 介绍 binary tree 常用顺序表或链表存储 概念 full binary tree(满二叉树) # 满子节点，且子节点在同一层上 heap(堆) # 根向下从大到小排序 binary search tree(二分检索树) # 左子节点小于父节点小于右子节点 left child(左子女) right child(右子女) 左(右)子树 # 二叉树可以递归定义，所有可以用递归算法 complete binary tree(完全二叉树) # 只有最大层节点不满且连续集中在左边 高是logN 可以用数组实现(从index = 1开始存储) 左儿子在2i, 右儿子在2i + 1, 父亲在i / 2 perfect binary tree(理想二叉树) # 满节点二叉树 full binary tree(满二叉树) # 同理想二叉树 skewed tree(斜树) # 一个节点不断左斜是左斜树，相反为右斜树 binary search tree(二叉查找树) # 父母顶点比左子树中所有数字大，右子树中小 AVL tree(Adelson-Velskii-Landis tree) # 带有平衡条件(balance condition)的二叉查找树 平衡条件: 左右子树最多差1 # 节点中存储高度信息 splay tree(伸展树) # 分析树的一种 效率，多取决于高度 logn &amp;lt;= h &amp;lt;= n - 1 # h 为高度, n为顶点数 树转换二叉树  堆 概念 binary heap(二叉堆、堆) # 一棵完全二叉树 结构性 heap-order property(堆序性) heap-order tree(堆序树) 已证明，平均一次插入需要2.</description>
    </item>
    
    <item>
      <title>算法常用数学</title>
      <link>http://shenwenqing.com/series/algorithm/math/</link>
      <pubDate>Sun, 07 Oct 2018 12:46:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/math/</guid>
      <description>指数 X^A * X^B = X^(A + B) X^A / X^B = X^(A - B) (X^A)^B = X^(A * B) X^N + X^N = 2X^N &amp;lt;&amp;gt; X^(2N) 2^N + 2^N = 2^(N + 1)  对数 约定 计算机科学中, log默认为log(2) X^A = B, log(X)(B) = A log(A)(B) = log(C)(B)/log(C)(A) logAB = logA + logB  级数 ∑(i=0)(N)2^i = 2^(N + 1) - 1 ∑(i=0)(N)A^i = (A^(N + 1) - 1) / (A - 1) 如果0 &amp;lt; A &amp;lt; 1, 则 &amp;lt;= 1 / (1 - A) ∑(i=1)(∞)i/2^i = 2 ∑(i=1)(N)i = N(N + 1) / 2 ≈ N^2 / 2 ∑(i=1)(N)i^2 = N(N + 1)(2N + 1) / 6 ≈ N^3 / 3 ∑(i=1)(N)i^k ≈ N^(k + 1) / |k + 1| k &amp;lt;&amp;gt; -1 k = -1时, Hn = ∑(i=1)(N)1 / i ≈ log(e)(N), Hn是调和级数 该近似式误差趋向于 λ ≈ 0.</description>
    </item>
    
    <item>
      <title>算法常用术语</title>
      <link>http://shenwenqing.com/series/algorithm/term/</link>
      <pubDate>Sun, 07 Oct 2018 11:47:46 +0800</pubDate>
      
      <guid>http://shenwenqing.com/series/algorithm/term/</guid>
      <description>graph 图 TSP traveling salesman problem 旅行商问题 graph-coloring-problem 图填色问题 combinatorial problems 组合问题 geometric algorithm 几何问题 closest-pair problem 最近对时间 convex-hull problem 凸包问题 numerical problem 数值问题 lexicographic order 字典序 on-line algorithm 联机算法 ADT abstract data type 抽象数据类型 activation record 活动记录 # 递归栈所存的信息 stack frame 栈桢 # 同 activation record circular array 循环数组 amoritzed 摊还 biased deletion 偏删除 # 二叉树删除节点引起平衡不足问题的删除 symbol table 符号表 # 编译器用 tranposition table 变换表 # 游戏用 tick 滴答 # 模拟的一份时间 external sorting 外部排序 comparison-based sorting 基于比较的排序 transposition table # 置换表  </description>
    </item>
    
  </channel>
</rss>